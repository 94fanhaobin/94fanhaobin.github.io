<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux-7</title>
    <link href="/2023/08/31/Linux-7/"/>
    <url>/2023/08/31/Linux-7/</url>
    
    <content type="html"><![CDATA[<h1 id="postgresql架构与原理"><a href="#postgresql架构与原理" class="headerlink" title="postgresql架构与原理"></a>postgresql架构与原理</h1><h2 id="体系架构概览"><a href="#体系架构概览" class="headerlink" title="体系架构概览"></a>体系架构概览</h2><p>PostgreSQL和MySQL相似,也采用典型的C/S模型。</p><p>PostgreSQL体系结构分两部分</p><ul><li>实例 instance(内存)</li><li>磁盘存储</li></ul><p><strong>实例 instance 包括</strong></p><ul><li>进程（客户端的响应进程，服务端的处理进程）</li><li>内存存储结构</li></ul><p><img src="linux7_1.jpg" alt="linux7_1"></p><p>PostgreSQL是进程架构模型，MySQL是线程架构模型</p><p><img src="linux7_2.jpg" alt="linux7_2"></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><strong>Postmaster 主进程</strong></p><ul><li>它是整个数据库实例的主控制进程，负责启动和关闭该数据库实例。</li><li>实际上,使用pg ctl来启动数据库时，pg_ctl也是通过运行postgres来启动数据库的，只是它做了一些包装,更容易启动数据库。</li><li>它是第一个PostgreSQL进程，此主进程还会fork出其他子进程，并管理它们。</li><li>当用户和PostgreSQL建立连接时，首先是和Postmaster进程建立连接。首先，客户端会发出身份验证的信息给Postmaster进程，Postmaster进程根据消息中的信息进行身份验证判断，如果验证通过，它会fork出一个会话子进程为这个连接服务。</li><li>当某个服务进程出现错误的时候，Postmaster主进程会自动完成系统的恢复。恢复过程中会停掉所有的服务进程,然后进行数据库数据的一致性恢复,等恢复完成后，数据库又可以接受新的连接。<ol><li>验证功能是通过配置文件pg_hba.conf和用户验证模块来提供。</li><li>postmaster 程序是指向postgres的软链接</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@ubuntu2004 ~]<span class="hljs-comment">#ll /apps/pgsql/bin/postmaster </span><br>lrwxrwxrwx 1 root root 8 Dec 28 01:19 /apps/pgsql/bin/postmaster -&gt; <br>postgres*<br></code></pre></td></tr></table></figure><p><strong>BgWriter 后台写进程</strong></p><ul><li>为了提高插入、删除和更新数据的性能，当往数据库中插入或者更新数据时，并不会马上把数据持久化到数据文件中,而是先写入Buffer中</li><li>该辅助进程可以周期性的把内存中的脏数据刷新到磁盘中</li></ul><p><strong>WalWriter 预写式日志进程（类似于mysql的事务日志</strong><br> <em>有了日志优点安全、速度快，缺点占用磁盘空间大、IO多一次—日志追加写入比直接随机写入数据库快</em></p><ul><li>WAL是write ahead log的缩写，WAL log旧版中称为xlog，相当于MySQL中Redo log</li><li>预写式日志是在修改数据之前，必须把这些修改操作记录到磁盘中，这样后面更新实际数据时，就不需要实时的把数据持久化到文件中了。即使机器突然宕机或者数据库异常退出，导致一部分内存中的脏数据没有及时的刷新到文件中，在数据库重启后，通过读取WAL日志，并把最后一部分WAL日志重新执行一遍，就能恢复到宕机时的状态了</li><li>WAL日志保存在pg_wal目录(早期版本为pg_xlog) 下。每个xlog文件默认是16MB,为了满足恢复要求，在pg_wal目录下会产生多个WAL日志，这样就可保证在宕机后，未持久化的数据都可以通过WAL日志来恢复，那些不需要的WAL日志将会被自动覆盖</li></ul><p><strong>Checkpointer 检查点进程（数据写入到磁盘）</strong></p><ul><li>检查点(Checkpoints)是事务序列中的点,保证在该点之前的所有日志信息都更新到数据文件中。</li><li>在检查点时，所有脏数据页都冲刷到磁盘并且向日志文件中写入一条特殊的检查点记录。在发生崩溃的时候，恢复器就知道应该从日志中的哪个点（称做redo 记录）开始做 REDO操作，因为在该记录前的对数据文件的任何修改都已经在磁盘上了。在完成检查点处理之后，任何在redo记录之前写的日志段都不再需要，因此可以循环使用或者删除。在进行WAL 归档的时候，这些日志在循环利用或者删除之前应该必须先归档保存检查点(CKPT)在特定时间自动执行一个检查点,通过向数据库写入进(BgWriter) 传递消息来启动检查点请求。</li></ul><p><strong>AutoVacuum 自动清理进程</strong></p><ul><li>执行delete操作时，旧的数据并不会立即被删除，在更新数据时，也不会在旧的数据上做更新，而是新生成一行数据。旧的数据只是被标识为删除状态，在没有并发的其他事务读到这些旧数据时，它们才会被清除掉autovacuum lanucher负责回收垃圾数据的master进程,如果开启了autovacuum的话,那postmaster会fork这个进程</li><li>autovacuum worker 负责回收垃圾数据的worker进程,是lanucher进程fork出来的</li></ul><p><strong>PgStat 统计数据收集进程</strong></p><ul><li>此进程主要做数据的统计收集工作</li><li>收集的信息主要用于查询优化时的代价估算。统计的数据包括对一个表或索引进行的插入、删除、更新操作，磁盘块读写的次数以及行的读次数等。</li><li>系统表pg_statistic中存储了PgStat收集的各类统计信息</li></ul><p><strong>PgArch 归档进程</strong></p><ul><li>默认没有此进程,开启归档功能后才会启动archiver进程</li><li>WAL日志文件会被循环使用，也就是说WAL日志会被覆盖,利用PgArch进程会在覆盖前把WAL日志备份出来,类似于binlog,可用于备份功能</li><li>PostgreSQL 从8.X版本开始提供了PITR ( Point-In-Time-Recovery)技术，即就是在对数据厍进行过一次全量备份后，该技术将备份时间点后面的WAL日志通过归档进行备份，将来可以 使用数据库的全量备份再加上后面产生的WAL 日志，即可把数据库向前恢复到全量备份后的任意一个时间点的状态</li></ul><p><strong>SysLogger 系统日志进程</strong></p><ul><li>默认没有此进程,配置文件 postgresql.conf<ol><li>设置参数logging_collect设置为“on”时，主进程才会启动SysLogger辅助进程</li><li>它从Postmaster主进程、所有的服务进程以及其他辅助进程收集所有的stderr输出，并将这些输出写入到日志文件中</li></ol></li><li>startup 启动进程<br> 用于数据库恢复的进程</li><li>Session 会话进程<ol><li>每一个用户发起连接后，一旦验证成功,postmaster进程就会fork—个新的子进程负责连接此用户。</li><li>通常表现为进程形式： postgres postgres [local] idle</li></ol></li></ul><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p><strong>PostgreSQL的内存空间包括共享内存和本地内存两部分</strong></p><ul><li>共享内存<ol><li>PostgreSQL启动后，会生成一块共享内存，共享内存主要用做数据块的缓冲区，以便提高读写性能。WAL日志缓冲区和CLOG(Commit log)缓冲区也存在于共享内存中。除此以外，一些全局信息也保存在共享内存中，如进程信息、锁的信息、全局统计信息等。</li><li>PostgreSQL 9.3之前的版本与Oracle数据库一样，都是使用“SystemV”类型的共享内存，但到</li><li>PostgreSQL9.3之后，PostgreSQL使用mmap()方式共享内存,好处能使用较大的共享内 存。<br> 可以通过配置postgresql.conf文件中shared_buffers 指定，默认128M，建议是内存的50%</li></ol></li></ul><p><img src="linux7_3.jpg" alt="linux7_3"></p><p>本地内存<br> 后台服务进程除访问共享内存外，还会申请分配一些本地内存，以便暂存一些不需要全局存储的数<br> 据。都可以通过在配置postgresql.conf文件中指定这些内存缓冲区主要有以下几类：</p><ol><li>temp_buffers :用于访问临时表的本地缓冲区，默认为8M</li><li>work_mem:内部排序操作和Hash表在使用临时磁盘文件之前使用的内存缓冲区,默认为4M</li><li>maintenance_work_mem:在维护性操作(比如 VACUUM、CREATE INDEX和ALTERTABLE<br> ADDFOREIGN KEY 等）中使用的内存缓冲区，默认为64M</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">postgres=<span class="hljs-comment"># show shared_buffers;</span><br> shared_buffers<br>----------------<br> 128MB<br>(1 row)<br>postgres=<span class="hljs-comment"># show maintenance_work_mem;</span><br> maintenance_work_mem<br>----------------------<br> 64MB<br>(1 row)<br>postgres=<span class="hljs-comment"># show work_mem;</span><br> work_mem<br>----------<br> 4MB<br>(1 row)<br></code></pre></td></tr></table></figure><h2 id="数据更新过程"><a href="#数据更新过程" class="headerlink" title="数据更新过程"></a>数据更新过程</h2><p><img src="linux7_4.jpg" alt="linux7_4"></p><ol><li>先将数据库文件中的更改的数据加载至内存</li><li>在内存更新数据</li><li>将日志写入内存WAL的缓存区</li><li>将日志提交，将日志写入操作系统 cache</li><li>同步日志到磁盘</li><li>后台写数据库的更新后的数据到操作系统 cache</li><li>写完数据后，更新检查点checkpoint</li><li>同步数据到磁盘</li></ol><h1 id="基于流复制完成postgresql的高可用"><a href="#基于流复制完成postgresql的高可用" class="headerlink" title="基于流复制完成postgresql的高可用"></a>基于流复制完成postgresql的高可用</h1><p>实验环境<br>192.168.217.135 Master<br>192.168.217.134 Standby</p><h2 id="内核优化"><a href="#内核优化" class="headerlink" title="内核优化"></a>内核优化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@pgsql-master ~]<span class="hljs-comment">#vim /etc/sysctl.conf </span><br>kernel.shmmax = 68719476736  <span class="hljs-comment">#（CentOS6以前版本默认值，CentOS7默认为18446744073692774399）</span><br>kernel.shmall = 4294967296  <span class="hljs-comment">#（CentOS6以前版本默认值，CentOS7默认为18446744073692774399）</span><br>kernel.shmmni = 4096<br>kernel.sem = 50100 64128000 50100 1280<br>fs.file-max = 7672460<br>net.ipv4.ip_local_port_range = 9000 65000<br>net.core.rmem_default = 1048576<br>net.core.rmem_max = 4194304<br>net.core.wmem_default = 262144<br>net.core.wmem_max = 1048576<br>[root@pgsql-master ~]<span class="hljs-comment">#vi /etc/security/limits.conf</span><br>* - nofile 100000<br>* - <span class="hljs-built_in">nproc</span> 100000<br>* - memlock 60000<br></code></pre></td></tr></table></figure><h2 id="打开远程连接"><a href="#打开远程连接" class="headerlink" title="打开远程连接"></a>打开远程连接</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@rocky8 ~]<span class="hljs-comment">#vim /pgsql/data/postgresql.conf</span><br>listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment">#修改此行中的localhost为 *</span><br><span class="hljs-comment">#listen_addresses = &#x27;0.0.0.0&#x27; #或者修改为 0.0.0.0</span><br>[root@rocky8 ~]<span class="hljs-comment">#vim /pgsql/data/pg_hba.conf</span><br>host   all             all             ::1/128                 trust<br><span class="hljs-comment">#上面行的后面加一行</span><br>host   all             all             0.0.0.0/0               md5<br></code></pre></td></tr></table></figure><h2 id="主节点配置"><a href="#主节点配置" class="headerlink" title="主节点配置"></a>主节点配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs bash">[postgres@pgsql-master root]<span class="hljs-variable">$vi</span> /pgsql/data/pg_hba.conf <br>host    replication     repluser        0.0.0.0/0               md5<br><br>[postgres@pgsql-master root]<span class="hljs-variable">$vi</span> /pgsql/data/postgresql.conf<br>synchronous_standby_names = <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment">#开启此项,表示同步方式,需要同时打开synchronous_commit = on,此为默认值,默认是异步方式  </span><br>synchronous_commit = on <span class="hljs-comment">#开启同步模式</span><br>archive_mode = on   <span class="hljs-comment">#建议打开归档模式,防止长时间无法同步,WAL被覆盖造成数据丢失</span><br>archive_command = <span class="hljs-string">&#x27;[ ! -f /archive/%f ] &amp;&amp; cp %p /archive/%f&#x27;</span><br>wa1_level = replica <span class="hljs-comment">#设置wal的级别</span><br>max_wal_senders = 5 <span class="hljs-comment">#这个设置可以最多有几个流复制连接，一般有几个从节点就设置几个</span><br>wal_keep_segments = 128 <span class="hljs-comment">#设置流复制保留的最多的WAL文件数目</span><br>wal_sender_timeout = 60s <span class="hljs-comment">#设置流复制主机发送数据的超时时间</span><br>max_connections = 200 <span class="hljs-comment"># 一般查多于写的应用从库的最大连接数要比较大</span><br>hot_standby = on <span class="hljs-comment">#对主库无影响,用于将来可能会成为从库,这台机器不仅仅是用于数据归档，也用于数据查询,在从库上配置此项后为只读</span><br>max_standby_streaming_delay = 30s <span class="hljs-comment">#数据流备份的最大延迟时间</span><br>wal_receiver_status_interval = 10s <span class="hljs-comment">#多久向主报告一次从的状态，当然从每次数据复制都会向主报告状态，只是设置最长的间隔时间</span><br>hot_standby_feedback = on <span class="hljs-comment">#如果有错误的数据复制，是否向主进行反馈</span><br>wal_log_hints = on     <span class="hljs-comment">#对非关键更新进行整页写入</span><br><br><br>[postgres@pgsql-master root]<span class="hljs-variable">$vi</span> /pgsql/data/postgresql.conf<br>max_connections = 200 <span class="hljs-comment">#原配置为100，修改项</span><br><br><span class="hljs-comment">#添加项</span><br>synchronous_standby_names = <span class="hljs-string">&#x27;*&#x27;</span><br>archive_mode = on<br>archive_command= <span class="hljs-string">&#x27;[ ! -f /archive/%f ] &amp;&amp; cp %p /archive/%f&#x27;</span><br>hot_standby_feedback = on<br>wal_log_hints = on<br></code></pre></td></tr></table></figure><h2 id="从节点配置"><a href="#从节点配置" class="headerlink" title="从节点配置"></a>从节点配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#清空数据和归档</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#mkdir /archive</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#mkdir -p /pgsql/backup</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#rm -rf /pgsql/data/* </span><br><br><span class="hljs-comment">#备份主库数据到备库</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#pg_basebackup -D /pgsql/backup/ -Ft -Pv -Urepluser -h 192.168.217.135 -p 5432 -R</span><br>Password: <br>pg_basebackup: initiating base backup, waiting <span class="hljs-keyword">for</span> checkpoint to complete<br>pg_basebackup: checkpoint completed<br>pg_basebackup: write-ahead <span class="hljs-built_in">log</span> start point: 0/2000028 on timeline 1<br>pg_basebackup: starting background WAL receiver<br>pg_basebackup: created temporary replication slot <span class="hljs-string">&quot;pg_basebackup_21248&quot;</span><br>26354/26354 kB (100%), 1/1 tablespace                                         <br>pg_basebackup: write-ahead <span class="hljs-built_in">log</span> end point: 0/2000138<br>pg_basebackup: waiting <span class="hljs-keyword">for</span> background process to finish streaming ...<br>pg_basebackup: syncing data to disk ...<br>pg_basebackup: renaming backup_manifest.tmp to backup_manifest<br>pg_basebackup: base backup completed<br><br><span class="hljs-comment">#还原备份的数据,实现初始的主从数据同步</span><br>[root@pgsql-slave ~]<span class="hljs-comment"># tar xf /pgsql/backup/base.tar -C /pgsql/data</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#tar xf /pgsql/backup/pg_wal.tar -C /archive/</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#vi /pgsql/data/postgresql.conf</span><br><span class="hljs-comment">#添加下面两行</span><br>primary_conninfo = <span class="hljs-string">&#x27;host=192.168.217.135 port=5432 user=repluser password=123456&#x27;</span><br>restore_command = <span class="hljs-string">&#x27;cp /archive/%f %p&#x27;</span> <span class="hljs-comment">#此项可不配置</span><br><span class="hljs-comment">#修改配置(可选):</span><br>hot_standby = on   <span class="hljs-comment">#开启此项,此是默认项</span><br>recovery_target_timeline = latest <span class="hljs-comment"># 默认</span><br>max_connections = 120 <span class="hljs-comment"># 大于等于主节点，正式环境应当重新考虑此值的大小</span><br>max_standby_streaming_delay = 30s<br>wal_receiver_status_interval = 10<br>shot_standby_feedback = on<br>max_wal_senders = 15<br>logging_co1lector = on<br>log_directory = <span class="hljs-string">&#x27;pg_log&#x27;</span><br>log_filename = <span class="hljs-string">&#x27;postgresql-%Y-%m-%d.log&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="监控同步状态"><a href="#监控同步状态" class="headerlink" title="监控同步状态"></a>监控同步状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#查看主库状态</span><br>[root@pgsql-master ~]<span class="hljs-comment">#pg_controldata</span><br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7184267676821319539<br>Database cluster state:               <span class="hljs-keyword">in</span> production <span class="hljs-comment">#主库状态</span><br><br><span class="hljs-comment">#下面只在主节点查看同步模式,注意:如果无从节点连接,将无任何显示信息</span><br>[postgres@pgsql-master root]<span class="hljs-variable">$psql</span> <br>psql (14.2)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> <span class="hljs-built_in">help</span>.<br><br>postgres=<span class="hljs-comment"># select pid,state,client_addr,sync_priority,sync_state from  pg_stat_replication;</span><br>  pid  |   state   |   client_addr   | sync_priority | sync_state <br>-------+-----------+-----------------+---------------+------------<br> 21746 | streaming | 192.168.217.134 |             1 | <span class="hljs-built_in">sync</span><br><span class="hljs-comment">#下面只在主节点查看同步模式,注意:如果无从节点连接,将无任何显示信息</span><br>postgres=<span class="hljs-comment"># SELECT pg_current_wal_insert_lsn(),* from pg_stat_replication;</span><br>-[ RECORD 1 ]-------------+------------------------------<br>pg_current_wal_insert_lsn | 0/5000148<br>pid                       | 21746<br>usesysid                  | 16384<br>usename                   | repluser<br>application_name          | walreceiver<br>client_addr               | 192.168.217.134<br>client_hostname           | <br>client_port               | 16182<br>backend_start             | 2023-08-31 10:11:35.266737+08<br>backend_xmin              | <br>state                     | streaming<br>sent_lsn                  | 0/5000148<br>write_lsn                 | 0/5000148  <span class="hljs-comment">#同步的lsn号,和上面一致,说明同步,有差表示有同步延迟</span><br>flush_lsn                 | 0/5000148<br>replay_lsn                | 0/5000148<br>write_lag                 | <br>flush_lag                 | <br>replay_lag                | <br>sync_priority             | 1<br>sync_state                | <span class="hljs-built_in">sync</span>  <span class="hljs-comment">#async是异步,同步显示为sync</span><br>reply_time                | 2023-08-31 10:11:35.944498+08<br></code></pre></td></tr></table></figure><h1 id="实现postgresql的时间点还原"><a href="#实现postgresql的时间点还原" class="headerlink" title="实现postgresql的时间点还原"></a>实现postgresql的时间点还原</h1><p><strong>场景说明</strong><br>每天3:00备份,第二天12:00误删除数据库,如何恢复?<br><strong>故障恢复过程</strong><br>备份数据和归档<br>数据还原</p><ul><li>还原完全备份</li><li>归档日志恢复:<ol><li>备份中的归档</li><li>恢复3:00到12:00之间的归档</li><li>恢复在线redo</li></ol></li></ul><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1)在PGSQL服务器开启归档<br>[postgres@pgsql-master root]<span class="hljs-variable">$vim</span> /pgsql/data/postgresql.conf<br>archive_mode = on<br>archive_command= <span class="hljs-string">&#x27;[ ! -f /archive/%f ] &amp;&amp; cp %p /archive/%f&#x27;</span><br>[postgres@pgsql-master root]<span class="hljs-variable">$pg_ctl</span> restart -D <span class="hljs-variable">$PGDATA</span>  <span class="hljs-comment">#重启pgsql</span><br><br>(2)在PGSQL服务器上创建测试数据<br>postgres=<span class="hljs-comment"># create database testdb;</span><br>CREATE DATABASE<br>postgres=<span class="hljs-comment"># \c testdb;</span><br>You are now connected to database <span class="hljs-string">&quot;testdb&quot;</span> as user <span class="hljs-string">&quot;postgres&quot;</span>.<br>testdb=<span class="hljs-comment"># create table t1(id int);</span><br>CREATE TABLE<br>testdb=<span class="hljs-comment"># insert into t1 values (1);</span><br>INSERT 0 1<br><br>(3)在备份服务器对PG数据库进行远程完全备份<br>[root@pgsql-slave ~]<span class="hljs-comment">#vim /pgsql/data/postgresql.conf </span><br>archive_mode = on<br>archive_command= <span class="hljs-string">&#x27;[ ! -f /archive/%f ] &amp;&amp; cp %p /archive/%f&#x27;</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#chown postgres. /pgsql/backup/</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#chown postgres. /archive</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#pg_basebackup -D /pgsql/backup/ -Ft -Pv -Urepluser -h 192.168.217.135 -p 5432 -R</span><br><br>(4)在PG服务器上继续生成测试数据<br>testdb=<span class="hljs-comment"># insert into t1 values (2);</span><br>INSERT 0 1<br>testdb=<span class="hljs-comment"># insert into t1 values (3);</span><br><br>(5)在PG服务器上模拟数据库删除<br>postgres=<span class="hljs-comment"># drop database testdb;</span><br>DROP DATABASE<br><br>(6)发现故障，停止用户访问<br><span class="hljs-comment">#查看当前日志文件</span><br>postgres=<span class="hljs-comment">#  select pg_walfile_name(pg_current_wal_lsn());</span><br>     pg_walfile_name      <br>--------------------------<br> 00000001000000000000000E<br><br><br><span class="hljs-comment">#查看当前事务ID</span><br>postgres=<span class="hljs-comment"># select txid_current();</span><br> txid_current <br>--------------<br>          762<br><br></code></pre></td></tr></table></figure><h2 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1)在PG服务器上切换归档日志<br>postgres=<span class="hljs-comment"># select pg_switch_wal();</span><br> pg_switch_wal <br>---------------<br> 0/E000EC8<br><br>(2)在备份服务器上还原，先停止服务，再清理数据<br>[postgres@pgsql-slave root]<span class="hljs-variable">$pg_ctl</span> stop<br>[root@pgsql-slave ~]<span class="hljs-comment">#rm -rf /pgsql/data/*</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#rm -rf /archive/*</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#tar xf /pgsql/backup/base.tar -C /pgsql/data</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#rsync -a 192.168.217.135:/archive/ /archive/</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#ls /archive/</span><br>00000001000000000000000C  00000001000000000000000D  00000001000000000000000D.00000028.backup  00000001000000000000000E<br><br>(3)查看故障点事务ID<br>[root@pgsql-slave ~]<span class="hljs-comment">#pg_waldump /archive/00000001000000000000000E | grep Database</span><br>rmgr: Database    len (rec/tot):     38/    38, tx:        761, lsn: 0/0E000DA8, prev 0/0E000D30, desc: DROP <span class="hljs-built_in">dir</span> 1663/24586<br><span class="hljs-comment">#可以确认删库的事务id是761，所有恢复到760即可（恢复到760事务的时间点也可以）</span><br><br>(4)修改备份服务器配置文件postgresql.conf<br>[root@pgsql-slave ~]<span class="hljs-comment">#vim /pgsql/data/postgresql.conf </span><br>restore_command = <span class="hljs-string">&#x27;cp /archive/%f %p&#x27;</span><br>recovery_target_xid = <span class="hljs-string">&#x27;760&#x27;</span><br><span class="hljs-comment">#也可以通过下面方式指定还原至的位置</span><br>recovery_target_time = <span class="hljs-string">&#x27;2023-01-06 11:39:07&#x27;</span><br>recovery_target_lsn = <span class="hljs-string">&#x27;0/04000290&#x27;</span><br><br>(5)还原后查看数据<br>postgres=<span class="hljs-comment"># \l</span><br>                                  List of databases<br>   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   <br>-----------+----------+----------+-------------+-------------+-----------------------<br> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +<br>           |          |          |             |             | postgres=CTc/postgres<br> testdb    | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | <br>(4 rows)<br><br>postgres=<span class="hljs-comment"># \c testdb ;</span><br>You are now connected to database <span class="hljs-string">&quot;testdb&quot;</span> as user <span class="hljs-string">&quot;postgres&quot;</span>.<br>testdb=<span class="hljs-comment"># select * from t1 ;</span><br> <span class="hljs-built_in">id</span> <br>----<br>  1<br>  2<br>  3<br>(3 rows)<br><br><span class="hljs-comment">#当前无法写入</span><br>testdb=<span class="hljs-comment"># insert into t1 values (4);</span><br>ERROR:  cannot execute INSERT <span class="hljs-keyword">in</span> a read-only transaction<br><span class="hljs-comment">#查看此时的状态</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#pg_controldata </span><br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7184267676821319539<br>Database cluster state:               <span class="hljs-keyword">in</span> archive recovery <span class="hljs-comment">#此时状态不是production</span><br><br>(6)执行此命令可让备份服务器恢复到写状态<br>postgres=<span class="hljs-comment"># select pg_wal_replay_resume();</span><br> pg_wal_replay_resume <br>----------------------<br><span class="hljs-comment">#查看此时的状态</span><br>[root@pgsql-slave ~]<span class="hljs-comment">#pg_controldata </span><br>pg_control version number:            1300<br>Catalog version number:               202107181<br>Database system identifier:           7184267676821319539<br>Database cluster state:               <span class="hljs-keyword">in</span> production<br></code></pre></td></tr></table></figure><h1 id="规划高可用的LAMP"><a href="#规划高可用的LAMP" class="headerlink" title="规划高可用的LAMP"></a>规划高可用的LAMP</h1><p>实验环境<br> 共设5台主机<br> 两台是web服务器，分别是：<br> LAP1              192.168.217.135<br> LAP2              192.168.217.134<br> 一台是数据库服务器<br> mysql            192.168.217.133<br> 两台是NFS服务器，分别是<br> NFS1（主服务器）    192.168.217.132<br> NFS2（备份服务器）  192.168.217.131</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><h3 id="web服务器配置"><a href="#web服务器配置" class="headerlink" title="web服务器配置"></a>web服务器配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1)在LAP1和2机器上准备相关包和文件<br>[root@LAP1/2 ~]<span class="hljs-comment">#yum -y install httpd php php-mysqlnd php-json</span><br>[root@LAP1/2 ~]<span class="hljs-comment">#systemctl enable --now httpd</span><br>[root@LAP1/2 ~]<span class="hljs-comment">#wget https://cn.wordpress.org/latest-zh_CN.tar.gz #下载wordpress</span><br>[root@LAP1/2 ~]<span class="hljs-comment">#tar xvf latest-zh_CN.tar.gz </span><br>[root@LAP1/2 ~]<span class="hljs-comment">#mv wordpress/* /var/www/html/</span><br>[root@LAP1/2 ~]<span class="hljs-comment">#chown apache.apache /var/www/html -R  #将移来的wordpress文件权限授予apache</span><br><br>(2)实现LAP1和2机器上的文件远程挂载<br>[root@LAP1/2 ~]<span class="hljs-comment">#showmount -e 192.168.217.132</span><br>Export list <span class="hljs-keyword">for</span> 192.168.217.132:<br>/data/www *<br><span class="hljs-comment">#查看是否可以看到192.168.217.132的共享</span><br>[root@LAP1/2 ~]<span class="hljs-comment">#cd /var/www/html/wp-content</span><br>[root@LAP1/2 wp-content]<span class="hljs-comment">#mkdir uploads #创建共享文件夹</span><br>[root@LAP1/2 wp-content]<span class="hljs-comment">#chown apache.apache uploads  #更改所属用户和组</span><br>[root@LAP1/2~]<span class="hljs-comment">#vim /etc/fstab</span><br>192.168.217.132:/data/www    /var/www/html/wp-content/uploads   nfs   _netdev  0 0<br><span class="hljs-comment">#挂载文件                                挂载目录                                           协议  没有网络不挂载</span><br>[root@LAP1/2 ~]<span class="hljs-comment">#mount -a  #将/etc/fstab的所有内容重新加载</span><br></code></pre></td></tr></table></figure><h3 id="mysql服务器配置"><a href="#mysql服务器配置" class="headerlink" title="mysql服务器配置"></a>mysql服务器配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@mysql ~]<span class="hljs-comment">#yum -y install mysql-server</span><br>[root@mysql ~]<span class="hljs-comment">#systemctl enable --now mysqld</span><br>[root@mysql ~]<span class="hljs-comment">#mysql</span><br>mysql&gt; create user wordpress@<span class="hljs-string">&#x27;192.168.217.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; create database wordpress;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; grant all on wordpress.* to wordpress@<span class="hljs-string">&#x27;192.168.217.%&#x27;</span>;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="NFS服务器配置"><a href="#NFS服务器配置" class="headerlink" title="NFS服务器配置"></a>NFS服务器配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs bash">(1)NFS1基于存储wordpress图片设置<br>[root@nfs1 ~]<span class="hljs-comment">#yum -y install nfs-utils </span><br>[root@nfs1 ~]<span class="hljs-comment">#mkdir -p /data/www  #此文件夹是存放共享图片的</span><br>[root@nfs1 ~]<span class="hljs-comment">#useradd -u 666 www #创建id号为666的用户www，此账号用于后面的压榨账号</span><br>[root@nfs1 ~]<span class="hljs-comment">#vim /etc/exports</span><br>/data/www  *(rw,all_squash,anonuid=666,anonuid=666)<br><span class="hljs-comment">#  共享地址    读写权限，压榨所有用户，指定压榨后映射的用户uid为666的用户</span><br>[root@nfs1 ~]<span class="hljs-comment">#chown www.www /data/www  #将文件给与www用户权限</span><br>[root@nfs1 ~]<span class="hljs-comment">#systemctl enable --now  nfs-server</span><br><br>(2)基于主NFS1服务器和备份NFS2服务器进行配置<br><span class="hljs-comment">#rsync 常用于做为 linux系统下的数据镜像备份工具，实现远程同步，支持本地复制，或者与其他SSH、rsync主机同步数据，支持增量备份，配合任务计划，rsync能实现定时或间隔同步，配合inotify或sersync，可以实现触发式的实时数据同步</span><br>[root@nfs2 ~]<span class="hljs-comment">#yum -y install rsync       #用于在备份NFS服务器上开启远程监听端口873（centos8安装rsync-daemon）</span><br>[root@nfs2 ~]<span class="hljs-comment">#systemctl enable --now  rsyncd.service</span><br>[root@nfs2 ~]<span class="hljs-comment">#ss -ntl                   #查看873端口已开启</span><br>State       Recv-Q Send-Q    Local Address:Port         Peer Address:Port                <br>LISTEN      0      5                     *:873          *:*<br> [root@nfs2 ~]<span class="hljs-comment">#vim /etc/rsyncd.conf</span><br>uid = root       <span class="hljs-comment">#提定以哪个用户来访问共享目录，将之指定为生成的文件所有者，默认为nobody</span><br>gid = root       <span class="hljs-comment">#默认为nobody,Ubuntu中为nogroup</span><br>max connections = 0<br>ignore errors<br>exclude = lost+found/<br><span class="hljs-built_in">log</span> file = /var/log/rsyncd.log<br>pid file = /var/run/rsyncd.pid<br>lock file = /var/run/rsyncd.lock<br>reverse lookup = no<br><br>[backup]                  <span class="hljs-comment">#每个模块名对应一个不同的path目录，如果同名后面模块生效</span><br>path = /data/backup/      <span class="hljs-comment">#备份服务器共享的文件夹</span><br>comment = backup <span class="hljs-built_in">dir</span><br><span class="hljs-built_in">read</span> only = no           <span class="hljs-comment">#默认是yes,即只读</span><br>auth <span class="hljs-built_in">users</span> = rsyncuser   <span class="hljs-comment">#默认anonymous可以访问rsync服务器，指定访问账号rsyncuser</span><br>secrets file = /etc/rsync.pas  <span class="hljs-comment">#账号密码存放路径</span><br>:wq<br>[root@nfs2 ~]<span class="hljs-comment">#mkdir -p /data/backup    #创建共享文件夹 </span><br>[root@nfs2 ~]<span class="hljs-comment">#echo &quot;rsyncuser:123456&quot; &gt; /etc/rsync.pas #备份服务器端生成验证文件</span><br>[root@nfs2 ~]<span class="hljs-comment">#chmod 600 /etc/rsync.pas      #指定只允许root用户读写</span><br><br>(3)nfs1主服务器基于rsync daemon实现 sersync<br><span class="hljs-comment">#在数据服务器上下载sersync，并拷贝至相应的目录，设置PATH变量 </span><br>[root@nfs1 ~]<span class="hljs-comment">#wget https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/sersync/sersync2.5.4_64bit_binary_stable_final.tar.gz</span><br>[root@nfs1 ~]<span class="hljs-comment">#tar xvf sersync2.5.4_64bit_binary_stable_final.tar.gz </span><br>GNU-Linux-x86/<br>GNU-Linux-x86/sersync2<br>GNU-Linux-x86/confxml.xml<br>[root@nfs1 ~]<span class="hljs-comment">#cp -a GNU-Linux-x86/ /usr/local/sersync[root@nfs1 ~]#echo &#x27;PATH=/usr/local/sersync:$PATH&#x27; &gt; /etc/profile.d/sersync.sh</span><br>[root@nfs1 ~]<span class="hljs-comment">#source /etc/profile.d/sersync.sh </span><br><span class="hljs-comment">#备份sersync配置文件 </span><br>[root@nfs1 ~]<span class="hljs-comment">#cp /usr/local/sersync/confxml.xml&#123;,.bak&#125;</span><br><span class="hljs-comment">#sersync目录只有两个文件：一个是二进制程序文件，一个是xml格式的配置文件 </span><br>[root@nfs1 ~]<span class="hljs-comment">#vim /usr/local/sersync/confxml.xml</span><br><span class="hljs-comment">#修改sersync配置文件 </span><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt; <br>&lt;<span class="hljs-built_in">head</span> version=<span class="hljs-string">&quot;2.5&quot;</span>&gt; <br>&lt;host hostip=<span class="hljs-string">&quot;localhost&quot;</span> port=<span class="hljs-string">&quot;8008&quot;</span>&gt;&lt;/host&gt; <br>&lt;debug start=<span class="hljs-string">&quot;false&quot;</span>/&gt; <span class="hljs-comment"># 是否开启调试模式 </span><br>&lt;fileSystem xfs=<span class="hljs-string">&quot;false&quot;</span>/&gt; <br>&lt;filter start=<span class="hljs-string">&quot;false&quot;</span>&gt; <span class="hljs-comment">#不开启文件过滤功能，当为true时,以下类型的文件将不同 </span><br>步 <br>&lt;exclude expression=<span class="hljs-string">&quot;(.*)\.svn&quot;</span>&gt;&lt;/exclude&gt; <br>&lt;exclude expression=<span class="hljs-string">&quot;(.*)\.gz&quot;</span>&gt;&lt;/exclude&gt; <br>&lt;exclude expression=<span class="hljs-string">&quot;^info/*&quot;</span>&gt;&lt;/exclude&gt; <br>&lt;exclude expression=<span class="hljs-string">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt; <br>&lt;/filter&gt; <br>&lt;inotify&gt; <span class="hljs-comment"># 监控事件，默认监控 </span><br>delete/close_write/moved_from/moved_to/create folder <br>&lt;delete start=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>&lt;createFolder start=<span class="hljs-string">&quot;true&quot;</span>/&gt; <br>&lt;createFile start=<span class="hljs-string">&quot;false&quot;</span>/&gt; <br>&lt;closeWrite start=<span class="hljs-string">&quot;true&quot;</span>/&gt; <br>&lt;moveFrom start=<span class="hljs-string">&quot;true&quot;</span>/&gt; <br>&lt;moveTo start=<span class="hljs-string">&quot;true&quot;</span>/&gt; <br>&lt;attrib start=<span class="hljs-string">&quot;true&quot;</span>/&gt; <span class="hljs-comment">#修改此行为true，文件属性变化后也会同步 </span><br>&lt;modify start=<span class="hljs-string">&quot;false&quot;</span>/&gt; <br>&lt;/inotify&gt; <br>&lt;sersync&gt; <span class="hljs-comment"># rsync命令的配置段 </span><br>&lt;localpath watch=<span class="hljs-string">&quot;/data/www&quot;</span>&gt; <span class="hljs-comment">#修改此行,需要同步的源目录或文件，建议同步目 </span><br>录 <br>&lt;remote ip=<span class="hljs-string">&quot;备份服务器IP&quot;</span> name=<span class="hljs-string">&quot;backup&quot;</span>/&gt; <span class="hljs-comment">#修改此行,指定备份服务器地址和rsync </span><br>daemon的模块名，如果下面开启了ssh start，此时name为远程shell方式运行时的目标目录 <br>&lt;!--&lt;remote ip=<span class="hljs-string">&quot;192.168.8.39&quot;</span> name=<span class="hljs-string">&quot;tongbu&quot;</span>/&gt;--&gt; <br>&lt;!--&lt;remote ip=<span class="hljs-string">&quot;192.168.8.40&quot;</span> name=<span class="hljs-string">&quot;tongbu&quot;</span>/&gt;--&gt; <br>&lt;/localpath&gt; <br>&lt;rsync&gt; <br>&lt;commonParams params=<span class="hljs-string">&quot;-artuz&quot;</span>/&gt; <span class="hljs-comment"># 指定rsync选项 </span><br>&lt;auth start=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-built_in">users</span>=<span class="hljs-string">&quot;rsyncuser&quot;</span> passwordfile=<span class="hljs-string">&quot;/etc/rsync.pas&quot;</span>/&gt; <span class="hljs-comment">#修 </span><br>改此行为<span class="hljs-literal">true</span>,指定备份服务器的rsync配置的用户和密码文件 <br>&lt;userDefinedPort start=<span class="hljs-string">&quot;false&quot;</span> port=<span class="hljs-string">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;<span class="hljs-comment">#指定rsync的非 </span><br>标准端口号<br>&lt;<span class="hljs-built_in">timeout</span> start=<span class="hljs-string">&quot;false&quot;</span> time=<span class="hljs-string">&quot;100&quot;</span>/&gt;&lt;!-- <span class="hljs-built_in">timeout</span>=100 --&gt; <br>&lt;ssh start=<span class="hljs-string">&quot;false&quot;</span>/&gt; <span class="hljs-comment">#默认使用rsync daemon运行rsync命令,true为使用远程shell模 </span><br>式 <br>&lt;/rsync&gt; <br>&lt;failLog path=<span class="hljs-string">&quot;/tmp/rsync_fail_log.sh&quot;</span> timeToExecute=<span class="hljs-string">&quot;60&quot;</span>/&gt;&lt;!--default every <br>60mins execute once--&gt; <span class="hljs-comment">#错误重传及日志文件路径 </span><br>&lt;crontab start=<span class="hljs-string">&quot;false&quot;</span> schedule=<span class="hljs-string">&quot;600&quot;</span>&gt;&lt;!--600mins--&gt; <span class="hljs-comment">#不开启crontab功能 </span><br>&lt;crontabfilter start=<span class="hljs-string">&quot;false&quot;</span>&gt; <span class="hljs-comment">#不开启crontab定时传输的筛选功能 </span><br>&lt;exclude expression=<span class="hljs-string">&quot;*.php&quot;</span>&gt;&lt;/exclude&gt; <br>&lt;exclude expression=<span class="hljs-string">&quot;info/*&quot;</span>&gt;&lt;/exclude&gt; <br>&lt;/crontabfilter&gt; <br>&lt;/crontab&gt; <br>&lt;plugin start=<span class="hljs-string">&quot;false&quot;</span> name=<span class="hljs-string">&quot;command&quot;</span>/&gt; <br>&lt;/sersync&gt; <br><span class="hljs-comment">#####################################以下行不需要修改 </span><br><span class="hljs-comment">#################################### </span><br>&lt;plugin name=<span class="hljs-string">&quot;command&quot;</span>&gt; <br>&lt;param prefix=<span class="hljs-string">&quot;/bin/sh&quot;</span> suffix=<span class="hljs-string">&quot;&quot;</span> ignoreError=<span class="hljs-string">&quot;true&quot;</span>/&gt; &lt;!--prefix <br>/opt/tongbu/mmm.sh suffix--&gt; <br>&lt;filter start=<span class="hljs-string">&quot;false&quot;</span>&gt; <br>&lt;include expression=<span class="hljs-string">&quot;(.*)\.php&quot;</span>/&gt; <br>&lt;include expression=<span class="hljs-string">&quot;(.*)\.sh&quot;</span>/&gt; <br>&lt;/filter&gt; <br>&lt;/plugin&gt; <br>&lt;plugin name=<span class="hljs-string">&quot;socket&quot;</span>&gt; <br>&lt;localpath watch=<span class="hljs-string">&quot;/opt/tongbu&quot;</span>&gt; <br>&lt;deshost ip=<span class="hljs-string">&quot;192.168.138.20&quot;</span> port=<span class="hljs-string">&quot;8009&quot;</span>/&gt; <br>&lt;/localpath&gt; <br>&lt;/plugin&gt; <br>&lt;plugin name=<span class="hljs-string">&quot;refreshCDN&quot;</span>&gt; <br>&lt;localpath watch=<span class="hljs-string">&quot;/data0/htdocs/cms.xoyo.com/site/&quot;</span>&gt; <br>&lt;cdninfo domainname=<span class="hljs-string">&quot;ccms.chinacache.com&quot;</span> port=<span class="hljs-string">&quot;80&quot;</span> username=<span class="hljs-string">&quot;xxxx&quot;</span> <br>passwd=<span class="hljs-string">&quot;xxxx&quot;</span>/&gt; <br>&lt;sendurl base=<span class="hljs-string">&quot;http://pic.xoyo.com/cms&quot;</span>/&gt;<br>&lt;regexurl regex=<span class="hljs-string">&quot;false&quot;</span> match=<span class="hljs-string">&quot;cms.xoyo.com/site([/a-zA-Z0- </span><br><span class="hljs-string">9]*).xoyo.com/images&quot;</span>/&gt; <br>&lt;/localpath&gt; <br>&lt;/plugin&gt; <br>&lt;/head&gt; <br><span class="hljs-comment">#创建连接rsynd服务器的用户密码文件,并必须修改权限</span><br>[root@nfs1 ~]<span class="hljs-comment">#echo &#x27;123456&#x27; &gt; /etc/rsync.pas</span><br>[root@nfs1 ~]<span class="hljs-comment">#chmod 600 /etc/rsync.pas </span><br><span class="hljs-comment">#查看帮助 </span><br>[root@nfs1 ~]<span class="hljs-comment">#sersync2 -h </span><br><span class="hljs-built_in">set</span> the system param<br>execute：<span class="hljs-built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches<br>execute：<span class="hljs-built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events<br>parse the <span class="hljs-built_in">command</span> param<br>_______________________________________________________<br>参数-d:启用守护进程模式<br>参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍<br>c参数-n: 指定开启守护线程的数量，默认为10个<br>参数-o:指定配置文件，默认使用confxml.xml文件<br>参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块<br>参数-m:单独启用其他模块，使用 -m socket 开启socket模块<br>参数-m:单独启用其他模块，使用 -m http 开启http模块<br>不加-m参数，则默认执行同步程序<br><span class="hljs-comment">#以后台方式执行同步 </span><br>[root@nfs1 ~]<span class="hljs-comment">#sersync2 -dro /usr/local/sersync/confxml.xml</span><br><span class="hljs-built_in">set</span> the system param<br>execute：<span class="hljs-built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches<br>execute：<span class="hljs-built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events<br>parse the <span class="hljs-built_in">command</span> param<br>option: -d  run as a daemon<br>option: -r  rsync all the <span class="hljs-built_in">local</span> files to the remote servers before the sersync work<br>option: -o  config xml name：  /usr/local/sersync/confxml.xml<br>daemon thread num: 10<br>parse xml config file<br>host ip : localhost host port: 8008<br>daemon start，sersync run behind the console <br>use rsync password-file :<br>user is rsyncuser<br>passwordfile is     /etc/rsync.pas<br>config xml parse success<br>please <span class="hljs-built_in">set</span> /etc/rsyncd.conf max connections=0 Manually<br>sersync working thread 12  = 1(primary thread) + 1(fail retry thread) + 10(daemon sub threads) <br>Max threads numbers is: 22 = 12(Thread pool nums) + 10(Sub threads)<br>please according your cpu ，use -n param to adjust the cpu rate<br>------------------------------------------<br>rsync the directory recursivly to the remote servers once<br>working please <span class="hljs-built_in">wait</span>...<br>execute <span class="hljs-built_in">command</span>: <span class="hljs-built_in">cd</span> /data/www &amp;&amp; rsync -artuz -R --delete ./ rsyncuser@192.168.217.131::backup --password-file=/etc/rsync.pas &gt;/dev/null 2&gt;&amp;1 <br>run the sersync: <br>watch path is: /data/www<br><br><span class="hljs-comment">#如果同步失败,可以手动执行下面命令,观察过程 </span><br>[root@nfs1 ~]<span class="hljs-comment">#cd /data/www &amp;&amp; rsync -artuz -R --delete ./ rsyncuser@backup-server::backup --password-file=/etc/rsync.pas &gt;/dev/null 2&gt;&amp;1</span><br><br><span class="hljs-comment">#为了实现开机启动此服务，可以将此命令写入/etc/rc.local，实现开机启动</span><br>[root@nfs1 ~]<span class="hljs-comment">#vim /etc/rc.local       </span><br>/opt/GNU-Linux-x86/sersync2 -dro /opt/GNU-Linux-x86/confxml.xml<br>:wq<br>[root@nfs1 ~]<span class="hljs-comment">#chmod +x /etc/rc.local</span><br></code></pre></td></tr></table></figure><h3 id="登录wordpress，并验证数据的存储"><a href="#登录wordpress，并验证数据的存储" class="headerlink" title="登录wordpress，并验证数据的存储"></a>登录wordpress，并验证数据的存储</h3><h4 id="浏览器输入网址：192-168-217-135（可做dns）"><a href="#浏览器输入网址：192-168-217-135（可做dns）" class="headerlink" title="浏览器输入网址：192.168.217.135（可做dns）"></a>浏览器输入网址：192.168.217.135（可做dns）</h4><p><img src="linux7_5.jpg" alt="linux7_5"></p><h4 id="连接数据库，设置账户，登录"><a href="#连接数据库，设置账户，登录" class="headerlink" title="连接数据库，设置账户，登录"></a>连接数据库，设置账户，登录</h4><p><img src="linux7_6.jpg" alt="linux7_6"></p><h4 id="编写文章，并查看文章"><a href="#编写文章，并查看文章" class="headerlink" title="编写文章，并查看文章"></a>编写文章，并查看文章</h4><p><img src="linux7_7.jpg" alt="linux7_7"></p><h4 id="web服务器查看存储位置"><a href="#web服务器查看存储位置" class="headerlink" title="web服务器查看存储位置"></a>web服务器查看存储位置</h4><p><img src="linux7_8.jpg" alt="linux7_8"></p><h4 id="查看NFS1主服务器是否存储"><a href="#查看NFS1主服务器是否存储" class="headerlink" title="查看NFS1主服务器是否存储"></a>查看NFS1主服务器是否存储</h4><p><img src="linux7_9.jpg" alt="linux7_9"></p><h4 id="查看NFS2备份服务器是否共享"><a href="#查看NFS2备份服务器是否共享" class="headerlink" title="查看NFS2备份服务器是否共享"></a>查看NFS2备份服务器是否共享</h4><p><img src="linux7_10.jpg" alt="linux7_10"></p><h1 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h1><ol><li><code>Binary-safe strings</code> , 简单的<code>K-V</code> 结构的存储</li><li><code>Lists</code> , 按插入顺序排序的字符串元素集合。基本上就是链表</li><li><code>Sets</code> ,唯一的，不排序的集合</li><li><code>Sorted sets</code> ,类似于集合，但每个字符串元素都与一个称为score的浮数值相关联,元素总是按分数排序，因此与集合不同，可以检索一系列元素</li><li><code>Hashes</code> , 由与值关联的字段组成的映射。字段和值都是字符串</li><li><code>Bit arrays (or simply bitmaps)</code> , 可以使用特殊命令处理字符串值</li><li><code>HyperLogLogs</code> , 这是一个概率数据结构，用于估计集合的基数</li><li><code>Streams</code> ,仅附加的类似于地图的条目集合，提供抽象日志数据类型</li></ol><h2 id="strings字符串"><a href="#strings字符串" class="headerlink" title="strings字符串"></a>strings字符串</h2><p><code>strings</code>可以用来存储 k-v 结构的数据,做计数器等;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> &lt;key&gt; &lt;value&gt;<br>get &lt;key&gt;<br>incr &lt;key&gt;<br>mget &lt;key&gt; &lt;key...&gt;<br><br></code></pre></td></tr></table></figure><h2 id="lists列表"><a href="#lists列表" class="headerlink" title="lists列表"></a>lists列表</h2><p><code>Lists</code>可以用来实现粉丝列表,评论列表等；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">lpush &lt;key&gt; &lt;value&gt;<br>lpop &lt;key&gt;<br>rpush &lt;key&gt; &lt;value&gt;<br>rpop &lt;key&gt;<br>lrange &lt;key&gt; &lt;start&gt; &lt;end&gt;<br><br><span class="hljs-comment"># lpush 是把元素插入到链表的头部，lpop 是从头部弹出一个元素并删除</span><br><span class="hljs-comment"># rpush 是把元素插入到链表的尾部，rpop 是从尾部弹出一个元素并删除</span><br><br></code></pre></td></tr></table></figure><h2 id="sets集合"><a href="#sets集合" class="headerlink" title="sets集合"></a>sets集合</h2><p><code>Sets</code> ,可以利用其无序,唯一(自动去重)的特性，例如，共同好友(用到了 <code>SINTER</code> 命令)等;</p><p>执行<code>sadd &lt;key&gt; &lt;value&gt;</code> , 成功返回<code>1</code>,数据已存在返回<code>0</code>,数据类型不对返回异常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sadd &lt;key&gt; &lt;member&gt; &lt;member...&gt;<br>scard &lt;key&gt;<br>sdiff &lt;key&gt; &lt;key...&gt;<br>spop &lt;key&gt; [count]<br>smembers &lt;key&gt;<br><br></code></pre></td></tr></table></figure><h2 id="sorted-sets有序集合"><a href="#sorted-sets有序集合" class="headerlink" title="sorted sets有序集合"></a>sorted sets有序集合</h2><p><code>Sorted sets</code>,用来做排名等;</p><p><code>zadd</code> 命令如果已存在会覆盖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">zadd &lt;key&gt; &lt;score&gt; &lt;member&gt;<br>zrange &lt;key&gt; &lt;start&gt; &lt;end&gt;<br>zrem &lt;key&gt; &lt;member&gt;<br><br></code></pre></td></tr></table></figure><h2 id="hashes哈希"><a href="#hashes哈希" class="headerlink" title="hashes哈希"></a>hashes哈希</h2><p><code>Hashes</code> , 用来存储个人信息等; </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hset &lt;key&gt; &lt;field&gt; &lt;value&gt;<br>hget &lt;key&gt; &lt;field&gt;<br>hgetall &lt;key&gt;<br></code></pre></td></tr></table></figure><h1 id="redis-RDB和AOF比较"><a href="#redis-RDB和AOF比较" class="headerlink" title="redis RDB和AOF比较"></a>redis RDB和AOF比较</h1><h2 id="Redis-中数据的持久化"><a href="#Redis-中数据的持久化" class="headerlink" title="Redis 中数据的持久化"></a>Redis 中数据的持久化</h2><p>前言</p><p>我们知道 Redis 是内存数据库，所有操作都在内存上完成。内存的话，服务器断电，内存上面的数据就会丢失了。这个问题显然是需要解决的。</p><p>Redis 中引入了持久化来避免数据的丢失，主要有两种持久化的方式 RDB 持久化和 AOF 持久化。</p><h2 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h2><h3 id="什么是-AOF-持久化"><a href="#什么是-AOF-持久化" class="headerlink" title="什么是 AOF 持久化"></a>什么是 AOF 持久化</h3><p>AOF(Append Only File):通过保存数据库执行的命令来记录数据库的状态。</p><p><img src="linux7_12.jpg" alt="linux7_12"></p><p>AOF日志对数据库命令的保存顺序是，Redis 先执行命令，把数据写入内存，然后才记录日志。</p><h3 id="为什么要后记录日志呢"><a href="#为什么要后记录日志呢" class="headerlink" title="为什么要后记录日志呢"></a>为什么要后记录日志呢</h3><p>后写，能够避免记录到错误的命令。因为是先执行命令，后写入日志，只有命令执行成功了，命令才能被写入到日志中。</p><p>避免阻塞当前的写操作，是在命令执行后才记录日志，所以不会阻塞当前的写操作。</p><h3 id="AOF-的潜在风险"><a href="#AOF-的潜在风险" class="headerlink" title="AOF 的潜在风险"></a>AOF 的潜在风险</h3><p>如果命令执行成功，写入日志的时候宕机了，命令没有写入到日志中，这时候就有丢失数据的风险了，因为这时候没有写入日志，服务断电之后，这部分数据就丢失了。</p><p>这种场景在别的地方也很常见，比如基于 MQ 实现分布式事务，也会出现业务处理成功 + 事务消息发送失败这种场景，RabbitMQ，RocketMQ，Kafka 事务性，消息丢失和消息重复发送的处理策略</p><p>AOF 日志写入也是在主线程进行的，如果磁盘的压力很大，写入速度变慢了，会影响后续的操作。</p><p>这两种情况可以通过调整 AOF 文件的写入磁盘的时机来避免</p><h3 id="AOF-文件的写入和同步"><a href="#AOF-文件的写入和同步" class="headerlink" title="AOF 文件的写入和同步"></a>AOF 文件的写入和同步</h3><p>AOF 文件持久化的功能分成三个步骤，文件追加(append),文件写入，文件同步(sync)。</p><p>AOF 文件在写入磁盘之前是先写入到 aof_buf 缓冲区中，然后通过调用 flushAppendOnlyFile 将缓冲区中的内容保存到 AOF 文件中。</p><p>写入的策略通过 appendfsync 来进行配置</p><ul><li>Always：同步写回 每次操作命令执行完后，同步将 AOF 日志数据写回硬盘；</li><li>Everysec：每秒写回 每次操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后每隔一秒将缓冲区里的内容写回到硬盘；</li><li>No：操作系统控制的写回 Redis 不在控制命令的写会时机，交由系统控制。每次操作命令执行完成之后，命令会被放入到 AOF 文件的内核缓冲区，之后什么时候写入到磁盘，交由系统控制。</li></ul><h3 id="AOF-文件重写机制"><a href="#AOF-文件重写机制" class="headerlink" title="AOF 文件重写机制"></a>AOF 文件重写机制</h3><p>因为每次执行的命令都会被写入到 AOF 文件中，随着系统的运行，越来越多的文件会被写入到 AOF 文件中，这样 AOF 文件势必会变得很大，这种情况该如何去处理呢？</p><p>为了解决这种情况，Redis 中引入了重写的机制</p><p>什么是重写呢？</p><p>因为 AOF 文件中记录的是每个命令的操作记录，举个，比如当一个键值对被多条写命令反复修改时，AOF文件会记录相应的多条命令，那么重写机制，就是根据这个键值对当前的最新状态，为它生成对应的写入命令，保存成一行操作命令。这样就精简了 AOF 文件的大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">192.168.56.118:6379&gt; <span class="hljs-built_in">set</span> name <span class="hljs-string">&quot;xiaoming&quot;</span><br>OK<br>192.168.56.118:6379&gt; get name<br><span class="hljs-string">&quot;xiaoming&quot;</span><br>192.168.56.118:6379&gt; <span class="hljs-built_in">set</span> name <span class="hljs-string">&quot;xiaozhang&quot;</span><br>OK<br>192.168.56.118:6379&gt; <span class="hljs-built_in">set</span> name <span class="hljs-string">&quot;xiaoli&quot;</span><br>OK<br><br><span class="hljs-comment"># 重写后就是</span><br>192.168.56.118:6379&gt; <span class="hljs-built_in">set</span> name <span class="hljs-string">&quot;xiaoli&quot;</span><br></code></pre></td></tr></table></figure><p>简单来讲就是多变一，就是把 AOF 中日志根据当前键值的状态，合并成一条操作命令。</p><p>重写之后的文件会保存到新的 AOF 文件中，这是旧的 AOF 文件和新的 AOF 文件中键值对应的状态是一样的。然后新的 AOF 文件会替换掉旧的 AOF 文件，这样 重写操作一直在进行，AOF 文件就不至于变得过大。</p><p>重写是后台进行的， AOF 重写会放到子进程中进行的，使用子进程的优点：</p><p>1、子进程处理 AOF 期间，不会影响 Redis 主线程对数据的处理；</p><p>2、子进程拥有所在线程的数据副本，子进程能够避免锁的使用，保证数据的安全。</p><p>这里来看下，AOF 的处理流程</p><p><img src="linux7_13.jpg" alt="linux7_13"></p><p>AOF 重写也有一个缓冲区，当服务节接收到新的命令的时候，如果在正在进行 AOF 重写，命令同样也会被发送到 AOF 缓冲区的进程执行 AOF 重写的过程,服务端进程主要处理以下内容</p><p>1、接收并处理客户端发送的命令；</p><p>2、将执行后的命令写入到 AOF 缓冲区；</p><p>3、将执行后的命令也写入到 AOF 重写缓冲区；</p><p>AOF 缓冲区和 AOF 重写缓冲区中的内容会被定期的同步到 AOF 文件和 AOF 重写文件中</p><p>当子进程完成重写的时候，会给父进程发送一个信号，这时候父进程主要主要进行下面的两步操作：</p><p>1、将 AOF 重写缓冲区中的内容全部写入到 AOF 重写文件中，这时候重写 AOF 文件保存的数据状态是和服务端数据库的状态一致的；</p><p>2、将 AOF 重写文件替换旧的 AOF 文件；</p><p>通过 AOF 的重写操作，新的 AOF 文件不断的替换旧的 AOF 文件，这样就能控制 AOF 文件的大小</p><h3 id="AOF的数据还原"><a href="#AOF的数据还原" class="headerlink" title="AOF的数据还原"></a>AOF的数据还原</h3><p>AOF 文件包了重建数据库索引锁需要的全部命令，所以只需要读入并重新执行一遍 AOF 文件中保存的命令，即可还原服务关闭之前数据库的状态。</p><h2 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h2><h3 id="什么是-RDB-持久化"><a href="#什么是-RDB-持久化" class="headerlink" title="什么是 RDB 持久化"></a>什么是 RDB 持久化</h3><p>RDB(Redis database)：实现方式是将存在 Redis 内存中的数据写入到 RDB 文件中保存到磁盘上从而实现持久化的。</p><p>和 AOF 不同的是 RDB 保存的是数据而不是操作，在进行数据恢复的时候，直接把 RDB 的文件读入到内存，即可完成数据恢复。</p><p><img src="linux7_14.jpg" alt="linux7_14"></p><h3 id="RDB-如何做内存快照"><a href="#RDB-如何做内存快照" class="headerlink" title="RDB 如何做内存快照"></a>RDB 如何做内存快照</h3><p>Redis 中对于如何备份数据到 RDB 文件中，提供了两种方式</p><ul><li>save: 在主线程中执行，不过这种会阻塞 Redis 服务进程；</li><li>bgsave: 主线程会 fork 出一个子进程来负责处理 RDB 文件的创建，不会阻塞主线程的命令操作，这也是 Redis 中 RDB 文件生成的默认配置；</li></ul><p>对于 save 和 bgsave 这两种快照方式，服务端是禁止这两种方式同时执行的，防止产生竞争条件。</p><p>Redis 中可以使用 save 选项，来配置服务端执行 BGSAVE 命令的间隔时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#</span><br><span class="hljs-comment"># Save the DB on disk:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Will save the DB if both the given number of seconds and the given</span><br><span class="hljs-comment">#   number of write operations against the DB occurred.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   In the example below the behaviour will be to save:</span><br><span class="hljs-comment">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="hljs-comment">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="hljs-comment">#   after 60 sec if at least 10000 keys changed</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   It is also possible to remove all the previously configured save</span><br><span class="hljs-comment">#   points by adding a save directive with a single empty string argument</span><br><span class="hljs-comment">#   like in the following example:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#   save &quot;&quot;</span><br><br>save 900 1<br>save 300 10<br>save 60 10000<br></code></pre></td></tr></table></figure><p>save 900 1 就是服务端在900秒，读数据进行了至少1次修改，就会触发一次 BGSAVE 命令</p><p>save 300 10 就是服务端在300秒，读数据进行了至少10次修改，就会触发一次 BGSAVE 命令</p><h3 id="快照时发生数据修改"><a href="#快照时发生数据修改" class="headerlink" title="快照时发生数据修改"></a>快照时发生数据修改</h3><p>举个栗子：我们在t时刻开始对内存数据内进行快照，假定目前有 2GB 的数据需要同步，磁盘写入的速度是 0.1GB/s 那么，快照的时间就是 20s，那就是在 t+20s 完成快照。</p><p>如果在 t+6s 的时候修改一个还没有写入磁盘的内存数据 test 为 test-hello。那么就会破坏快照的完整性了，因为 t 时刻备份的数据已经被修改了。当然是希望在备份期间数据不能被修改。</p><p>如果不能被修改，就意味这在快照期间不能对数据进行修改操作，就如上面的栗子，快照需要进行20s,期间不允许处理数据更新操作，这显然也是不合理的。</p><p>这里需要聊一下 bgsave 是可以避免阻塞，不过需要注意的是避免阻塞和正常读写操作是有区别的。避免阻塞主线程确实没有阻塞可以处理读操作，但是为了保护快照的完整性，是不能修改快照期间的数据的。</p><p>这里就需要引入一种新的处理方案，写时复制技术（Copy-On-Write, COW），在执行快照的同时，正常处理写操作。</p><p>bgsave 子进程是由主线程 fork 生成的，所以是可以共享主线程的内存的，bgsave子进程运行后会读取主线程中的内存数据，并且写入到 RDB 文件中。</p><p>写复制技术就是，如果主线程在内存快照期间修改了一块内存，那么这块内存会被复制一份，生成该数据的副本，然后 bgsave 子进程在把这段内存写入到 RDB 文件中。这样就可以在快照期间进行数据的修改了。</p><p><img src="linux7_15.jpg" alt="linux7_15"></p><h3 id="多久做一次快照"><a href="#多久做一次快照" class="headerlink" title="多久做一次快照"></a>多久做一次快照</h3><p>对于快照，如果做的太频繁，可能会出现前一次快照还没有处理完成，后面的快照数据马上就进来了，同时过于频繁的快照也会增加磁盘的压力。</p><p>如果间隔时间过久，服务器在两次快照期间宕机，丢失的数据大小会随着快照间隔时间的增长而增加。</p><p>是否可以选择增量式快照呢？选择增量式快照，我们就需要记住每个键值对的状态，如果键值对很多，同样也会引入很多内存空间，这对于内存资源宝贵的Redis来说，有些得不偿失。</p><p>相较于 AOF 来对比，RDB 是会在数据恢复时，速度更快。但是 RDB 的内存快照同步频率不太好控制，过多过少都有问题。</p><p>Redis 4.0中提出了一个混合使用 AOF 日志和内存快照的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用AOF日志记录这期间的所有命令操作。</p><p>通过混合使用AOF日志和内存快照的方法，RDB 快照的频率不需要过于频繁，在两次 RDB 快照期间，使用 AOF 日志来记录，这样也不用考虑 AOF 的文件过大问题，在下一次 RDB 快照开始的时候就可以删除 AOF 文件了。</p><p><img src="linux7_16.jpg" alt="linux7_16"></p><h2 id="过期的键如何持久化"><a href="#过期的键如何持久化" class="headerlink" title="过期的键如何持久化"></a>过期的键如何持久化</h2><p>在生成 RDB 文件的过程中，如果一个键已经过期，那么其不会被保存到 RDB 文件中。在载入 RDB 的时候，要分两种情况：</p><ul><li>如果 Redis 以主服务器的模式运行，那么会对 RDB 中的键进行时间检查，过期的键不会被恢复到 Redis 中。</li><li>如果 Redis 以从服务器的模式运行，那么 RDB 中所有的键都会被载入，忽略时间检查。在从服务器与主服务器进行数据同步的时候，从服务器的数据会先被清空，所以载入过期键不会有问题。</li></ul><p>对于 AOF 来说，如果一个键过期了，那么不会立刻对 AOF 文件造成影响。因为 Redis 使用的是惰性删除和定期删除，只有这个键被删除了，才会往 AOF 文件中追加一条 DEL 命令。在重写 AOF 的过程中，程序会检查数据库中的键，已经过期的键不会被保存到 AOF 文件中。</p><p>在运行过程中，对于主从复制的 Redis，主服务器和从服务器对于过期键的处理也不相同：</p><ul><li>对于主服务器，一个过期的键被删除了后，会向从服务器发送 DEL 命令，通知从服务器删除对应的键；</li><li>从服务器接收到读取一个键的命令时，即使这个键已经过期，也不会删除，而是照常处理这个命令；</li><li>从服务器接收到主服务器的 DEL 命令后，才会删除对应的过期键。</li></ul><p>这样保证了数据的一致性，一个键值对存在于主服务器，也必然存在于从服务器。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AOF</p><p>优点：AOF 中有三种策略可以进行选择，AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据。</p><p>缺点：AOF 文件体积一般情况下比 RDB 文件体积大，并且数据还原速度也慢于 RDB。</p><p>RDB</p><p>优点：可以快速恢复数据，相比于 AOF 的顺序，逐一执行操作命令，效率更高；</p><p>缺点：因为是内存快照，频率过快，过慢，都会有响应的问题。过快，浪费磁盘资源，会给磁盘造成压力，过慢会存在较多数据丢失的问题。</p><p>Redis 4.0中提出了一个混合使用 AOF 日志和内存快照的方法，如果想要保证数据不丢失，这是一个比较好的选择；</p><p>如果允许分钟级别的数据丢失，可以只使用RDB；</p><p>如果只用AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。</p><h1 id="redis配置文件详解"><a href="#redis配置文件详解" class="headerlink" title="redis配置文件详解"></a>redis配置文件详解</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><blockquote><p>单位<br> 文件的开头位置是各种单位的换算公式<br> 而且可以看出，对unit对大小写是不敏感的</p></blockquote><p><img src="linux7_17.jpg" alt="linux7_17"></p><blockquote><p>include 包含<br> 可以将其他的配置文件导入，一并使用（和import差不多）</p></blockquote><p><img src="linux7_18.jpg" alt="linux7_18"></p><blockquote><p>网络</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">bind</span> 127.0.0.1  <span class="hljs-comment">#绑定的ip，代表着哪些ip可以访问</span><br><span class="hljs-comment"># 关闭protected-mode模式，此时外部网络可以直接访问；</span><br><span class="hljs-comment"># 开启protected-mode保护模式，需配置bind ip或者设置访问密码</span><br>protected-mode <span class="hljs-built_in">yes</span>  <span class="hljs-comment">#保护模式。</span><br>port 6379 <span class="hljs-comment">#端口号 </span><br></code></pre></td></tr></table></figure><blockquote><p>GENERAL 通用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置为yes表示指定Redis以守护进程的方式启动（后台启动）。默认值为 no</span><br>daemonize <span class="hljs-built_in">yes</span>  <br><span class="hljs-comment"># 配置PID文件路径，当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/redis/run/redis_6379.pid 文件里面</span><br>pidfile /var/run/redis_6379.pid<br><br><span class="hljs-comment">#日志级别</span><br><span class="hljs-comment"># debug (a lot of information, useful for development/testing)</span><br><span class="hljs-comment"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="hljs-comment"># notice (moderately verbose, what you want in production probably)</span><br><span class="hljs-comment"># warning (only very important / critical messages are logged)</span><br>loglevel notice  <span class="hljs-comment"># 定义日志级别。默认值为notice</span><br>logfile <span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment"># 配置log文件路径名称,为空则默认打印在命令行终端的窗口上</span><br><br><span class="hljs-comment"># 设置数据库的数目。默认的数据库是DB 0 ，可以在每个连接上使用select  &lt;dbid&gt; 命令选择一个不同的数据库，dbid是一个介于0到databases - 1 之间的数值。默认值是 16，也就是说默认Redis有16个数据库。</span><br>databases 16<br><br>always-show-logo no<span class="hljs-comment"># 是否一直显示logo（开启redis时候的那个图案）</span><br></code></pre></td></tr></table></figure><blockquote><p>快照 SNAPSHOTTING<br> 持久化，在规定的时间内，执行了多少次操作，则会持久化到文件.rdb和.aof<br> redis是内存数据库，如果没有持久化，那么数据断电就不见了！</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置触发 Redis的持久化条件；</span><br>save 900 1  <span class="hljs-comment"># 表示900 秒内如果至少有 1 个 key 的值变化，则进行持久化操作保存</span><br>save 300 10  <span class="hljs-comment"># 表示300 秒内如果至少有 10 个 key 的值变化，则进行持久化操作保存</span><br>save 60 10000  <span class="hljs-comment"># 表示60 秒内如果至少有 10000 个 key 的值变化，则进行持久化操作保存</span><br><br>stop-writes-on-bgsave-error <span class="hljs-built_in">yes</span>  <span class="hljs-comment"># 持久化出现错误后，是否依然进行继续进行工作</span><br><br>rdbcompression <span class="hljs-built_in">yes</span><span class="hljs-comment"># 是否压缩.rdb文件。如果是的话，redis会采用LZF算法进行压缩。会消耗CPU来进行压缩</span><br><br>rdbchecksum <span class="hljs-built_in">yes</span>  <span class="hljs-comment">#保存.rdb文件的时候，进行文件错误校验，这样大约增加10%的性能消耗</span><br><br><span class="hljs-built_in">dir</span> ./<span class="hljs-comment"># rdb 文件保存的目录</span><br></code></pre></td></tr></table></figure><blockquote><p>REPLICATION主从复制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">replication 主机pi 主机端口  <span class="hljs-comment">#配置主结点</span><br>masterauth password <span class="hljs-comment">#主机的密码（没有密码不用写）</span><br></code></pre></td></tr></table></figure><blockquote><p>SECURITY安全</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># requirepass foobared  # 设置redis的密码，默认是没有密码！</span><br><span class="hljs-comment">#设置密码（有密码后访问数据库需要先验证 ： auth 123456）</span><br>requirepass  123456  <span class="hljs-comment">#在配置文件中设置密码</span><br>config <span class="hljs-built_in">set</span> requirepass <span class="hljs-string">&quot;123456&quot;</span> <span class="hljs-comment">#在命令行中设置密码</span><br></code></pre></td></tr></table></figure><blockquote><p>CLIENTS限制</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">maxclients 10000  <span class="hljs-comment"># 设置能连接上redis的最大客户端的数量</span><br>maxmemory &lt;bytes&gt;  <span class="hljs-comment"># redis 配置最大的内存容量，默认是字节</span><br>maxmemory-policy noeviction <span class="hljs-comment"># 内存达到上限之后的处理策略。永不过期，返回错误</span><br>1、noeviction:默认策略，不淘汰，如果内存已满，添加数据是报错。<br>2、allkeys-lru:在所有键中，选取最近最少使用的数据抛弃。<br>3、volatile-lru:在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。<br>4、allkeys-random: 在所有键中，随机抛弃。<br>5、volatile-random: 在设置了过期时间的所有键，随机抛弃。<br>6、volatile-ttl:在设置了过期时间的所有键，抛弃存活时间最短的数据。<br></code></pre></td></tr></table></figure><blockquote><p>APPEND ONLY 模式 aof配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">appendonly no <span class="hljs-comment">#默认是不开启aof模式的，因为我们默认是使用rdb持久化</span><br><br><span class="hljs-comment"># 指定本地数据库文件名，默认值为 appendonly.aof</span><br>appendfilename <span class="hljs-string">&quot;appendonly.aof&quot;</span> <span class="hljs-comment">#持久化文件的名字</span><br><br>appendfsync           <span class="hljs-comment">#进行文件同步配置的频率</span><br><span class="hljs-comment"># appendfsync always  # always表示每次修改都执行fsync，以保证数据同步到磁盘，慢，但是最安全。</span><br>appendfsync everysec  <span class="hljs-comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据，每秒写一次。</span><br><span class="hljs-comment"># appendfsync no      # no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux_6</title>
    <link href="/2023/07/31/Linux-6/"/>
    <url>/2023/07/31/Linux-6/</url>
    
    <content type="html"><![CDATA[<h1 id="DDL-DML-DCL-DQL"><a href="#DDL-DML-DCL-DQL" class="headerlink" title="DDL,DML,DCL,DQL"></a>DDL,DML,DCL,DQL</h1><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据对象(数据库，表，字段)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td></tr></tbody></table><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>数据定义语言 (Data Definition Language, DDL) ,它主要包括三个关键字：create ，alter , drop（数据库关键字不分大小写 ）,主要操作对象 有数据库、表、索引、视图等.</p><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">create databases 数据库名称;<br></code></pre></td></tr></table></figure><h4 id="使用这个数据库"><a href="#使用这个数据库" class="headerlink" title="使用这个数据库"></a>使用这个数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">use 数据库名称;<br></code></pre></td></tr></table></figure><h4 id="删除这个数据库"><a href="#删除这个数据库" class="headerlink" title="删除这个数据库"></a>删除这个数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">drop database 数据库名称;<br></code></pre></td></tr></table></figure><h3 id="操作表结构"><a href="#操作表结构" class="headerlink" title="操作表结构"></a>操作表结构</h3><h4 id="创建一张用户表"><a href="#创建一张用户表" class="headerlink" title="创建一张用户表"></a>创建一张用户表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> int(3) ,<br>user_name varchar(30) <br>)<br></code></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> T_USER;<br></code></pre></td></tr></table></figure><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><p>添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> T_USER <span class="hljs-keyword">ADD</span> address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>修改字段类型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> T_USER MODIFY address <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><p>修改字段名称</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> T_USER <span class="hljs-keyword">RENAME</span> <span class="hljs-keyword">COLUMN</span> address <span class="hljs-keyword">TO</span> address666;<br></code></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER TABLE T_USER DROP COLUMN address666;<br></code></pre></td></tr></table></figure><h4 id="表结构的约束"><a href="#表结构的约束" class="headerlink" title="表结构的约束"></a>表结构的约束</h4><p>非空约束</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER TABLE T_USER <br>  CHANGE <span class="hljs-built_in">id</span> <span class="hljs-built_in">id</span> INT NOT NULL COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>;<br></code></pre></td></tr></table></figure><p>或者在建表的时候指定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除表</span><br>DROP TABLE T_USER;<br>CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> INT(5) NOT NULL COMMENT  <span class="hljs-string">&#x27;主键&#x27;</span>,<br>user_name VARCHAR(20) COMMENT <span class="hljs-string">&#x27;账号&#x27;</span> ,<br>age INT(2) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> DEFAULT 18<br>)COMMENT=<span class="hljs-string">&#x27;用户表&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>默认值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE T_USER;<br>CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> INT(5)  NOT NULL COMMENT  <span class="hljs-string">&#x27;主键&#x27;</span>,<br>user_name VARCHAR(20) COMMENT <span class="hljs-string">&#x27;账号&#x27;</span> ,<br>age INT(2) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> DEFAULT 18<br>)COMMENT=<span class="hljs-string">&#x27;用户表&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>唯一约束</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE T_USER;<br>CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> INT(5)  UNIQUE COMMENT  <span class="hljs-string">&#x27;主键&#x27;</span>,<br>user_name VARCHAR(20) COMMENT <span class="hljs-string">&#x27;账号&#x27;</span> ,<br>age INT(2) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> DEFAULT 18<br>)COMMENT=<span class="hljs-string">&#x27;用户表&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>建表后设置字段的唯一约束条件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER TABLE t_user add CONSTRAINT unique_name UNIQUE(user_name);<br>alter table t_user add unique (user_name);<br></code></pre></td></tr></table></figure><p>主键</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE T_USER;<br>CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> INT(5)  PRIMARY KEY COMMENT  <span class="hljs-string">&#x27;主键&#x27;</span>,<br>user_name VARCHAR(20) COMMENT <span class="hljs-string">&#x27;账号&#x27;</span> ,<br>age INT(2) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> DEFAULT 18<br>)COMMENT=<span class="hljs-string">&#x27;用户表&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>联合主键：多个字段组合的信息是不能出现重复的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ALTER TABLE t_user<br>  ADD PRIMARY KEY (<span class="hljs-built_in">id</span>, user_name);<br></code></pre></td></tr></table></figure><p>外键</p><p>​    外键就是在主表中可以重复出现,但是它的值是另一个表的主键,外键使两个表相关，外键可约束表的数据的更新，外键和主键表联系，数据类型要统一，长度(存储大小)要统一，在更新数据的时候会保持一致性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除表</span><br>DROP TABLE T_USER;<br>CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> INT(5)  PRIMARY KEY COMMENT  <span class="hljs-string">&#x27;主键&#x27;</span>,<br>user_name VARCHAR(20) COMMENT <span class="hljs-string">&#x27;账号&#x27;</span> ,<br>age INT(2) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> DEFAULT 18,<br>deptid INT(30) ,<br>CONSTRAINT FK_DEPT_ID FOREIGN KEY(deptid) REFERENCES T_DEPT(dept_id)<br>)COMMENT=<span class="hljs-string">&#x27;用户表&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>check</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">DROP TABLE T_USER;<br>CREATE TABLE T_USER(<br><span class="hljs-built_in">id</span> INT(5)  PRIMARY KEY COMMENT  <span class="hljs-string">&#x27;主键&#x27;</span>,<br>user_name VARCHAR(20) COMMENT <span class="hljs-string">&#x27;账号&#x27;</span> ,<br>age INT(3) COMMENT <span class="hljs-string">&#x27;年龄&#x27;</span> ,<br>CHECK (age &gt; 0 AND age &lt; 40)<br>)COMMENT=<span class="hljs-string">&#x27;用户表&#x27;</span> ;<br></code></pre></td></tr></table></figure><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除。</p><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>插入单行记录</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">into</span> 列名（列名，。。）<span class="hljs-keyword">values</span>(,)<br></code></pre></td></tr></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 字段名=值，字段名=值。。 <span class="hljs-keyword">where</span><br></code></pre></td></tr></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>delete删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">delete from t_student <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = 1;<br><span class="hljs-comment"># 如果不带where 条件 那么表示删除该表中的所有的记录 慎用!!!  删表跑路</span><br>delete from t_student ; <br><span class="hljs-comment"># delete insert update 语句都会走事务处理，也就是我们需要显示的commit和rollback;</span><br></code></pre></td></tr></table></figure><p>truncate删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># truncate 直接清空表结构中的所有的数据，效率高，但是不能回滚。</span><br>TRUNCATE TABLE t_user_1 <span class="hljs-comment"># where 1 = 1;</span><br></code></pre></td></tr></table></figure><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>数据查询语言（Data Query Language, DQL）是SQL语言中，负责进行数据查询而不会对数据本身进行修改的语句，这是最基本的SQL语句。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有FROM，WHERE，GROUP BY，HAVING和ORDER BY。这些DQL保留字常与其他类型的SQL语句一起使用。</p><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><p>查询语句的语法规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT &lt;字段列表&gt;<br>FROM &lt;表名&gt;<br>[WHERE &lt;查询条件&gt;]<br>[ORDER BY &lt;排序字段&gt;]<br>[GROUP BY &lt;分组字段&gt;]<br><span class="hljs-comment"># select NOW()</span><br></code></pre></td></tr></table></figure><p>为查询准备的表结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">CREATE TABLE t_student (<br><span class="hljs-built_in">id</span> int(3) primary key auto_increment ,<br>stuname varchar(30) not null ,<br>age int(3) ,<br>sex varchar(3) ,<br>birthday <span class="hljs-built_in">date</span> ,<br>address varchar(50),<br>class_id int(3)<br>);<br><br>CREATE TABLE t_class(<br>class_id varchar(30) PRIMARY KEY ,<br>class_name varchar(30) UNIQUE ,<br>class_desc varchar(50)<br>);<br></code></pre></td></tr></table></figure><p>单表查询不带条件的查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.查询出所有的学生信息  所有的学生的所有字段的信息</span><br>select * from t_student ;<br><br><span class="hljs-comment"># 2.查询出所有的学生的姓名和性别</span><br>select stuname,sex from t_student;<br><br><span class="hljs-comment"># 3.对查询的表和列设置对应的别名</span><br>select stuname as <span class="hljs-string">&#x27;姓名&#x27;</span> ,sex as <span class="hljs-string">&quot;性别&quot;</span> from t_student;<br> <span class="hljs-comment"># 别名简写可以省略 as  和 单引号</span><br> select stuname 名称 ,sex 性别 from t_student;<br><br><span class="hljs-comment"># 表也可以取别名</span><br>select t_student.stuname ,t_student.sex from t_student;<br>select t1.stuname,t1.sex from t_student as t1;<br>select t1.stuname,t1.sex from t_student  t1;<br><br><br><span class="hljs-comment"># 自己增加查询的字段</span><br>select stuname,sex,18 常量 from t_student;<br><br><span class="hljs-comment"># 4.查询出所有的学生信息，并且显示的形式是【张三】18【岁】</span><br>select stuname,age,concat(<span class="hljs-string">&#x27;【&#x27;</span>,stuname,<span class="hljs-string">&#x27;】&#x27;</span>,age,<span class="hljs-string">&#x27;【岁】&#x27;</span>) from t_student;<br></code></pre></td></tr></table></figure><p>单表查询带条件的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 5.查询出学生表中张三的所有的信息</span><br>select * from t_student <span class="hljs-built_in">where</span> stuname = <span class="hljs-string">&#x27;张三&#x27;</span>;<br><br><span class="hljs-comment"># 6.查询出学生表中年龄在18到22之间的学生的所有信息</span><br>select * from t_student <span class="hljs-built_in">where</span> age &gt;=18 and age &lt;= 22;<br>select * from t_student <span class="hljs-built_in">where</span> age BETWEEN 18 and 22 ;<br><br><span class="hljs-comment"># 7.查询出学生表中编号为1和3的学生信息</span><br><br>select * <br>from t_student<br><span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> = 1 or <span class="hljs-built_in">id</span> = 3;<br><br>select * from t_student <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> (1,3)<br><br><span class="hljs-comment"># 8.查询出学生表中地址信息为空的学生信息</span><br><span class="hljs-comment"># 不行 # </span><br><span class="hljs-comment"># select * from t_student where address = &#x27;&#x27;;</span><br><span class="hljs-comment"># select * from t_student where address = null;</span><br>select * from t_student <span class="hljs-built_in">where</span> address is null;<br><span class="hljs-comment"># 不为空的情况</span><br>select * from t_student <span class="hljs-built_in">where</span> address is not null;<br><br><span class="hljs-comment"># 9.查询出所有姓张的学生的所有信息 -- 模糊查询 like</span><br>select * from t_student <span class="hljs-built_in">where</span> stuname like <span class="hljs-string">&#x27;张%&#x27;</span> ;<br><span class="hljs-comment"># 如果不加% 其实和=差不多</span><br>select * from t_student <span class="hljs-built_in">where</span> stuname like <span class="hljs-string">&#x27;张三&#x27;</span>;<br><br>select * from t_student <span class="hljs-built_in">where</span> stuname like <span class="hljs-string">&#x27;%三%&#x27;</span>;<br><br><br><span class="hljs-comment"># 10.查询出学生表中年龄大于20的男同学的所有信息</span><br>select * from t_student <span class="hljs-built_in">where</span> age &gt; 20 and sex = <span class="hljs-string">&#x27;男&#x27;</span><br><br><span class="hljs-comment"># 11 查询出学生表中年龄大于20或者住址在长沙的同学的所有信息</span><br>select * from t_student <span class="hljs-built_in">where</span> age  &gt; 20 or address like <span class="hljs-string">&#x27;%长沙%&#x27;</span><br><br><span class="hljs-comment"># 12 查询出所有的学生信息，根据id降序  desc 降序 asc 升序【默认就是升序，也就是 asc可以省略】</span><br>select * <br>from t_student <br>order by <span class="hljs-built_in">id</span> desc;<br><br>select * <br>from t_student <br>order by <span class="hljs-built_in">id</span> asc;<br><br>select * <br>from t_student <br>order by <span class="hljs-built_in">id</span> ;<br><br><span class="hljs-comment"># 排序我们可以根据多个字段来排列，前面的字段优先排序</span><br><span class="hljs-comment"># 先根据age降序排列，如果age有相同的信息，那么再根据id升序排序</span><br>select * from t_student order by age desc ,<span class="hljs-built_in">id</span> asc; <br><br>select * from t_student order by age desc ,<span class="hljs-built_in">id</span> desc;<br></code></pre></td></tr></table></figure><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括grant、revoke 等。</p><p>DCL 语句主要是DBA 用来管理系统中的对象权限时所使用，一般的开发人员很少使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; grant select,insert on plf.* to <span class="hljs-string">&#x27;plf&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>Query OK, 0 rows affected (0.00 sec)<br>mysql&gt; flush privileges;<br>Query OK, 0 rows affected (0.00 sec)<br><br><br>mysql&gt; revoke insert on plf.* from <span class="hljs-string">&#x27;plf&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><h1 id="sql查询语句"><a href="#sql查询语句" class="headerlink" title="sql查询语句"></a>sql查询语句</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">select classid,count(*) from 数量 from students group by classid <span class="hljs-built_in">limit</span> 3;<br><br>select * from students order by age desc <span class="hljs-built_in">limit</span> 3<br><br>select classid,avg(age) as 平均年龄 from sutdents <span class="hljs-built_in">where</span> classid &gt; 3 group by classid having 平均年龄 &gt; 30 ;<br><br>select gender,avg(age) 平均年龄 from students group by gender having gender=<span class="hljs-string">&#x27;M&#x27;</span>;<br><br>select * from students order by name desc <span class="hljs-built_in">limit</span> 2;<br><br>select * from students order by name desc <span class="hljs-built_in">limit</span> 1,7;<br><br>select classid,<span class="hljs-built_in">sum</span>(age) from students group by classid  having classid is not null order by classid;<br><br>select gender,group_concat(name) from students group by gender <span class="hljs-built_in">limit</span> 0,5;<br><br>select classid,count(*) 数量  from students group by classid order by 数量;<br><br>select gender,classid,avg(age) from students <span class="hljs-built_in">where</span> classid is not null group by gender,classid order by gender,classid;<br></code></pre></td></tr></table></figure><h1 id="xtrabackup备份和还原数据库"><a href="#xtrabackup备份和还原数据库" class="headerlink" title="xtrabackup备份和还原数据库"></a>xtrabackup备份和还原数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、备份过程：<br><span class="hljs-comment">#先安装xtrabackup包</span><br>yum -y install percona-xtrabackup-80-8.0.23-1.el8.x86_64.rpm<br><span class="hljs-comment">#在原主机做完全备份到/backup</span><br><span class="hljs-built_in">mkdir</span> /backup<br>xtrabackup -uroot --backup --target-dir=/backup/base<br><br><span class="hljs-comment">#第一次修改数据</span><br><span class="hljs-comment">#第一次增量备份</span><br>xtrabackup -uroot -pmagedu --backup --target-dir=/backup/inc1 --<br>incremental-basedir=/backup/base<br><br><span class="hljs-comment">#第二次修改数据</span><br><span class="hljs-comment">#第二次增量备份</span><br>xtrabackup -uroot -pmagedu --backup --target-dir=/backup/inc2 --<br>incremental-basedir=/backup/inc1<br><br><span class="hljs-comment">#备份到远程主机</span><br>scp -r /backup/* 192.168.50.3:/backup/<br><br>2、还原过程：<br><span class="hljs-comment">#预准备完成备份，此选项--apply-log-only   阻止回滚未完成的事务</span><br>xtrabackup --prepare --apply-log-only --target-dir=/backup/base<br><span class="hljs-comment">#合并第1次增量备份到完全备份</span><br>xtrabackup --prepare --apply-log-only --target-dir=/backup/base <br>--incremental-dir=/backup/inc1<br><span class="hljs-comment">#合并第2次增量备份到完全备份，最后一次还原不需要加选项--apply-log-only</span><br>xtrabackup --prepare --target-dir=/backup/base --incremental-dir=/backup/inc2<br><br><span class="hljs-comment">#复制到数据库目录，注意数据库目录必须为空，mysql服务不能启动</span><br>xtrabackup --copy-back --target-dir=/backup/base<br><span class="hljs-comment">#还原属性</span><br><span class="hljs-built_in">chown</span> -R mysql:mysql /var/lib/mysql<br><span class="hljs-comment">#启动服务</span><br>service mysqld start<br></code></pre></td></tr></table></figure><h1 id="mysql主从复制，主主复制和半同步复制"><a href="#mysql主从复制，主主复制和半同步复制" class="headerlink" title="mysql主从复制，主主复制和半同步复制"></a>mysql主从复制，主主复制和半同步复制</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#修改master主节点的配置</span><br>vim /etc/my.cnf<br><br>[mysqld]<br>server-id=1<br>log-bin=/data/mysql/logbin/mysql-bin<br><br>systemctl restart mysqld<br><br><span class="hljs-comment">#完全备份</span><br>mysqldump -A -F --master-data=1 --single-transaction &gt;data/all.sql<br><br><span class="hljs-comment">#创建复制用户并授权</span><br>mysql<br>create user repluser@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br>grant replication slave on *.* to repluser@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span>;<br><br><span class="hljs-comment">#将备份复制到从节点</span><br>scp /data/all.sql 192.168.50.3:/data<br><br><span class="hljs-comment">#配置从节点</span><br>vim /etc/my.cnf<br>[mysqld]<br>server-id=2<br>read-only<br><br>systemctl restart mysqld<br><br><span class="hljs-comment">#从节点修改备份文件</span><br>vim /data/all.sql<br><br>CHANGE MASTER TO<br>  MASTER_HOST=<span class="hljs-string">&#x27;主节点&#x27;</span>,<br>  MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>  MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>  MASTER_PORT=3306,<br>MASTER_LOG_FILE=<span class="hljs-string">&#x27;mysql-bin.000002&#x27;</span>, MASTER_LOG_POS=156;    <span class="hljs-comment">#这个数字需要查看主节点二进制文件日志</span><br><br><span class="hljs-comment">#从节点还原备份</span><br><span class="hljs-built_in">set</span> sql_log_bin=0;<br><span class="hljs-built_in">source</span> /data/all.sql;<br><span class="hljs-built_in">set</span> sql_log_bin=1;<br><br><span class="hljs-comment">#从节点开始复制</span><br>start slave;<br></code></pre></td></tr></table></figure><h2 id="实现两个节点的主主复制"><a href="#实现两个节点的主主复制" class="headerlink" title="实现两个节点的主主复制"></a>实现两个节点的主主复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#在第一个master节点上实现</span><br>vim /etc/my.cnf.d/mysql-server.cnf<br>[mysqld]<br>server-id=1<br>log-bin<br>auto_increment_offset=1<br>auto_increment_increment=2<br><br>systemctl restart mysqld<br><br><br><span class="hljs-comment">#在第二个节点上实现</span><br>vim /etc/my.cnf.d/mysql-server.cnf<br>[mysqld]<br>server-id=2<br>log-bin<br>auto_increment_offset=2<br>auto_increment_increment=2<br><br>systemctl restart mysqld<br>mysql<br>CHANGE MASTER TO<br>    -&gt;   MASTER_HOST=<span class="hljs-string">&#x27;192.168.50.200&#x27;</span>,<br>    -&gt;   MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>    -&gt;   MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    -&gt;   MASTER_PORT=3306,<br>    -&gt;   MASTER_LOG_FILE=<span class="hljs-string">&#x27;mariadb-bin.000002&#x27;</span>,<br>    -&gt;   MASTER_LOG_POS=386;    <span class="hljs-comment">#此数字需要查第一个节点日志</span><br>start slave;<br><br><br><span class="hljs-comment">#在第一个master上实现</span><br>mysql<br>CHANGE MASTER TO<br>    -&gt;   MASTER_HOST=<span class="hljs-string">&#x27;192.168.50.3&#x27;</span>,<br>    -&gt;   MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>    -&gt;   MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    -&gt;   MASTER_PORT=3306,<br>    -&gt;   MASTER_LOG_FILE=<span class="hljs-string">&#x27;mariadb-bin.000002&#x27;</span>,<br>    -&gt;   MASTER_LOG_POS=344;      <span class="hljs-comment">#此数字需要查第二个节点日志</span><br>start slave;<br></code></pre></td></tr></table></figure><h2 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#master服务器配置</span><br>vim /etc/my.cnf.d/mysql-server.cnf<br>[mysqld]<br>server-id=1<br>log-bin<br>rpl_semi_sync_master_enabled=ON<br>rpl_semi_sync_master_timeout=3000<br><br><span class="hljs-comment">#slave1服务器配置</span><br>vim /etc/my.cnf.d/mysql-server.cnf<br>[mysqld]<br>server-id=2<br>rpl_semi_sync_slave_enabled=ON<br><br><span class="hljs-comment">#slave2服务器配置</span><br>vim /etc/my.cnf.d/mysql-server.cnf<br>[mysqld]<br>server-id=3<br>rpl_semi_sync_slave_enabled=ON<br><br><br>主服务器配置<br>mysql<br>INSTALL PLUGIN rpl_semi_sync_master SONAME <span class="hljs-string">&#x27;semisync_master.so&#x27;</span>;<br>SET GLOBAL rpl_semi_sync_master_enabled=1<br>SET GLOBAL rpl_semi_sync_master_timeout = 3000;<br><br><span class="hljs-comment">#从服务器配置</span><br>mysql<br>INSTALL PLUGIN rpl_semi_sync_slave SONAME <span class="hljs-string">&#x27;semisync_slave.so&#x27;</span>;<br>SET GLOBAL rpl_semi_sync_slave_enabled=1;<br>stop slave;<br>start slave;<br></code></pre></td></tr></table></figure><h1 id="mycat实现mysql的读写分离"><a href="#mycat实现mysql的读写分离" class="headerlink" title="mycat实现mysql的读写分离"></a>mycat实现mysql的读写分离</h1><h2 id="修改master和slave上的配置文件"><a href="#修改master和slave上的配置文件" class="headerlink" title="修改master和slave上的配置文件"></a>修改master和slave上的配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、修改master和slave上的配置文件<br><span class="hljs-comment">#修改master上的my.cnf</span><br>vim /etc/my.cnf.d/mariadb-server.cnf<br>[mysqld]<br>server-id=1<br>log-bin<br><br><span class="hljs-comment">#修改slave上的my.cnf</span><br>[mysqld]<br>server-id=2<br><br><br>2、master上创建复制用户<br>mysql -uroot<br>grant replication slave on *.* to <span class="hljs-string">&#x27;repluser&#x27;</span>@<span class="hljs-string">&#x27;192.168.50.%&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span> ;<br>flush privileges;<br>show master status;<br><br>3、slaver 上执行<br>mysql -uroot<br>change master to<br>-&gt;     MASTER_HOST=<span class="hljs-string">&#x27;192.168.50.200&#x27;</span>,<br>-&gt;     MASTER_USER=<span class="hljs-string">&#x27;repluser&#x27;</span>,<br>-&gt;     MASTER_PASSWORD=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>-&gt;     MASTER_LOG_FILE=<span class="hljs-string">&#x27;mariadb-bin.000001&#x27;</span>,<br>-&gt;     MASTER_LOG_POS=856;<br><br>start slave<br><br>show slave status\G<br><br></code></pre></td></tr></table></figure><h2 id="在mysql代理服务器上安装mycat并启动"><a href="#在mysql代理服务器上安装mycat并启动" class="headerlink" title="在mysql代理服务器上安装mycat并启动"></a>在mysql代理服务器上安装mycat并启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>yum -y install java<br>wget http://dl.mycat.org.cn/1.6.7.6/20210303094759/Mycat-server-<br>1.6.7.6-release-20210303094759-linux.tar.gz<br>wget http://dl.mycat.org.cn/1.6.7.4/Mycat-server-1.6.7.4-release/Mycat-server-<br>1.6.7.4-release-20200105164103-linux.tar.gz<br><br><span class="hljs-built_in">mkdir</span> /apps<br>tar xvf Mycat-server-1.6.7.6-release-20210303094759-linux.tar.gz <br>-C /apps/<br>tar xvf Mycat-server-1.6.7.4-release-20200105164103-linux.tar.gz -C /apps<br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;PATH=/apps/mycat/bin:$PATH&#x27;</span> &gt; /etc/profile.d/mycat.sh<br><span class="hljs-built_in">source</span> /etc/profile.d/mycat.sh<br><br><span class="hljs-comment">#启动mycat</span><br>file /apps/mycat/bin/mycat<br>mycat start<br>ss -ntl<br></code></pre></td></tr></table></figure><ul><li>使用默认密码123456来连接mycat</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysql</span> -uroot -p123456 -h <span class="hljs-number">192.168.50.131</span> -P8066<br></code></pre></td></tr></table></figure><h2 id="在mycat服务器上修改server-xml文件配置mycat的连接信息"><a href="#在mycat服务器上修改server-xml文件配置mycat的连接信息" class="headerlink" title="在mycat服务器上修改server.xml文件配置mycat的连接信息"></a>在mycat服务器上修改server.xml文件配置mycat的连接信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /apps/mycat/conf/server.xml<br><br><span class="hljs-comment">#重新插入</span><br>&lt;property name=<span class="hljs-string">&quot;serverPort&quot;</span>&gt;3306&lt;/property&gt;<br>&lt;property name=<span class="hljs-string">&quot;handlelDistributedTransactions&quot;</span>&gt;0&lt;/property&gt;<br></code></pre></td></tr></table></figure><h2 id="修改schema-xml实现读写分离策略"><a href="#修改schema-xml实现读写分离策略" class="headerlink" title="修改schema.xml实现读写分离策略"></a>修改schema.xml实现读写分离策略</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /apps/mycat/conf/schema.xml<br><br>&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;<br>&lt;mycat:schema xmlns:mycat=<span class="hljs-string">&quot;http://io.mycat/&quot;</span>&gt;<br> &lt;schema name=<span class="hljs-string">&quot;TESTDB&quot;</span> checkSQLschema=<span class="hljs-string">&quot;false&quot;</span> sqlMaxLimit=<span class="hljs-string">&quot;100&quot;</span><br>dataNode=<span class="hljs-string">&quot;dn1&quot;</span>&gt;<br> &lt;/schema&gt;<br> &lt;dataNode name=<span class="hljs-string">&quot;dn1&quot;</span> dataHost=<span class="hljs-string">&quot;localhost1&quot;</span> database=<span class="hljs-string">&quot;hellodb&quot;</span> /&gt;<br> &lt;dataHost name=<span class="hljs-string">&quot;localhost1&quot;</span> maxCon=<span class="hljs-string">&quot;1000&quot;</span> minCon=<span class="hljs-string">&quot;10&quot;</span> balance=<span class="hljs-string">&quot;1&quot;</span><br>  writeType=<span class="hljs-string">&quot;0&quot;</span> dbType=<span class="hljs-string">&quot;mysql&quot;</span> dbDriver=<span class="hljs-string">&quot;native&quot;</span> switchType=<span class="hljs-string">&quot;1&quot;</span><br>slaveThreshold=<span class="hljs-string">&quot;100&quot;</span>&gt;<br> &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;<br> &lt;writeHost host=<span class="hljs-string">&quot;host1&quot;</span> url=<span class="hljs-string">&quot;192.168.50.200:3306&quot;</span> user=<span class="hljs-string">&quot;root&quot;</span><br>   password=<span class="hljs-string">&quot;123456&quot;</span>&gt;<br>         &lt;readHost host=<span class="hljs-string">&quot;host2&quot;</span> url=<span class="hljs-string">&quot;192.168.50.3:3306&quot;</span> user=<span class="hljs-string">&quot;root&quot;</span><br>password=<span class="hljs-string">&quot;123456&quot;</span> /&gt;<br> &lt;/writeHost&gt;<br>   &lt;/dataHost&gt;<br>&lt;/mycat:schema&gt;<br><br><br><br><span class="hljs-comment">#重新启动mycat</span><br>mycat restart<br></code></pre></td></tr></table></figure><h2 id="在后端主服务器创建用户并对mycat授权"><a href="#在后端主服务器创建用户并对mycat授权" class="headerlink" title="在后端主服务器创建用户并对mycat授权"></a>在后端主服务器创建用户并对mycat授权</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>mysql -uroot<br>create databses mycat ;<br>grant all on *.* to <span class="hljs-string">&#x27;root&#x27;</span>@192.168.50.%<span class="hljs-string">&#x27; identified by &#x27;</span>123456<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">flush privileges;</span><br></code></pre></td></tr></table></figure><h2 id="通过通用日志确认实现读写分离"><a href="#通过通用日志确认实现读写分离" class="headerlink" title="通过通用日志确认实现读写分离"></a>通过通用日志确认实现读写分离</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#在mysql中查看通用日志</span><br><span class="hljs-built_in">set</span> global general_log=on;<br><br><span class="hljs-comment">#在主和从服务器分别启用通用日志，查看读写分离</span><br>vim /etc/my.cnf.d/mysql-server.cnf<br><br>[mysqld]<br>general_log=ON<br></code></pre></td></tr></table></figure><h1 id="openvpn"><a href="#openvpn" class="headerlink" title="openvpn"></a>openvpn</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">服务器系统：CentOS Linux release 7.9.2009 (Core)<br>服务器配置：不重要<br>服务器IP：<br>Openvpn服务器：<br>外网：124.70.49.106<br>内网：192.168.0.155<br>内网测试服务器：192.168.0.21<br>openvpn客户端服务器网段：172.16.16.0/24<br>OpenVpn版本：2.5.6<br>easy-rsa版本：3.0.8<br><br>安装包存放的路径：/tmp/install/<br>程序安装目录：/data/openvpn<br><br>备注：<br>root<span class="hljs-comment"># 代表在root用户下执行的命令</span><br>$ 代表是在普通用户下执行的命令<br><span class="hljs-comment"># 单个#号代表注释</span><br></code></pre></td></tr></table></figure><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">（以下所有操作均在Openvpn服务器操作）<br><span class="hljs-comment"># 关闭防火墙</span><br>root<span class="hljs-comment"># systemctl stop firewalld</span><br>root<span class="hljs-comment"># systemctl disable firewalld</span><br><br><span class="hljs-comment"># 关闭selinux</span><br>root<span class="hljs-comment"># sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config</span><br>root<span class="hljs-comment"># setenforce 0</span><br><br><span class="hljs-comment"># 安装依赖</span><br>root<span class="hljs-comment"># yum install -y  vim wget lrzsz gcc-c++ openssl openssl-devel net-tools lzo lzo-devel pam pam-devel </span><br><br><span class="hljs-comment"># 下载安装包</span><br>root<span class="hljs-comment"># mkdir /tmp/install</span><br>root<span class="hljs-comment"># cd /tmp/install</span><br>root<span class="hljs-comment"># wget https://swupdate.openvpn.org/community/releases/openvpn-2.5.6.tar.gz</span><br>root<span class="hljs-comment"># wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.8/EasyRSA-3.0.8.tgz</span><br><br></code></pre></td></tr></table></figure><h3 id="安装OpenVpn和EasyRSA"><a href="#安装OpenVpn和EasyRSA" class="headerlink" title="安装OpenVpn和EasyRSA"></a>安装OpenVpn和EasyRSA</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1）安装OpenVpn</span><br>root<span class="hljs-comment"># cd /tmp/install</span><br><br><span class="hljs-comment">#创建目录</span><br>root<span class="hljs-comment"># mkdir /data</span><br><br><span class="hljs-comment">#解压缩</span><br>root<span class="hljs-comment"># tar -zxvf openvpn-2.5.6.tar.gz</span><br><br>root<span class="hljs-comment"># cd openvpn-2.5.6</span><br><br><span class="hljs-comment">#--prefix= 后面路径是安装openvpn到那个文件路径下</span><br>root<span class="hljs-comment"># ./configure --prefix=/data/openvpn/</span><br><br><span class="hljs-comment">#编译</span><br>root<span class="hljs-comment"># make &amp;&amp; make install</span><br><br><span class="hljs-comment">#添加openvpn的环境变量</span><br>root<span class="hljs-comment"># echo -e &quot;PATH=\$PATH:/data/openvpn/sbin&quot; &gt;/etc/profile.d/openvpn256.sh</span><br><br><span class="hljs-comment">#加载环境变量</span><br>root<span class="hljs-comment"># source /etc/profile</span><br><br><span class="hljs-comment">#执行下面的命令看看是否成功，出现以下内容表示成功</span><br>root<span class="hljs-comment"># openvpn --version</span><br>OpenVPN 2.5.6 x86_64-pc-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [MH/PKTINFO] [AEAD] built on May  5 2022<br><br><span class="hljs-comment">#2）安装EasyRSA</span><br>root<span class="hljs-comment"># cd /tmp/install</span><br>root<span class="hljs-comment"># tar -zxvf EasyRSA-3.0.8.tgz</span><br>root<span class="hljs-comment"># mv EasyRSA-3.0.8 /data/EasyRSA</span><br></code></pre></td></tr></table></figure><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="准备CA签发机构环境"><a href="#准备CA签发机构环境" class="headerlink" title="准备CA签发机构环境"></a>准备CA签发机构环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#拷贝EasyRSA</span><br>root<span class="hljs-comment"># cp -r  /data/EasyRSA /data/openvpn/easy-rsa-server</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br><br><span class="hljs-comment">#准备签发证书的默认变量文件</span><br>root<span class="hljs-comment"># egrep -v &quot;^$|^#&quot; vars.example &gt;vars</span><br><br><span class="hljs-comment">#编辑vars文件，在最后一行增加以下内容</span><br>root<span class="hljs-comment"># vim vars</span><br><span class="hljs-comment">#添加参数，设置CA证书有效期为100年（日期可以你自己决定设置多长）</span><br>set_var EASYRSA_CA_EXPIRE 36500<br><span class="hljs-comment">#添加参数，设置服务器证书为10年</span><br>set_var EASYRSA_CERT_EXPIRE 3650<br></code></pre></td></tr></table></figure><h3 id="创建CA机构与服务器证书"><a href="#创建CA机构与服务器证书" class="headerlink" title="创建CA机构与服务器证书"></a>创建CA机构与服务器证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1）创建CA机构</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br><br><span class="hljs-comment">#初始化，执行此命令会生成pki目录</span><br>root<span class="hljs-comment"># ./easyrsa init-pki</span><br><br><span class="hljs-comment">#创建CA机构,nopass代表不需要密码的意思</span><br>root<span class="hljs-comment"># ./easyrsa build-ca nopass</span><br><span class="hljs-comment">#这里是CA机构的名称，我这边使用的是CATEST，这个名字可以用默认的也可以你自己输入</span><br>Common Name (eg: your user, host, or server name) [Easy-RSA CA]: CATEST<br><span class="hljs-comment">#执行创建ca机构成功的话，会出现下面的这个ca.crt文件</span><br>Your new CA certificate file <span class="hljs-keyword">for</span> publishing is at:<br>/data/openvpn/easy-rsa-server/pki/ca.crt<br><br><span class="hljs-comment">#CA证书文件</span><br>root<span class="hljs-comment">#  ls -l  /data/openvpn/easy-rsa-server/pki/ca.crt</span><br>-rw------- 1 root root 1151 May  5 09:56 /data/openvpn/easy-rsa-server/pki/ca.crt<br><br><span class="hljs-comment">#CA秘钥文件</span><br>root<span class="hljs-comment">#  ls -l  /data/openvpn/easy-rsa-server/pki/private/ca.key</span><br>-rw------- 1 root root 1679 May  5 09:56 /data/openvpn/easy-rsa-server/pki/private/ca.key<br><br><span class="hljs-comment">#2）创建服务端证书</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br><br><span class="hljs-comment">#创建服务端证书申请文件，openvpnserver为了区别参数标识，我这里设置为openvpnserver，如果你自己安装的话可以使用默认的server 这个名称</span><br>root<span class="hljs-comment"># ./easyrsa gen-req openvpnserver nopass</span><br><span class="hljs-comment">#默认回车就行</span><br>Common Name (eg: your user, host, or server name) [openvpnserver]:<br>Keypair and certificate request completed. Your files are:<br><span class="hljs-comment">#请求文件</span><br>req: /data/openvpn/easy-rsa-server/pki/reqs/openvpnserver.req<br><span class="hljs-comment">#私钥文件</span><br>key: /data/openvpn/easy-rsa-server/pki/private/openvpnserver.key<br><br><span class="hljs-comment">#3）签发服务端证书</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br><br><span class="hljs-comment">#这里的server是代表服务端意思，openvpnserver这个是上面我们创建的服务端证书的名称</span><br>root<span class="hljs-comment"># ./easyrsa sign server openvpnserver</span><br><span class="hljs-comment">#输入yes</span><br>Type the word <span class="hljs-string">&#x27;yes&#x27;</span> to <span class="hljs-built_in">continue</span>, or any other input to abort.<br>  Confirm request details: <span class="hljs-built_in">yes</span><br>  <span class="hljs-comment">#服务端的证书文件</span><br>Certificate created at: /data/openvpn/easy-rsa-server/pki/issued/openvpnserver.crt<br><br><span class="hljs-comment">#4）创建交互秘钥</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br><br>root<span class="hljs-comment"># ./easyrsa gen-dh</span><br>DH parameters of size 2048 created at /data/openvpn/easy-rsa-server/pki/dh.pem<br><br><span class="hljs-comment">#5） 启用安全增强配置</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br>root<span class="hljs-comment"># openvpn --genkey tls-auth ta.key</span><br><br></code></pre></td></tr></table></figure><h3 id="OpenVPN服务端配置"><a href="#OpenVPN服务端配置" class="headerlink" title="OpenVPN服务端配置"></a>OpenVPN服务端配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建openvpn用户</span><br>root<span class="hljs-comment"># groupadd openvpn</span><br>root<span class="hljs-comment"># useradd -M -s /sbin/nologin -g openvpn openvpn</span><br><br><span class="hljs-comment"># 创建证书存放目录</span><br>root<span class="hljs-comment"># mkdir /data/openvpn/certificate</span><br><br><span class="hljs-comment"># 创建日志存放目录</span><br>root<span class="hljs-comment"># mkdir /data/openvpn/logs</span><br>root<span class="hljs-comment"># chown openvpn.  /data/openvpn/logs</span><br><br><br><span class="hljs-comment"># 将服务端证书秘钥和交互秘钥复制到certificate目录</span><br>root<span class="hljs-comment"># cp /data/openvpn/easy-rsa-server/pki/ca.crt /data/openvpn/certificate/</span><br>root<span class="hljs-comment"># cp /data/openvpn/easy-rsa-server/pki/issued/openvpnserver.crt  /data/openvpn/certificate/</span><br>root<span class="hljs-comment"># cp /data/openvpn/easy-rsa-server/pki/private/openvpnserver.key  /data/openvpn/certificate/</span><br>root<span class="hljs-comment"># cp /data/openvpn/easy-rsa-server/pki/dh.pem  /data/openvpn/certificate/</span><br>root<span class="hljs-comment"># cp /data/openvpn/easy-rsa-server/ta.key  /data/openvpn/certificate/</span><br><br><span class="hljs-comment">#添加配置文件</span><br>root<span class="hljs-comment"># cd /data/openvpn/</span><br>root<span class="hljs-comment"># vim /data/openvpn/server.conf</span><br><span class="hljs-comment">#__server.conf—stat___</span><br><span class="hljs-comment">#端口</span><br>port 1194<br><span class="hljs-comment">#协议</span><br>proto tcp<br>dev tun<br><span class="hljs-comment">#ca证书文件</span><br>ca /data/openvpn/certificate/ca.crt<br><span class="hljs-comment">#服务端证书文件</span><br>cert /data/openvpn/certificate/openvpnserver.crt<br><span class="hljs-comment">#服务端私钥文件</span><br>key /data/openvpn/certificate/openvpnserver.key<br><span class="hljs-comment">#交换秘钥文件</span><br>dh /data/openvpn/certificate/dh.pem<br><span class="hljs-comment">#安全增强文件，0是服务端，1是客户端</span><br>tls-auth /data/openvpn/certificate/ta.key 0<br><span class="hljs-comment">#分配客户端IP的网段，不能和服务器一个网段，不能冲突</span><br>server 10.8.0.0 255.255.255.0<br><span class="hljs-comment">#运行通讯的内网路由，可以多条</span><br>push <span class="hljs-string">&quot;route 192.168.0.0 255.255.255.0&quot;</span><br><span class="hljs-comment">#会话检测，每十秒测试一下，超过120秒没回应就认为对方down</span><br>keepalive 10 120<br><span class="hljs-comment">#加密算法</span><br>cipher AES-256-CBC<br><span class="hljs-comment">#压缩算法</span><br>compress lz4-v2<br><span class="hljs-comment">#推送客户端使用lz4-v2算法</span><br>push <span class="hljs-string">&quot;compress lz4-v2&quot;</span><br><span class="hljs-comment">#最大客户端数</span><br>max-clients 100<br><span class="hljs-comment">#运行openvpn的用户和用户组</span><br>user openvpn<br>group openvpn<br><span class="hljs-comment">#状态日志</span><br>status  /data/openvpn/logs/openvpn-status.log<br>log-append /data/openvpn/logs/openvpn.log<br><span class="hljs-comment">#日志级别</span><br>verb 3<br>mute 20<br><span class="hljs-comment">#__server.conf—end___</span><br><br><br><span class="hljs-comment">#内核转发规则</span><br>root<span class="hljs-comment"># echo &quot;net.ipv4.ip_forward=1&quot; &gt;&gt;/etc/sysctl.conf</span><br>root<span class="hljs-comment"># sysctl -p</span><br><br><span class="hljs-comment">#iptablesNAT规则 </span><br><span class="hljs-comment">#这里的ip就是server.conf 中的server 10.8.0.0 255.255.255.0 ;添加转发规则到开机启动项</span><br>root<span class="hljs-comment"># echo &#x27;iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE&#x27; &gt;&gt; /etc/rc.d/rc.local</span><br>root<span class="hljs-comment"># chmod +x /etc/rc.d/rc.local</span><br>root<span class="hljs-comment"># /etc/rc.d/rc.local</span><br></code></pre></td></tr></table></figure><h3 id="启动OpenVPN"><a href="#启动OpenVPN" class="headerlink" title="启动OpenVPN"></a>启动OpenVPN</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建启动文件</span><br>root<span class="hljs-comment"># vim /etc/systemd/system/openvpn.service</span><br>[Unit]<br>Description=OpenVPN Server<br>After=network.target<br>After=syslog.target<br><br>[Install]<br>WantedBy=multi-user.target<br><br>[Service]<br>ExecStart=/data/openvpn/sbin/openvpn --config /data/openvpn/server.conf<br><br><br><span class="hljs-comment">#加载系统服务</span><br>root<span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment">#开机启动</span><br>root<span class="hljs-comment"># systemctl enable openvpn.service</span><br><span class="hljs-comment">#启动服务</span><br>root<span class="hljs-comment"># systemctl start openvpn.service</span><br><span class="hljs-comment">#查看服务运行状态</span><br>root<span class="hljs-comment"># systemctl status openvpn.service</span><br></code></pre></td></tr></table></figure><h2 id="客户端文件配置"><a href="#客户端文件配置" class="headerlink" title="客户端文件配置"></a>客户端文件配置</h2><h3 id="准备客户端证书"><a href="#准备客户端证书" class="headerlink" title="准备客户端证书"></a>准备客户端证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1）创建客户端申请证书</span><br>root<span class="hljs-comment"># cp -r  /data/EasyRSA /data/openvpn/easy-rsa-client</span><br>root<span class="hljs-comment"># cd  /data/openvpn/easy-rsa-client</span><br><span class="hljs-comment">#初始化，执行此命令会生成pki目录</span><br>root<span class="hljs-comment"># ./easyrsa init-pki</span><br><span class="hljs-comment">#创建客户端申请证书,我这里用的是名字全拼</span><br>root<span class="hljs-comment"># ./easyrsa gen-req zhangsan nopass</span><br><span class="hljs-comment">#直接回车就行</span><br>Common Name (eg: your user, host, or server name) [zhangsan]:<br>    req: /data/openvpn/easy-rsa-client/pki/reqs/zhangsan.req<br>    key: /data/openvpn/easy-rsa-client/pki/private/zhangsan.key<br><br><span class="hljs-comment">#2）服务端签发证书</span><br>root<span class="hljs-comment"># cd /data/openvpn/easy-rsa-server</span><br><span class="hljs-comment">#将客户端证书复制到CA工作目录</span><br>root<span class="hljs-comment"># ./easyrsa import-req /data/openvpn/easy-rsa-client/pki/reqs/zhangsan.req zhangsan</span><br><span class="hljs-comment">#设置客户端证书有效期，我这里设置的是90天</span><br>root<span class="hljs-comment"># sed -i &quot;s/set_var EASYRSA_CERT_EXPIRE.*$/set_var EASYRSA_CERT_EXPIRE\t90/g&quot; ./vars</span><br><span class="hljs-comment">#签发证书</span><br>root<span class="hljs-comment"># ./easyrsa sign client zhangsan</span><br><span class="hljs-comment">#输入yes</span><br>Type the word <span class="hljs-string">&#x27;yes&#x27;</span> to <span class="hljs-built_in">continue</span>, or any other input to abort.<br>  Confirm request details:<span class="hljs-built_in">yes</span><br>  <span class="hljs-comment">#生成的证书</span><br>  Certificate created at: /data/openvpn/easy-rsa-server/pki/issued/zhangsan.crt<br><br></code></pre></td></tr></table></figure><h3 id="准备客户端配置文件"><a href="#准备客户端配置文件" class="headerlink" title="准备客户端配置文件"></a>准备客户端配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#创建存放目录</span><br>root<span class="hljs-comment"># mkdir /data/openvpn/client/</span><br><span class="hljs-comment">#创建张三证书存放的目录</span><br>root<span class="hljs-comment"># mkdir /data/openvpn/client/zhangsan</span><br><span class="hljs-comment">#复制证书</span><br>root<span class="hljs-comment"># find /data/openvpn/ \( -name &quot;zhangsan.key&quot; -o -name &quot;zhangsan.crt&quot; -o -name &quot;ca.crt&quot; -o -name &quot;ta.key&quot; \) -exec cp &#123;&#125;  /data/openvpn/client/zhangsan \;</span><br><br>root<span class="hljs-comment"># vim /data/openvpn/client/zhangsan/client.ovpn</span><br>client<br>dev tun<br>proto tcp<br>remote 124.70.49.106 1194<br>resolv-retry infinite<br>nobind<br>ca ca.crt<br>cert zhangsan.crt<br>key zhangsan.key<br>remote-cert-tls server<br>tls-auth ta.key 1<br>cipher AES-256-CBC<br>verb 3<br>compress lz4-v2<br></code></pre></td></tr></table></figure><h2 id="将证书下载下来"><a href="#将证书下载下来" class="headerlink" title="将证书下载下来"></a>将证书下载下来</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root<span class="hljs-comment"># cd /data/openvpn/client/</span><br>root<span class="hljs-comment"># tar -zcvf zhangsan.tar.gz zhangsan </span><br>root<span class="hljs-comment"># sz zhangsan.tar.gz</span><br></code></pre></td></tr></table></figure><h2 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">官网下载地址：<br>    openvpn 服务端下载地址：<br>        https://swupdate.openvpn.org/community/releases/openvpn-2.5.6.tar.gz<br>    openvpn 客户端下载地址：<br>        https://swupdate.openvpn.org/community/releases/openvpn-install-2.4.5-I601.exe<br>    EasyRSA下载地址：<br>        https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.8/EasyRSA-3.0.8.tgz<br><br></code></pre></td></tr></table></figure><h1 id="mysql如何实现崩溃后恢复"><a href="#mysql如何实现崩溃后恢复" class="headerlink" title="mysql如何实现崩溃后恢复"></a>mysql如何实现崩溃后恢复</h1><h2 id="MySQL数据库崩溃可能是由于以下原因所导致的："><a href="#MySQL数据库崩溃可能是由于以下原因所导致的：" class="headerlink" title="MySQL数据库崩溃可能是由于以下原因所导致的："></a>MySQL数据库崩溃可能是由于以下原因所导致的：</h2><ol><li>硬件故障：如电源故障、硬盘坏道等。</li><li>操作系统故障：如操作系统崩溃、系统资源不足等。</li><li>网络故障：如网络中断、网络延迟等。</li><li>软件故障：如MySQL服务崩溃、MySQL配置错误等。</li></ol><h2 id="MySQL数据库恢复的方法"><a href="#MySQL数据库恢复的方法" class="headerlink" title="MySQL数据库恢复的方法"></a>MySQL数据库恢复的方法</h2><p>当MySQL数据库发生崩溃时，我们需要采取一些措施来恢复数据。下面是一些常见的MySQL数据库恢复方法：</p><ol><li>备份恢复：如果你有备份，可以使用备份文件来恢复数据。在MySQL崩溃后，你可以使用备份文件来恢复数据库。</li><li>log日志文件来恢复数据。</li><li>noDBnoDBnoDB引擎，那么可以使用MySQL的崩溃恢复机制来恢复数据。</li><li>使用MyISAM引擎：MyISAM是MySQL的另一种存储引擎，它不支持事务和崩溃恢复。如果你使用的是MyISAM引擎，那么可以使用MySQL的修复命令来恢复数据。</li><li>Toolkit可以用来恢复MySQL数据库。</li></ol><h2 id="如何预防MySQL数据库崩溃"><a href="#如何预防MySQL数据库崩溃" class="headerlink" title="如何预防MySQL数据库崩溃"></a>如何预防MySQL数据库崩溃</h2><p>当然，最好的方法是预防MySQL数据库崩溃。以下是一些预防措施：</p><ol><li>定期备份数据：定期备份数据是非常重要的，可以确保你有备份文件可用于恢复数据。</li><li>优化MySQL配置：优化MySQL配置可以提高MySQL的性能和稳定性，从而减少MySQL崩溃的可能性。</li><li>使用监控工具：使用监控工具可以实时监测MySQL的状态，及时发现问题并采取措施。</li><li>使用合适的存储引擎：选择合适的存储引擎可以提高MySQL的性能和稳定性，从而减少MySQL崩溃的可能性。</li></ol><h1 id="myisam和innodb"><a href="#myisam和innodb" class="headerlink" title="myisam和innodb"></a>myisam和innodb</h1><p><strong>InnoDB和MyISAM对比</strong></p><ol><li>事务和外键<ul><li>InnoDB支持事务和外键，具有安全性和完整性，适合大量insert或update操作</li><li>MyISAM不支持事务和外键，它提供高速存储和检索，适合大量的select查询操作</li></ul></li><li>锁机制<ul><li> InnoDB支持行级锁，锁定指定记录。基于索引来加锁实现</li><li> MyISAM支持表级锁，锁定整张表</li></ul></li><li>索引结构<ul><li>InnoDB使用聚集索引（聚簇索引），索引和记录在一起存储，既缓存索引，也缓存记录</li><li> MyISAM使用非聚集索引（非聚簇索引），索引和记录分开</li></ul></li><li>并发处理能力<ul><li> MyISAM使用表锁，会导致写操作并发率低，读之间并不阻塞，读写阻塞</li><li> InnoDB读写阻塞可以与隔离级别有关，可以采用多版本并发控制（MVCC）来支持高并发</li></ul></li><li>存储文件<ul><li> InnoDB表对应两个文件，一个.frm表结构文件，一个.ibd数据文件, InnoDB表最大支持64TB</li><li> MyISAM表对应三个文件，一个.frm表结构文件，一个MYD表数据文件，一个.MYI索引文件。从 MySQL5.0开始默认限制是256TB</li></ul></li></ol><p><strong>适用场景</strong></p><ol><li>MyISAM<ul><li>不需要事务支持（不支持）</li><li>并发相对较低（锁定机制问题）</li><li>数据修改相对较少，以读为主</li><li>数据一致性要求不高</li></ul></li><li>InnoDB<ul><li>需要事务支持（具有较好的事务特性）</li><li>行级锁定对高并发有很好的适应能力</li><li>数据更新较为频繁的场景</li><li>数据一致性要求较高</li><li>硬件设备内存较大，可以利用InnoDB较好的缓存能力来提高内存利用率，减少磁盘IO</li></ul></li></ol><p><strong>总结</strong></p><p>两种引擎该如何选择？</p><ul><li><p>是否需要事务？有，InnoDB</p></li><li><p>是否存在并发修改？有，InnoDB</p></li><li><p>是否追求快速查询，且数据修改少？是，MyISAM</p></li><li><p>在绝大多数情况下，推荐使用InnoDB</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux_5</title>
    <link href="/2023/07/12/Linux-5/"/>
    <url>/2023/07/12/Linux-5/</url>
    
    <content type="html"><![CDATA[<h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><p><code>sudo</code>允许系统管理员让普通用户执行一些或者全部的root命令。</p><p><code>sudo</code>特性：</p><ul><li>sudo能够授权指定用户在指定主机上运行某些命令。如果未授权用户尝试使用 sudo，会提示联系管理员</li><li>sudo提供了丰富的日志，详细地记录了每个用户千了什么。它能够将日志传到中心主机或者日志服务器</li><li>sudo使用时间戳文件来执行类似的”检票”系统。当用户调用sudo并且输入它的密码时，用户获得了一张存活期为5分钟的票</li><li>sudo的配置文件是sudoers文件，它允许系统管理员集中的管理用户的使用权限和使用的主机。它所存放的位置默认是在/etc/sudoers，属性必须为0440</li></ul><h2 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">/etc/sudo.conf<br></code></pre></td></tr></table></figure><h2 id="授权规则配置文件："><a href="#授权规则配置文件：" class="headerlink" title="授权规则配置文件："></a>授权规则配置文件：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/sudoers<br>/etc/sudoers.d<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">?任意单一字符<br>*匹配任意长度字符<br>[wxc] 匹配其中一个字符<br>[!wxc]除了这三个字符的其它字符<br>\x转义<br><span class="hljs-string">[[alpha]]</span>字母<br></code></pre></td></tr></table></figure><p>sudoers授权规则格式：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span> <span class="hljs-title">host</span> = (runas) command<br>用户 登入主机=（代表用户） 命令<br></code></pre></td></tr></table></figure><p>范例：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">root<span class="hljs-keyword">ALL</span>=(<span class="hljs-keyword">ALL</span>)<span class="hljs-keyword">ALL</span><br></code></pre></td></tr></table></figure><p>格式说明：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">user:</span>运行命令者的身份<br><span class="hljs-symbol">host:</span>通过那些主机<br>(runas)：以那个用户的身份<br>command：运行那些命令<br></code></pre></td></tr></table></figure><h2 id="语法检查工具"><a href="#语法检查工具" class="headerlink" title="语法检查工具"></a>语法检查工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/sbin/visudo<br></code></pre></td></tr></table></figure><h2 id="授权编辑规则文件的工具"><a href="#授权编辑规则文件的工具" class="headerlink" title="授权编辑规则文件的工具:"></a>授权编辑规则文件的工具:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/sudoedit<br></code></pre></td></tr></table></figure><h2 id="执行授权命令"><a href="#执行授权命令" class="headerlink" title="执行授权命令:"></a>执行授权命令:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/sudo<br></code></pre></td></tr></table></figure><h2 id="时间戳文件"><a href="#时间戳文件" class="headerlink" title="时间戳文件:"></a>时间戳文件:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/db/sudo<br></code></pre></td></tr></table></figure><h2 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件:"></a>日志文件:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/log/secure<br></code></pre></td></tr></table></figure><h1 id="PAM"><a href="#PAM" class="headerlink" title="PAM"></a>PAM</h1><h2 id="PAM-配置文件格式说明"><a href="#PAM-配置文件格式说明" class="headerlink" title="PAM 配置文件格式说明"></a>PAM 配置文件格式说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#通用配置文件/etc/pam.conf格式,此格式不使用</span><br>application <span class="hljs-built_in">type</span> control module-path arguments<br><br><span class="hljs-comment">#专用配置文件/etc/pam.d/APP_NAME 格式</span><br><span class="hljs-comment">#注意：如/etc/pam.d存在，/etc/pam.conf将失效</span><br><span class="hljs-built_in">type</span> control module-path arguments<br><br>application：指服务名，如：telnet、login、ftp等，服务名字“OTHER”代表所有没有在该文件中明确配置的其它服务<br><span class="hljs-built_in">type</span>：       指模块类型，即功能<br>control ：   PAM库该如何处理与该服务相关的PAM模块的成功或失败情况，一个关健词实现<br>module-path：用来指明本模块对应的程序文件的路径名<br>Arguments：  用来传递给该模块的参数<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：修改PAM配置文件将马上生效</p><p><strong>建议</strong>：编辑pam规则时，保持至少打开一个root会话，以防止root身份验证错误</p><h2 id="模块类型"><a href="#模块类型" class="headerlink" title="模块类型"></a>模块类型</h2><ul><li>Auth 账号的认证和授权</li><li>Account 帐户的有效性，与账号管理相关的非认证类的功能，如：用来限制/允许用户对某个服务的访问时间，限制用户的位置(例如：root用户只能从控制台登录)</li><li>Password 用户修改密码时密码复杂度检查机制等功能</li><li>Session 用户会话期间的控制，如：最多打开的文件数，最多的进程数等</li><li>-type 表示因为缺失而不能加载的模块将不记录到系统日志,对于那些不总是安装在系统上的模块有用</li></ul><h2 id="control"><a href="#control" class="headerlink" title="control"></a>control</h2><ul><li>required ：一票否决，表示本模块必须返回成功才能通过认证，但是如果该模块返回失败，失败结果也不会立即通知用户，而是要等到同一type中的所有模块全部执行完毕，再将失败结果返回给应用程序，即为必要条件</li><li>requisite ：一票否决，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一type内的任何模块，而是直接将控制权返回给应用程序。是一个必要条件</li><li>sufficient ：一票通过，表明本模块返回成功则通过身份认证的要求，不必再执行同一type内的其它模块，但如果本模块返回失败可忽略，即为充分条件，优先于前面的required和requisite</li><li>optional ：表明本模块是可选的，它的成功与否不会对身份认证起关键作用，其返回值一般被忽略</li><li>include： 调用其他的配置文件中定义的配置信息</li></ul><h2 id="module-path"><a href="#module-path" class="headerlink" title="module-path"></a>module-path</h2><ul><li>模块文件所在绝对路径：</li><li>模块文件所在相对路径：/lib64/security目录下的模块可使用相对路径，如：pam_shells.so、pam_limits.so</li><li>有些模块有自已的专有配置文件，在/etc/security/*.conf目 录下</li></ul><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><ul><li>debug ：该模块应当用syslog( )将调试信息写入到系统日志文件中</li><li>no_warn ：表明该模块不应把警告信息发送给应用程序</li><li>use_first_pass ：该模块不能提示用户输入密码，只能从前一个模块得到输入密码</li><li>try_first_pass ：该模块首先用前一个模块从用户得到密码，如果该密码验证不通过，再提示用户输入新密码</li><li>use_mapped_pass 该模块不能提示用户输入密码，而是使用映射过的密码</li><li>expose_account 允许该模块显示用户的帐号名等信息，一般只能在安全的环境下使用，因为泄漏用户名会对安全造成一定程度的威胁</li></ul><h2 id="chrony搭建私有ntp服务"><a href="#chrony搭建私有ntp服务" class="headerlink" title="chrony搭建私有ntp服务"></a>chrony搭建私有ntp服务</h2><p><img src="NTP_1.png" alt="NTP_1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># hostname -I</span><br>10.0.0.131 <br><br>[root@localhost ~]<span class="hljs-comment"># yum -y install chrony</span><br>CentOS- - PowerTools - mirrors.aliyun.com                                                    7.8 kB/s | 4.3 kB     00:00    <br>Package chrony-4.2-1.el8.rocky.1.0.x86_64 is already installed.<br>Dependencies resolved.<br>Nothing to <span class="hljs-keyword">do</span>.<br>Complete!<br><br>[root@centos8 ~]<span class="hljs-comment">#vim /etc/chrony.conf</span><br>server ntp.aliyun.com iburst<br>server ntp1.aliyun.com iburst<br>server ntp2.aliyun.com iburst<br><br>allow 0.0.0.0/0  <span class="hljs-comment">#加此行,指定允许同步的网段</span><br><br><span class="hljs-built_in">local</span> stratum 10 <span class="hljs-comment">#删除此行注释,当互联网无法连接,仍然可以为客户端提供时间同步服务</span><br><br>[root@localhost ~]<span class="hljs-comment"># systemctl restart chronyd</span><br><br><span class="hljs-comment">#服务启动后会打开端口123/udp</span><br>[root@localhost ~]<span class="hljs-comment"># ss -ntlu</span><br>Netid       State        Recv-Q       Send-Q             Local Address:Port             Peer Address:Port      Process       <br>udp         UNCONN       0            0                      127.0.0.1:323                   0.0.0.0:*                       <br>udp         UNCONN       0            0                        0.0.0.0:123                   0.0.0.0:*                       <br>udp         UNCONN       0            0                          [::1]:323                      [::]:*                       <br>tcp         LISTEN       0            128                      0.0.0.0:22                    0.0.0.0:*                       <br>tcp         LISTEN       0            128                         [::]:22                       [::]:*   <br><br><br><span class="hljs-comment">#客户端配置</span><br>[root@centos7 ~]<span class="hljs-comment">#vim /etc/chrony.conf</span><br>server 10.0.0.131 iburst<br>[root@centos7 ~]<span class="hljs-comment">#systemctl restart chronyd.service </span><br><span class="hljs-comment">#确认同步成功</span><br>[root@centos7 ~]<span class="hljs-comment">#chronyc sources -vn</span><br></code></pre></td></tr></table></figure><h1 id="CDN原理"><a href="#CDN原理" class="headerlink" title="CDN原理"></a>CDN原理</h1><ol><li>用户向浏览器输入<a href="http://www.a.com这个域名,浏览器第一次发现本地没有dns缓存,则向网站的dns服务器请求/">www.a.com这个域名，浏览器第一次发现本地没有dns缓存，则向网站的DNS服务器请求</a></li><li>网站的DNS域名解析器设置了CNAME，指向了<a href="http://www.a.tbcdn.com请求指向了cdn网络中的智能dns负载均衡系统/">www.a.tbcdn.com请求指向了CDN网络中的智能DNS负载均衡系统</a></li><li>智能DNS负载均衡系统解析域名，把对用户响应速度最快的IP节点返回给用户</li><li>用户向该IP节点(CDN服务器) 发出请求</li><li>由于是第一次访问，CDN服务器会通过Cache内部专用DNS解析得到此域名的原web站点IP，向原站点服务器发起请求，并在CDN服务器上缓存内容</li><li>请求结果发给用户</li></ol><h1 id="搭建智能DNS，实现不同地域客户端解析到不同主机"><a href="#搭建智能DNS，实现不同地域客户端解析到不同主机" class="headerlink" title="搭建智能DNS，实现不同地域客户端解析到不同主机"></a>搭建智能DNS，实现不同地域客户端解析到不同主机</h1><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">需要五台主机<br>DNS主服务器和web服务器1: 10.0.0.8/24，172.16.0.8/16<br>web服务器2: 10.0.0.7/24<br>web服务器3: 172.16.0.7/16<br>DNS客户端1: 10.0.0.6/24<br>DNS客户端2: 172.16.0.6/16<br><br>关闭SETinux<br>关闭防火墙<br>时间同步<br></code></pre></td></tr></table></figure><h3 id="DNS服务器的网卡配置"><a href="#DNS服务器的网卡配置" class="headerlink" title="DNS服务器的网卡配置"></a>DNS服务器的网卡配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#配置两个IP地址</span><br><span class="hljs-comment">#eth0: 10.0.0.8/24</span><br><span class="hljs-comment">#eth1: 172.16.0.8/16</span><br></code></pre></td></tr></table></figure><h3 id="主DNS服务端配置文件实现-view"><a href="#主DNS服务端配置文件实现-view" class="headerlink" title="主DNS服务端配置文件实现 view"></a>主DNS服务端配置文件实现 view</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum insta11 <span class="hljs-built_in">bind</span> -y<br><br>vim /etc/named.conf<br><span class="hljs-comment">#在文件最前面加下面行</span><br>ac1 beijingnet &#123;<br>10.0.0.0/24;<br>&#125;;<br>ac1 shanghainet &#123;<br>172.16.0.0/16;<br>&#125;<br>acl othernet &#123;<br>any<br>&#125;<br><br><span class="hljs-comment">#注释掉下面两行</span><br>// listen-on port 53 &#123; 127.0.0.1; &#125;;<br>// a11ow-query &#123; localhost; &#125;;<br><br><span class="hljs-comment">#其它略</span><br><br><span class="hljs-comment"># 创建view</span><br>view beijingview &#123;<br>match-clients  &#123; beijingnet;&#125;;<br>include <span class="hljs-string">&quot;/etc/named.rfc1912.zones.bj&quot;</span><br>&#125;;<br><br>view shanghaiview &#123;<br>match-clients &#123; shanghainet;&#125;;<br>include <span class="hljs-string">&quot;/etc/named.rfc1912 zones.sh&quot;</span>;<br>&#125;;<br><br>view otherview &#123;<br>match-clients &#123; othernet;&#125;;<br>include <span class="hljs-string">&quot;/etc/named.rfc1912.zones.other&quot;</span>;<br>&#125;;<br>include <span class="hljs-string">&quot;/etc/named.root.key&quot;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="实现区域配置文件"><a href="#实现区域配置文件" class="headerlink" title="实现区域配置文件"></a>实现区域配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/named.rfc1912.zones.bj<br>zone <span class="hljs-string">&quot;.&quot;</span> IN &#123;<br><span class="hljs-built_in">type</span> hint;<br>file <span class="hljs-string">&quot;named.ca&quot;</span>;<br>&#125;;<br>zone <span class="hljs-string">&quot;magedu .org&quot;</span> &#123;<br><span class="hljs-built_in">type</span> master;<br>file <span class="hljs-string">&quot;magedu.org.zone.bj&quot;</span>;<br>&#125;;<br><br>vim /etc/named.rfc1912.zones.sh<br>zone <span class="hljs-string">&quot;.&quot;</span> IN &#123;<br><span class="hljs-built_in">type</span> hint;<br>file <span class="hljs-string">&quot;named.ca&quot;</span>;<br>&#125;;<br>zone <span class="hljs-string">&quot;magedu.org&quot;</span> &#123;<br><span class="hljs-built_in">type</span> master;<br>file <span class="hljs-string">&quot;magedu.org.zone.sh&quot;</span>;<br>&#125;;<br>vim /etc/named.rfc1912.zones.other<br>zone <span class="hljs-string">&quot;.&quot;</span> IN &#123;<br><span class="hljs-built_in">type</span> hint;<br>file <span class="hljs-string">&quot;named.ca&quot;</span>;<br>&#125;;<br>zone <span class="hljs-string">&quot;magedu .org” &#123;</span><br><span class="hljs-string">type master;</span><br><span class="hljs-string">file &quot;</span>magedu.org.zone.other<span class="hljs-string">&quot;;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">chgrp named /etc/named.rfc1912.zones.bj</span><br><span class="hljs-string">chgrp named /etc/named.rfc1912.zones.sh</span><br><span class="hljs-string">chgrp named /etc/named.rfc1912.zones.other</span><br></code></pre></td></tr></table></figure><h3 id="创建区域数据库文件"><a href="#创建区域数据库文件" class="headerlink" title="创建区域数据库文件"></a>创建区域数据库文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /var/named/magedu.org.zone.bj<br><span class="hljs-variable">$TTL</span> 1D<br>@IN SOA master admin.magedu.org. (<br>2019042214 ; serial<br>1D ; refresh<br>1H ; retry<br>1W ; expire<br>3H ) ; minimum<br>NSmaster<br>masterA10.0.0.8<br>websrvA10.0.0.7<br>wwwCNAME  websrv<br><br>vim /var/named/magedu.org.zone.sh<br><span class="hljs-variable">$TTL</span> 1D<br>@IN SOA master admin.magedu.org. (<br>2019042214 ; serial<br>1D ; refresh<br>1H ; retry<br>1W ; expire<br>3H ) ; minimum<br>NSmaster<br>masterA10.0.0.8<br>websrvA172.16.0.7<br>wwwCNAME  websrv<br><br>vim /var/named/magedu.org.zone.other<br><span class="hljs-variable">$TTL</span> 1D<br>@IN SOA master admin.magedu.org. (<br>2019042214 ; serial<br>1D ; refresh<br>1H ; retry<br>1W ; expire<br>3H ) ; minimum<br>NSmaster<br>masterA10.0.0.8<br>websrvA127.0.0.1<br>wwwCNAME  websrv<br><br><span class="hljs-built_in">chgrp</span> named /var/named/magedu.org.zone.bj<br><span class="hljs-built_in">chgrp</span> named /var/named/magedu.org.zone.sh<br><span class="hljs-built_in">chgrp</span> named /var/named/magedu.org.zone.other<br><br>systemct1 start named<span class="hljs-comment">#第一次启动服务</span><br>rndc reload<span class="hljs-comment">#不是第一次启动服务</span><br><br></code></pre></td></tr></table></figure><h3 id="实现位于不同区域的三个WEB服务器"><a href="#实现位于不同区域的三个WEB服务器" class="headerlink" title="实现位于不同区域的三个WEB服务器"></a>实现位于不同区域的三个WEB服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#分别在三台主机上安装http服务</span><br><span class="hljs-comment">#在web服务器1: 10.0.0.8/24实现</span><br>yum insta11 httpd<br><span class="hljs-built_in">echo</span> www.magedu.org <span class="hljs-keyword">in</span> other &gt; /var/www/html/index.html<br>systemct1 start httpd<br><span class="hljs-comment">#在web服务器2: 10.0.0.7/16</span><br><span class="hljs-built_in">echo</span> www.magedu.org <span class="hljs-keyword">in</span> Beijing &gt; /var/www/html/index.html<br>systemct1 start httpd<br><span class="hljs-comment">#在web服务器3: 172.16.0.7/16</span><br>yum install httpd<br><span class="hljs-built_in">echo</span> www.magedu.org <span class="hljs-keyword">in</span> shanghai &gt; /var/www/html/index.html<br>systemctl start httpd<br><br></code></pre></td></tr></table></figure><h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#分别在三台主机上访问</span><br><span class="hljs-comment">#DNS客户端1: 10.0.0.6/24 实现，确保DNS指向10.0.0.8</span><br>curl www.magedu.org<br>www.magedu.org <span class="hljs-keyword">in</span> Beijing<br><span class="hljs-comment">#DNS客户端2: 172.16.0.6/16实现，确保DNS指向172.16.0.8</span><br>curl www.magedu.org<br>www.magedu.org <span class="hljs-keyword">in</span> shanghai<br><span class="hljs-comment">#DNS客户端3: 10.0.0.8实现，，确保DNS指向127.0.0.1</span><br>curl www.magedu.org<br>www.magedu.org <span class="hljs-keyword">in</span> other<br></code></pre></td></tr></table></figure><h1 id="DNS解析流程"><a href="#DNS解析流程" class="headerlink" title="DNS解析流程"></a>DNS解析流程</h1><p>DNS 域名解析，简单地说就是把域名翻译成 IP 地址。例如：把 <a href="http://www.baidu.com/">www.baidu.com</a> 这个域名翻译成对应 IP 220.181.38.251，这里只是举个例子。</p><p><img src="DNS_1.jpg" alt="DNS_1"></p><p>​    图中分 8 个步骤介绍了域名解析的流程，但在此之前会先检查本机的缓存配置+ hosts 解析，然后才真正执行上图的流程：</p><p><strong>浏览器缓存检查</strong></p><p>​    浏览器会首先搜索浏览器自身的 DNS 缓存，缓存时间比较短，大概只有1分钟，且只能容纳 1000 条缓存，看自身的缓存中是否有对应的条目，而且没有过期，如果有且没有过期则解析到此结束。</p><p><strong>操作系统缓存检查 + hosts 解析</strong></p><p>​    如果浏览器的缓存里没有找到对应的条目，操作系统也会有一个域名解析的过程，那么浏览器先搜索操作系统的 DNS 缓存中是否有这个域名对应的解析结果，如果找到且没有过期则停止搜索，解析到此结束。</p><p>​    在 Linux 中可以通过 /etc/hosts 文件来设置，可以将任何域名解析到任何能够访问的IP 地址。如果在这里指定了一个域名对应的 IP 地址，那么浏览器会首先使用这个 IP地址。当解析到这个配置文件中的某个域名时，操作系统会在缓存中缓存这个解析结果，缓存的时间同样是受这个域名的失效时间和缓存的空间大小控制的。</p><ul><li>第一步</li></ul><p>​    客户端通过浏览器访问域名为 <a href="http://www.baidu.com/">www.baidu.com</a> (<a href="http://www.baidu.com/">http://www.baidu.com</a>) 的网站，发起查询该域名的 IP 地址的 DNS 请求。该请求发送到了本地 DNS 服务器上。本地 DNS 服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果。如果没有，本地 DNS 服务器还要向 DNS 根服务器进行查询。</p><ul><li>第二步</li></ul><p>​    本地 DNS 服务器向根服务器发送 DNS 请求，请求域名为 <a href="http://www.baidu.com/">www.baidu.com</a> (<a href="http://www.baidu.com/">http://www.baidu.com</a>) 的 IP 地址。</p><ul><li>第三步</li></ul><p>根服务器经过查询，没有记录该域名及 IP 地址的对应关系。但是会告诉本地 DNS 服务器，可以到域名服务器上继续查询，并给出域名服务器的地址(.com 服务器)。</p><ul><li>第四步</li></ul><p>本地 DNS 服务器向 .com 服务器发送 DNS 请求，请求域名 <a href="http://www.baidu.com/">www.baidu.com</a> (<a href="http://www.baidu.com/">http://www.baidu.com</a>) 的 IP 地址。</p><ul><li>第五步</li></ul><p>com 服务器收到请求后，不会直接返回域名和 IP 地址的对应关系，而是告诉本地DNS 服务器，该域名可以在 baidu.com 域名服务器上进行解析获取 IP 地址，并告诉 baidu.com 域名服务器的地址。</p><ul><li>第六步</li></ul><p>本地 DNS 服务器向 baidu.com 域名服务器发送 DNS 请求，请求域名 <a href="http://www.baidu.com/">www.baidu.com</a> (<a href="http://www.baidu.com/">http://www.baidu.com</a>) 的 IP 地址。</p><ul><li>第七步</li></ul><p>baidu.com 服务器收到请求后，在自己的缓存表中发现了该域名和 IP 地址的对应关系，并将 IP 地址返回给本地 DNS 服务器。</p><ul><li>第八步</li></ul><p>本地 DNS 服务器将获取到与域名对应的 IP 地址返回给客户端，并且将域名和 IP 地址的对应关系保存在缓存中，以备下次别的用户查询时使用。</p><h1 id="iptables五表五链"><a href="#iptables五表五链" class="headerlink" title="iptables五表五链"></a>iptables五表五链</h1><p><strong>五表</strong></p><ul><li>filter：过滤规则表，根据预定义的规则过滤符合条件的数据包（默认表）</li><li>nat：地址转换规则表</li><li>mangle：修改数据标记位规则表</li><li>raw：关闭启用的连接跟踪机制，加快封包穿越防火墙速度</li><li>security：用于强制访问控制（MAC）网络规则，由 Linux 安全模块（如 SELinux）实现</li></ul><p>优先级顺序：</p><p><strong>security</strong> –&gt; <strong>raw</strong> –&gt; <strong>mangle</strong> –&gt; <strong>nat</strong> –&gt; <strong>filter</strong></p><p><strong>五链</strong></p><p>规则链（chain）名或者说五个钩子函数（hook functions）包括：</p><ul><li>INPUT链：处理输入数据包</li><li>OUTPUT链：处理输出数据包</li><li>FORWARD链：处理转发数据包</li><li>PREROUTING链：用于目标地址转换（DNAT）</li><li>POSTOUTING链：用于源地址转换（SNAT）</li></ul><p>数据报文的流向：</p><ul><li>到本机某进程的报文：PREROUTING –&gt; INPUT</li><li>由本机转发的报文：PREROUTING –&gt; FORWARD –&gt; POSTROUTING</li><li>由本机的某进程发出报文（通常为响应报文）：OUTPUT –&gt; POSTROUTING</li></ul><p><strong>表与链</strong></p><table><thead><tr><th></th><th>raw</th><th>mangle</th><th>nat</th><th>filter</th><th>security</th></tr></thead><tbody><tr><td>PREROUTING</td><td>✓</td><td>✓</td><td>✓</td><td></td><td></td></tr><tr><td>INPUT</td><td></td><td>✓</td><td></td><td>✓</td><td></td></tr><tr><td>FORWARD</td><td></td><td>✓</td><td></td><td>✓</td><td></td></tr><tr><td>OUTPUT</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td></td></tr><tr><td>POSTROUTING</td><td></td><td>✓</td><td>✓</td><td></td><td></td></tr></tbody></table><h1 id="防火墙实验"><a href="#防火墙实验" class="headerlink" title="防火墙实验"></a>防火墙实验</h1><p>iptables/firewalld/nftable 实现主机防火墙。5000-6000 端口仅 192.168.0.0/24 网段内的主机访问</p><p>Iptables</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -p tcp --dport 5000:6000 ! -s 192.168.0.0/24 -j REJECT<br></code></pre></td></tr></table></figure><p>firewalld</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewalld-cmd --permanent --zone=public --add-rich-rule=<span class="hljs-string">&#x27;rule family=ipv4 source address=192.168.0.0/24 port port=5000-6000 accept&#x27;</span> <br></code></pre></td></tr></table></figure><h1 id="mysql的发行版"><a href="#mysql的发行版" class="headerlink" title="mysql的发行版"></a>mysql的发行版</h1><p>常见 MySQL 发行版本：</p><ul><li>MySQL 官方版本：分为社区版和企业版，企业版性能略强，提供了更多的功能和工具</li><li>Percona MySQL：基于官方社区版本二次开发，增加了一些 MySQL 官方企业版才有的功能，同时对官方社区版进行了一些优化</li><li>MariaDB：MySQL 初创者开发，很大程度上兼容 MySQL，可以很容易的将数据从 MySQL 迁移到 MariaDB 上</li></ul><h1 id="mysql索引的作用"><a href="#mysql索引的作用" class="headerlink" title="mysql索引的作用"></a>mysql索引的作用</h1><p>索引是对数据库表中一列或者多列的值进行排序的一种结构，就像是一本书的目录，使用索引可以快速访问数据表中的特定信息，提高数据查询效率</p><p>使用索引可以：</p><ol><li>大大加快数据检索的速度 </li><li>加速表和表之间的连接 </li><li>将随机I/O变成顺序I/O</li><li>帮助引擎层避免排序和临时表</li></ol><h1 id="mysql-btree索引的原理"><a href="#mysql-btree索引的原理" class="headerlink" title="mysql btree索引的原理"></a>mysql btree索引的原理</h1><p>B-Tree 结构的数据可以让系统高效的找到数据所在的磁盘块</p><p>B树的特征：</p><ul><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找；</p></li><li><p>自动层次控制；</p><p><img src="B_tree_1.jpg" alt="B_tree_1"></p></li></ul><p>B树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点</p><h1 id="mysql安全加固"><a href="#mysql安全加固" class="headerlink" title="mysql安全加固"></a>mysql安全加固</h1><p>安装部署完 MySQL 服务后，系统提供了一个安全加固脚本 <code>mysql_secure_installation</code>，用以实现：</p><p><strong>安全加固脚本</strong></p><ol><li>设置安全强度密码</li><li>为root用户设置密码</li><li>删除匿名账号</li><li>取消root用户远程登录</li><li>删除test库和对test库的访问权限</li><li>刷新授权表使修改生效  </li></ol><p><strong>低版本安全加固脚本</strong></p><ol><li>为root用户设置密码</li><li>删除匿名账号</li><li>取消root用户远程登录</li><li>删除test库和对test库的访问权限</li><li>刷新授权表使修改生效</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>awk工具</title>
    <link href="/2023/07/03/awk%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/07/03/awk%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="awk工具"><a href="#awk工具" class="headerlink" title="awk工具"></a>awk工具</h1><p><strong>优点</strong></p><ul><li>awk对文本的处理运算效率同比其他工具效率高很多（比shell的for循环高10倍以上，运算比bc计时器也高很多）</li><li>awk默认可对多个空格进行列切分，需要再借助其他工具。</li><li>awk可以对任意多个字符进行列分隔。</li><li>如果文本列很多，可通过NF定位到最后一列获取列数据。</li><li>awk工具处理文本的命令非常丰富，几乎可以看成一套完整的编程语言。</li></ul><p><strong>缺点</strong></p><ul><li>awk无法修改文本文件</li></ul><p><strong>范例</strong>：获取内存信息</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># free -h</span><br>              total        used        free      shared  buff/cache   available<br>Mem:          1.7Gi       737Mi       418Mi       1.0Mi       629Mi       894Mi<br>Swap:         2.0Gi        65Mi       2.0Gi<br>[root@localhost ~]<span class="hljs-comment"># free -h|awk &#x27;/^Mem/&#123;printf&quot;已使用内存:%s\n当前空闲内存:%s\n&quot;,$3,$4&#125;&#x27;</span><br>已使用内存:851Mi<br>当前空闲内存:297Mi<br><br></code></pre></td></tr></table></figure><p><strong>范例</strong>：IP地址信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ip address show eth0 |awk -F&quot; +|/&quot; &#x27;/inet/&#123;printf&quot;IP地址:%s\n&quot;,$3&#125;&#x27; | head -n 1</span><br>IP地址:10.0.0.131<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核编译安装</title>
    <link href="/2023/07/03/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/"/>
    <url>/2023/07/03/Linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux内核"><a href="#Linux内核" class="headerlink" title="Linux内核"></a>Linux内核</h1><p>下载linux内核 <a href="https://www.kernel.org/">https://www.kernel.org/</a></p><p><img src="linux_nh1.png" alt="linux_nh1"></p><p>将下载的内核包上传到linux</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls</span><br>anaconda-ks.cfg  linux-6.1.37.tar.xz<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]yum -y install gcc make ncurses-devel flex bison openssl-devel <br>elfutils-libelf-devel bc perl<br>[root@localhost ~]tar xf linux-5.18.9.tar.xz -C /usr/local/src<br>[root@localhost ~]<span class="hljs-built_in">cd</span> /usr/local/src/linux-5.18.9<br>[root@localhost ~]<span class="hljs-built_in">cp</span> /boot/config-$(<span class="hljs-built_in">uname</span> -r) .config<br>[root@localhost ~]vim .config<br><span class="hljs-comment">#修改下面三行</span><br><span class="hljs-comment"># CONFIG_MODULE_SIG=y #注释此行</span><br>CONFIG_SYSTEM_TRUSTED_KEYS=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-comment">#修改此行</span><br><span class="hljs-comment"># CONFIG_DEBUG_INFO_BTF=y    </span><br><span class="hljs-comment">#更改内核版本名称</span><br>make menuconfigGeneral setup  ➡️  Local version - append to kernel release ➡️ bingo ➡️ save<br>[root@localhost ~]make -j 8    <br>[root@localhost ~]make modules_install<br>[root@localhost ~]make install<br>[root@localhost ~]reboot<br></code></pre></td></tr></table></figure><p><img src="linux_nh2.png" alt="linux_nh2"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>diff_tmp.sh</title>
    <link href="/2023/07/02/diff-tmp-sh/"/>
    <url>/2023/07/02/diff-tmp-sh/</url>
    
    <content type="html"><![CDATA[<h1 id="比较tmp差异"><a href="#比较tmp差异" class="headerlink" title="比较tmp差异"></a>比较tmp差异</h1><h2 id="准备脚本文件"><a href="#准备脚本文件" class="headerlink" title="准备脚本文件"></a>准备脚本文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># vim /data/diff_tmp.sh</span><br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#QQ:                995442478</span><br><span class="hljs-comment">#Date               2023-07-02</span><br><span class="hljs-comment">#FileName:          diff_tmp.sh</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#Author:            fanhaobin</span><br><span class="hljs-comment">#QQ:                995442478</span><br><span class="hljs-comment">#Date               2023-07-02</span><br><span class="hljs-comment">#FileName:          diff_tmp.sh</span><br><span class="hljs-comment">#URL:               https://94fanhaobin.github.io</span><br><span class="hljs-comment">#Description:       The test script</span><br><span class="hljs-comment">#Copyright (C):    2023 All rights reserved</span><br><span class="hljs-comment">#********************************************************************</span><br><br><br><span class="hljs-comment"># 自定义检查间隔</span><br>TIME=<span class="hljs-string">&quot;60&quot;</span><br><span class="hljs-comment"># 自定义检查路径</span><br>DIR=/tmp<br>CMD1=`<span class="hljs-built_in">ls</span> -l <span class="hljs-variable">$&#123;DIR&#125;</span> | grep -E <span class="hljs-string">&#x27;^-&#x27;</span> | <span class="hljs-built_in">wc</span> -l &amp;&amp; <span class="hljs-built_in">sleep</span> <span class="hljs-variable">$&#123;TIME&#125;</span>`<br>CMD2=`<span class="hljs-built_in">ls</span> -l <span class="hljs-variable">$&#123;DIR&#125;</span> | grep -E <span class="hljs-string">&#x27;^-&#x27;</span> | <span class="hljs-built_in">wc</span> -l`<br>NUM1=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;CMD2&#125;</span>-<span class="hljs-variable">$&#123;CMD1&#125;</span> | bc`<br>NUM2=`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;CMD1&#125;</span>-<span class="hljs-variable">$&#123;CMD2&#125;</span> | bc`<br>DATE=`<span class="hljs-built_in">date</span> +%F-%T`<br><br><span class="hljs-keyword">function</span> diff_tmp &#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$&#123;CMD1&#125;</span> -gt <span class="hljs-variable">$&#123;CMD2&#125;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DATE&#125;</span> - <span class="hljs-variable">$&#123;DIR&#125;</span> 文件数量：<span class="hljs-variable">$&#123;CMD2&#125;</span>，减少了 <span class="hljs-variable">$&#123;NUM2&#125;</span>&quot;</span> &gt;&gt; /tmp/diff.log<br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$&#123;CMD1&#125;</span> -lt <span class="hljs-variable">$&#123;CMD2&#125;</span> ]; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DATE&#125;</span> - <span class="hljs-variable">$&#123;DIR&#125;</span> 文件数量：<span class="hljs-variable">$&#123;CMD2&#125;</span>，新增了 <span class="hljs-variable">$&#123;NUM1&#125;</span>&quot;</span> &gt;&gt; /tmp/diff.log<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;DATE&#125;</span> - <span class="hljs-variable">$&#123;DIR&#125;</span> 文件数量：<span class="hljs-variable">$&#123;CMD2&#125;</span>，无变化&quot;</span> &gt;&gt; /tmp/diff.log<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>diff_tmp<br>       <br><br></code></pre></td></tr></table></figure><h2 id="准备-service-文件"><a href="#准备-service-文件" class="headerlink" title="准备 service 文件"></a>准备 service 文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># vim /lib/systemd/system/diff.service</span><br><br>[Unit]<br>Description=diff tmp<br><br>[Service]<br>ExecStart=/bin/sh /data/diff_tmp.sh<br>ExecStop=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br>Restart=always<br><br>[Install]<br>Wantedby=multi-user.target<br><br></code></pre></td></tr></table></figure><h2 id="启动-service-服务"><a href="#启动-service-服务" class="headerlink" title="启动 service 服务"></a>启动 service 服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重载 Service 文件</span><br>[root@localhost tmp]<span class="hljs-comment"># systemctl daemon-reload</span><br><br><span class="hljs-comment"># 启动 Service 服务</span><br>[root@localhost tmp]<span class="hljs-comment"># systemctl start diff</span><br></code></pre></td></tr></table></figure><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># tail -f /tmp/diff.log </span><br>2023-07-03-20:20:05 - /tmp 文件数量：6，新增了 2<br>2023-07-03-20:21:06 - /tmp 文件数量：5，减少了 1<br>2023-07-03-20:22:06 - /tmp 文件数量：5，无变化<br>2023-07-03-20:23:06 - /tmp 文件数量：5，无变化<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux启动流程</title>
    <link href="/2023/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/07/02/Linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux启动流程"><a href="#Linux启动流程" class="headerlink" title="Linux启动流程"></a>Linux启动流程</h1><p>Linux 系统启动流程大致可分为五个阶段：</p><ul><li>内核引导</li><li>运行 init</li><li>系统初始化</li><li>建立终端</li><li>用户登录系统</li></ul><h2 id="CentOS-6"><a href="#CentOS-6" class="headerlink" title="CentOS 6"></a>CentOS 6</h2><p>CentOS 6 系统 init 程序类型：init</p><p>配置文件：/etc/inittab, /etc/init/ *.conf</p><p><img src="linux-qd1.jpg" alt="linux-qd1"></p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">POST--GRUB1阶段MBR446--GRUB1.<span class="hljs-number">5</span>MBR之后的空间（提供grub2文件所有分区的文件系统）--GRUB2阶段（grub.conf）--kernel(initramfs.img)--根分区--<span class="hljs-regexp">/sbin/i</span>nit--<span class="hljs-regexp">/etc/i</span>nittab--<span class="hljs-regexp">/etc/</span>rc.sysinit--<span class="hljs-regexp">/etc/</span>rc.d<span class="hljs-regexp">/rc--/</span>etc<span class="hljs-regexp">/rcN.d/</span>K,S(<span class="hljs-regexp">/etc/i</span>nit.d<span class="hljs-regexp">/)--/</span>etc/rc.local--login登录<br></code></pre></td></tr></table></figure><ul><li>第一步：开机自检，加载 BIOS</li><li>第二步：读取 MBR</li><li>第三步：Boot Loader　grub 引导菜单</li><li>第四步：加载 kernel 内核</li><li>第五步：init 进程依据 inittab 文件夹来设定运行级别</li><li>第六步：init 进程执行 rc.sysinit</li><li>第七步：启动内核模块</li><li>第八步：执行不同运行级别的脚本程序</li><li>第九步：执行 /etc/rc.d/rc.local</li></ul><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><p>CentOS 7 系统 init 程序类型：systemd</p><p>配置文件：/usr/lib/systemd/system、 /etc/systemd/system</p><p><img src="linux-qd2.jpg" alt="linux-qd2"></p><ol><li><strong>开机加电自检</strong>：检查 bios 中识别的硬件信息是否正常</li><li><strong>开机 MBR 引导</strong>：/boot 分区引导系统启动的记录信息（MBR 引导记录–系统启动文件信息/分区表信息）</li><li><strong>grup 选择菜单</strong>：可以选择系统内核信息/可以选择进入单用户模式</li><li><strong>加载内核信息</strong>：用于管理控制硬件</li><li><strong>启动系统进程</strong>：/usr/lib/systemd/systemd — 后续进程启动（并型）</li><li><strong>加载启动 targe t文件</strong>：/etc/systemd/system/default.target — 选择不同级别启动系统</li><li><strong>加载系统初始化文件</strong>：/usr/lib/systemd/system/sysinit.target — 设置主机名称，设置网卡地址信息</li><li><strong>执行服务运行脚本</strong>：/etc/systemd/system 实现服务开机自动运行，/usr/lib/systemd/system/ 保存系统中所有程序启动文件</li><li><strong>启动 mingetty 进程</strong>：显示登录提示信息</li></ol><p>总结：开机自检 — 加载 MBR — 加载 grup 菜单 — 加载内核 — 启动第一个服务进程 — 加载运行 target 信息— 加载初始化脚本 — 加载运行文件（实现服务程序开机自启）— 启动 mingetty 进程显示登录界面</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux进程和内存概念</title>
    <link href="/2023/07/02/linux%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E6%A6%82%E5%BF%B5/"/>
    <url>/2023/07/02/linux%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%86%85%E5%AD%98%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h1><p><strong>进程（Process）：执行中的程序</strong></p><ul><li>在 Linux 中，进程可以理解为程序的一次动态执行过程，占用特定的内存空间一个进程体现为 /proc 下的一个目录，每个进程独立运行</li><li>进程由程序、数据和进程控制块三部分组成</li><li>每个进程都有一个 PID 号，对应 /proc 目录下的每个数字</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls /proc</span><br>1     18    1944  211  34   516  647  868  974<br>10    180   195   212  340  517  648  869  <br>1003  181   196   213  347  523  649  870  <br>1007  182   197   214  35   524  651  871  <br>1009  183   1972  215  36   525  652  872  <br><br>[root@localhost ~]<span class="hljs-comment"># ps aux</span><br>USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND<br>root           1  2.6  0.5 172452 10432 ?        Ss   22:14   0:01 /usr/lib/systemd/systemd<br>root           2  0.0  0.0      0     0 ?        S    22:14   0:00 [kthreadd]<br>root           3  0.0  0.0      0     0 ?        I&lt;   22:14   0:00 [rcu_gp]<br>root           4  0.0  0.0      0     0 ?        I&lt;   22:14   0:00 [rcu_par_gp]<br>root           5  0.0  0.0      0     0 ?        I    22:14   0:00 [kworker/0:0-events]<br></code></pre></td></tr></table></figure><p><strong>进程具有的特征：</strong></p><ul><li><p>动态性：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的；</p></li><li><p>并发性：任何进程都可以同其他进程一起并发执行；</p></li><li><p>独立性：进程是系统进行资源分配和调度的一个独立单位；</p></li><li><p>结构性：进程由程序、数据和进程控制块三部分组成。</p></li></ul><p><strong>进程状态：一个进程从创建到终止一般会经历五个状态：</strong></p><ul><li>创建状态：进程在创建时需要申请一个空白PCB（进程控制块），向其中填写控制和管理进程的信息，完成资源分配</li><li>就绪状态：进程已经准备好，已分配到所需资源，只要分配到CPU就能够立即运行</li><li>执行状态：进程处于就绪状态被调度后，进程进入执行状态</li><li>阻塞状态（暂停状态）：正在执行的进程由于某些事件（I/O请求，申请缓存区失败）而暂时无法运行，进程受到阻塞。在满足请求时进入就绪状态等待系统调用</li><li>终止状态：进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</li></ul><p><img src="linux-proc1.jpg" alt="linux-proc1"></p><ul><li><p>主进程</p><p>centos中linux第一个进程是systemd，所有的父进程都归systemd管</p></li><li><p>父进程</p><p>运行一个程序就会出现一个进程，这个进程就是父进程，所有的父进程归主进程(systemd) 管，父进程不处理具体的业务</p></li><li><p>子进程</p><p>父进程会产生一个或多个子进程来处理请求和业务，待子进程处理完成任务后，关闭子进程，回收分配给子进程的系统资源 (cpu，内存….)</p></li><li><p>僵尸进程</p><p>僵尸进程是一个不好的进程，也不处理业务，也不告知父进程回收系统资源。僵尸进程可以通过关闭父进程来间接的关闭僵尸进程。</p></li><li><p>孤儿进程</p><p>也是一个不好的进程，父进程故障了，子进程无父进程管理，由systemd主进程直接接管</p></li><li><p>守护进程</p><p>持续运行的进程，一般是系统必须运行的服务，例如: network和sshd服务</p></li></ul><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p><strong>线程（Thread）：进程划分成的更小的运行单位，是操作系统能够进行运算调度的最小单位</strong></p><ul><li>同一进程下的各个线程之间共享程序的内存空间（包括 CPU、Date 等）</li><li>同一进程下的各个线程之间共享进程资源（如打开文件和信号）</li></ul><h1 id="Linux内存"><a href="#Linux内存" class="headerlink" title="Linux内存"></a>Linux内存</h1><p>一般来说，一个程序或者服务在运行的时候，会生成一个或者多个进程，而进程就是运行在内存中的</p><p><strong>Linux 中内存分为物理内存和虚拟内存：</strong></p><ul><li>物理内存：物理内存条而获得的内存空间</li><li>虚拟内存：“使用硬盘空间来扩展内存”，通过虚拟内存可以让程序可以拥有超过系统物理内存大小的可用内存空间；虚拟内存为每个进程提供了一个一致的、私有的地址空间，它让每个进程产生了一种自己在独享主存的错觉（每个进程拥有一片连续完整的内存空间）</li></ul><p><strong>进程使用内存问题：</strong></p><ul><li>内存泄漏（Memory Leak）：动态开辟的空间，在使用完毕后未释放，结果导致一直占据该内存单元</li><li>内存溢出（Memory Overflow）：指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存</li><li>内存不足（Out Of Memory）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>定时任务</title>
    <link href="/2023/06/28/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2023/06/28/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="一次性计划任务at"><a href="#一次性计划任务at" class="headerlink" title="一次性计划任务at"></a>一次性计划任务at</h1><p><code>at</code>工具</p><ul><li>由包 at 提供</li><li>依赖与atd服务,需要启动才能实现at任务</li><li>at队列存放在/var/spool/at目录中,ubuntu存放在/var/spool/cron/atjobs目录下<br>执行任务时PATH变量的值和当前定义任务的用户身份一致</li><li><code>at</code>格式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">at [option] TIME<br></code></pre></td></tr></table></figure><ul><li>常见参数：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">-m ：当指定的任务被完成之后，将给用户发送邮件，即使没有标准输出<br>-I ：atq的别名<br>-d ：atrm的别名<br>-v ：显示任务将被执行的时间<br>-c ：打印任务的内容到标准输出<br>-V ：显示版本信息<br>-q ：后面加&lt;列队&gt; 使用指定的列队<br>-f ：后面加&lt;文件&gt; 从指定文件读入任务而不是从标准输入读入<br>-t ：后面&lt;时间参数&gt; 以时间参数的形式提交要运行的任务<br></code></pre></td></tr></table></figure><ul><li>at时间格式</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HH</span>:MM 在今日的 HH:MM 进行，若该时刻已过，则明天此时执行任务<br><span class="hljs-attribute">18</span>:<span class="hljs-number">00</span><br><br><span class="hljs-attribute">HH</span>:MM YYYY-MM-DD 规定在某年某月的某一天的特殊时刻进行该项任务<br><span class="hljs-attribute">18</span>:<span class="hljs-number">00</span> <span class="hljs-number">2023</span>-<span class="hljs-number">07</span>-<span class="hljs-number">02</span><br><br></code></pre></td></tr></table></figure><p><strong>范例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost at]<span class="hljs-comment"># at 18:00</span><br>warning: commands will be executed using /bin/sh<br>at&gt; reboot<br>at&gt; &lt;EOT&gt;<br>job 7 at Sun Jul  2 18:00:00 2023<br><br></code></pre></td></tr></table></figure><h1 id="周期性任务计划cron"><a href="#周期性任务计划cron" class="headerlink" title="周期性任务计划cron"></a>周期性任务计划cron</h1><p><code>crontab</code>命令格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab [-u user] [-l | -r | -e] [-i]<br></code></pre></td></tr></table></figure><p><strong>常见参数</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">-l 列出所有任务<br>-e 编辑任务<br>-r 移除所有任务<br>-i 同-r一同使用，以交互式模式移除指定任务<br>-u user 指定用户管理cron任务,仅root可运行<br></code></pre></td></tr></table></figure><p>crond任务相关文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab  <span class="hljs-comment">#配置文件</span><br>cron.d/             <span class="hljs-comment">#配置文件  </span><br>cron.daily/      <span class="hljs-comment">#脚本</span><br>cron.hourly/     <span class="hljs-comment">#脚本</span><br>cron.weekly/  <span class="hljs-comment">#脚本</span><br>cron.monthly/    <span class="hljs-comment">#脚本</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/crontab</span><br>SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><br><span class="hljs-comment"># For details see man 4 crontabs</span><br><br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name  command to be executed</span><br><br></code></pre></td></tr></table></figure><p>时间格式：分、时、日、月、星</p><p><strong>范例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># crontab -e</span><br>0 3 28 * * reboot<br><span class="hljs-comment">#每月28日的凌晨3点重启机器 </span><br><br>0 1 * * 1-5  bash /data/backup.sh<br><span class="hljs-comment">#工作日凌晨1点执行backup程序</span><br><br>0 2 * * 5 /data/mysql/backup.sh<br><span class="hljs-comment">#每周五凌晨2点执行数据库备份脚本 </span><br><br>0 */4 * * 1-5 tar cvf /tmp/log.tar.gz /var/log/*<br><span class="hljs-comment">#工作日每4小时执行一次打包日志文件</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npw_login.sh</title>
    <link href="/2023/06/19/npw-login/"/>
    <url>/2023/06/19/npw-login/</url>
    
    <content type="html"><![CDATA[<h1 id="免密钥登陆主机"><a href="#免密钥登陆主机" class="headerlink" title="免密钥登陆主机"></a>免密钥登陆主机</h1><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#Author:            fanhaobin</span><br><span class="hljs-comment">#QQ:                995442478</span><br><span class="hljs-comment">#Date               2023-06-19</span><br><span class="hljs-comment">#FileName:          test.sh</span><br><span class="hljs-comment">#URL:               https://94fanhaobin.github.io</span><br><span class="hljs-comment">#Description:       The test script</span><br><span class="hljs-comment">#Copyright (C):    2023 All rights reserved</span><br><span class="hljs-comment">#********************************************************************</span><br><br><span class="hljs-comment">#设置输出字体颜色</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">color</span></span>() &#123;<br>    RES_COL=60<br>    MOVE_TO_COL=<span class="hljs-string">&quot;echo -en \\033[<span class="hljs-variable">$&#123;RES_COL&#125;</span>G&quot;</span><br>    SETCOLOR_SUCCESS=<span class="hljs-string">&quot;echo -en \\033[1;32m&quot;</span><br>    SETCOLOR_FAILURE=<span class="hljs-string">&quot;echo -en \\033[1;31m&quot;</span><br>    SETCOLOR_WARNING=<span class="hljs-string">&quot;echo -en \\033[1;33m&quot;</span><br>    SETCOLOR_NORMAL=<span class="hljs-string">&quot;echo -en \E[0m&quot;</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span>&amp;&amp; <span class="hljs-variable">$MOVE_TO_COL</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;[&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;success&quot;</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;0&quot;</span> ] ;<span class="hljs-keyword">then</span><br>        <span class="hljs-variable">$&#123;SETCOLOR_SUCCESS&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;  OK  &quot;</span>    <br>    <span class="hljs-keyword">elif</span> [ <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;failure&quot;</span> -o <span class="hljs-variable">$2</span> = <span class="hljs-string">&quot;1&quot;</span>  ] ;<span class="hljs-keyword">then</span> <br>        <span class="hljs-variable">$&#123;SETCOLOR_FAILURE&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;FAILED&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$&#123;SETCOLOR_WARNING&#125;</span><br>        <span class="hljs-built_in">echo</span> -n $<span class="hljs-string">&quot;WARNING&quot;</span><br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-variable">$&#123;SETCOLOR_NORMAL&#125;</span><br>    <span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;]&quot;</span><br>    <span class="hljs-built_in">echo</span> <br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">auto_menu</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> -en <span class="hljs-string">&quot;\E[$[RANDOM%7+31];1m&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span><br>    PS3=<span class="hljs-string">&quot;请选择： &quot;</span><br>    select MENU <span class="hljs-keyword">in</span> 安装mysql 安装apache 免密钥登陆主机 退出 ;<span class="hljs-keyword">do</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$REPLY</span> <span class="hljs-keyword">in</span><br>            1) <br>                install_mysql<br>                <span class="hljs-built_in">break</span><br>                ;;<br>            2)<br>                install_apache<br>                <span class="hljs-built_in">break</span><br>                ;;<br>            3)<br>                nps_login<br>                <span class="hljs-built_in">break</span><br>                ;;<br>            4)<br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;退出!&quot;</span><br>                <span class="hljs-built_in">exit</span><br>                ;;<br>            *) <br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;选择有误，重新选择！&quot;</span><br>                ;;<br>        <span class="hljs-keyword">esac</span><br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-built_in">echo</span> -en <span class="hljs-string">&#x27;\E[0m&#x27;</span>    <br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_mysql</span></span>() &#123;<br>    yum -y install mysql<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_apache</span></span>() &#123;<br>    yum -y install httpd<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">execute</span></span>()&#123;<br>    password=<span class="hljs-string">&quot;Fan@4321&quot;</span><br>    <span class="hljs-keyword">while</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ] ;<span class="hljs-keyword">do</span><br>        expect &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">        set timeout 20</span><br><span class="hljs-string">        spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@$1\n</span><br><span class="hljs-string">        expect &#123;</span><br><span class="hljs-string">            &quot;yes/no&quot; &#123; send &quot;yes\n&quot;;exp_continue &#125;</span><br><span class="hljs-string">            &quot;password&quot; &#123; send &quot;$password\n&quot; &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        expect &quot;#&quot; &#123; send &quot;exit\n&quot; &#125;</span><br><span class="hljs-string">        expect eof</span><br><span class="hljs-string">EOF</span><br>        color <span class="hljs-variable">$1</span> 0<br>        <span class="hljs-built_in">shift</span><br>    <span class="hljs-keyword">done</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">nps_login</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> ! `<span class="hljs-built_in">which</span> expect &amp;&gt;/dev/null` ;<span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;expect 不存在，开始安装expect&quot;</span><br>        yum install -qy expect &gt; /dev/null<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span> ;<span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">declare</span> -a ips<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span> ;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;输入IP,q/Q:&quot;</span> ip<br>    [[ <span class="hljs-variable">$ip</span> =~ ^(q|Q)$  ]]&amp;&amp;<span class="hljs-built_in">break</span><br>    [[ <span class="hljs-variable">$ip</span> =~ ^(([1-9]?[0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\.)&#123;3&#125;([1-9]?[0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])$ ]]&amp;&amp;ips[<span class="hljs-variable">$&#123;#ips[*]&#125;</span>]=<span class="hljs-variable">$ip</span>||&#123; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IP不合法,请重新输入&quot;</span>;<span class="hljs-built_in">continue</span> ; &#125;<br>    <span class="hljs-keyword">done</span><br>    execute <span class="hljs-variable">$&#123;ips[*]&#125;</span><br>    <span class="hljs-built_in">read</span> -p <span class="hljs-string">&quot;是否继续远程主机,输入q/Q退出,其他任意键继续！: &quot;</span> var <br>    [[ <span class="hljs-variable">$var</span> =~ ^q|Q$  ]]&amp;&amp;<span class="hljs-built_in">break</span><br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>auto_menu<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>静态配置网卡IP</title>
    <link href="/2023/06/18/%E9%9D%99%E6%80%81%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1IP/"/>
    <url>/2023/06/18/%E9%9D%99%E6%80%81%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1IP/</url>
    
    <content type="html"><![CDATA[<h1 id="centos静态配置"><a href="#centos静态配置" class="headerlink" title="centos静态配置"></a>centos静态配置</h1><h2 id="修改网卡名称"><a href="#修改网卡名称" class="headerlink" title="修改网卡名称"></a>修改网卡名称</h2><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment">#sed -ri &#x27;/GRUB_CMDLINE_LINUX=/s#(.*)&quot;$#\1 net.ifnames=0&quot;#&#x27; /etc/default/grub</span><br>[root@localhost ~]<span class="hljs-comment">#grub2-mkconfig -o /boot/grub2/grub.cfg </span><br>[root@localhost ~]<span class="hljs-comment">#reboot</span><br></code></pre></td></tr></table></figure><h2 id="CentOS网卡配置文件"><a href="#CentOS网卡配置文件" class="headerlink" title="CentOS网卡配置文件"></a>CentOS网卡配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># cat /etc/sysconfig/network-scripts/ifcfg-eth0</span><br>NAME=<span class="hljs-string">&quot;eth0&quot;</span><br>DEVICE=<span class="hljs-string">&quot;eth0&quot;</span><br>IPADDR=10.0.0.8<br>PREFIX=24<br>GATEWAY=10.0.0.254<br>DNS1=114.114.114.114<br><br></code></pre></td></tr></table></figure><h2 id="CentOS网卡配置文件生效方法"><a href="#CentOS网卡配置文件生效方法" class="headerlink" title="CentOS网卡配置文件生效方法"></a>CentOS网卡配置文件生效方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">CentOS6<br>service network restart<br>CentOS7<br>systemctl restart network<br>CentOS8和rocky<br>nmcli connection reload<br>nmcli connection up eth0<br><br><span class="hljs-comment">#通用</span><br>reboot<br></code></pre></td></tr></table></figure><h2 id="查看修改后的ip"><a href="#查看修改后的ip" class="headerlink" title="查看修改后的ip"></a>查看修改后的ip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ip a</span><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:0c:29:d6:90:d3 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.8/24 brd 10.0.0.255 scope global noprefixroute eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fed6:90d3/64 scope <span class="hljs-built_in">link</span> <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h1 id="ubuntu静态配置"><a href="#ubuntu静态配置" class="headerlink" title="ubuntu静态配置"></a>ubuntu静态配置</h1><h2 id="修改网卡名称-1"><a href="#修改网卡名称-1" class="headerlink" title="修改网卡名称"></a>修改网卡名称</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ubuntu2004:~<span class="hljs-comment"># sed -ri &#x27;/GRUB_CMDLINE_LINUX=/s#(.*)&quot;$#\1 net.ifnames=0&quot;#&#x27; /etc/default/grub</span><br>root@ubuntu2004:~<span class="hljs-comment"># grub-mkconfig -o /boot/grub/grub.cfg </span><br>root@ubuntu2004:~<span class="hljs-comment"># reboot</span><br></code></pre></td></tr></table></figure><h2 id="ubuntu网卡配置文件"><a href="#ubuntu网卡配置文件" class="headerlink" title="ubuntu网卡配置文件"></a>ubuntu网卡配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ubuntu2004:~<span class="hljs-comment"># cat /etc/netplan/01-netcfg.yaml </span><br><span class="hljs-comment"># This is the network config written by &#x27;subiquity&#x27;</span><br>network:<br>    version: 2<br>    ethernets:<br>        eth0:<br>            addresses: [10.0.0.200/24]<br>            gateway4: 10.0.0.254<br>            nameservers:<br>                search: [magedu.com]<br>                addresses: [180.76.76.76, 8.8.8.8]<br><br></code></pre></td></tr></table></figure><h2 id="ubuntu网卡配置文件生效方法"><a href="#ubuntu网卡配置文件生效方法" class="headerlink" title="ubuntu网卡配置文件生效方法"></a>ubuntu网卡配置文件生效方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ubuntu2004:~<span class="hljs-comment"># netplan apply</span><br>root@ubuntu2004:~<span class="hljs-comment"># ifconfig eth0 up</span><br></code></pre></td></tr></table></figure><h2 id="查看修改后的ip-1"><a href="#查看修改后的ip-1" class="headerlink" title="查看修改后的ip"></a>查看修改后的ip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@ubuntu2004:~<span class="hljs-comment"># ip a</span><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:0c:29:d2:18:12 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.200/24 brd 10.0.0.255 scope global eth0<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::20c:29ff:fed2:1812/64 scope <span class="hljs-built_in">link</span> <br>       valid_lft forever preferred_lft forever<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TCP</title>
    <link href="/2023/06/18/TCP/"/>
    <url>/2023/06/18/TCP/</url>
    
    <content type="html"><![CDATA[<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="tcp-1.jpg" alt="tcp三次握手"></p><ul><li><p>第一次握手（SYN = 1 ,seq = x）</p><ol><li>客户端发送一个 TCP的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，并选择序号 seq=x，表明传送数据时的第一个数据字节的序号是 x。(seq是个随机值)。</li><li>发送完毕后，客户端进入 SYN_SEND 状态。</li></ol></li><li><p>第二次握手(SYN = 1, ACK = 1, seq = y, ack = x + 1)</p><ol><li>服务器的TCP收到连接请求报文段后，如同意，则发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号(随机值y)，放到seq 域里，同时将确认序号ack设置为客户的 ISN 加1，即 x+1(即回复对方确认收到了序列号为x开始的包，且希望下次的数据从x+1的位置开始)。</li><li>发送完毕后，服务器端进入 SYN_RCVD 状态。</li></ol></li></ul><ul><li>第三次握手(ACK = 1，ack = y + 1，seq = x + 1)<ol><li>客户端收到此报文段后再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段ack中发送给对方，并且告诉服务器自己的seq=x+1。</li><li>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP握手结束。</li></ol></li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="tcp-2.png" alt="tcp四次挥手"></p><ul><li><p>第一次挥手(FIN=1，seq=u)</p><ol><li><p>假设客户端想要关闭连接，客户端发送一个FIN标志位置为 1 的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。因为有可能服务器还要发送数据，所以发送自己的序列号seq=u，等待服务器确认。</p></li><li><p>发送完毕后，客户端进入FIN_WAIT_1状态。</p></li></ol></li><li><p>第二次挥手(ACK=1，seq=v，ack=u+1)</p><ol><li><p>服务器端确认客户端的FIN包，发送一个确认包(ACK=1(确认)，seq=v(自己的序列号)，ack=u+1(确认收到序列号u以前的包，并希望下次发送数据从 u+1 开始))，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接(可能有数据发送)。</p></li><li><p>发送完毕后，服务器端进入CLOSE_WAIT状态，客户端接收到这个确认包之后，进入FIN_WAIT_2状态，等待服务器端关闭连接。</p></li><li><p>在这过程中 TCP 服务器进程会通知高层应用进程。然后从客户端到服务器这个方向的连接就释放了，TCP 连接处于半关闭状态。但是服务器 若发送数据，客户端仍要接收。</p></li></ol></li><li><p>第三次挥手(FIN=1，ACK=1，seq=w，ack=u+1)</p><ol><li><p>若服务器已经没有要向客户端发送的数据，其应用进程就通知 TCP 释放连接。</p></li><li><p>服务器端准备好关闭连接时，向客户端发送结束连接请求FIN置为 1，ACK=1，seq=w(有数据发送过)，ack=u+1。</p></li><li><p>发送完毕后，服务器端进入LAST_ACK状态，等待来自客户端的最后一个ACK。</p></li></ol></li><li><p>第四次挥手(ACK=1，seq=u+1，ack=w+1)</p><ol><li>客户端接收到来自服务器端的关闭请求，发送一个确认包(在确认报文段中ACK=1，确认号ack=w+1，自己的序号seq=u+1)，并进入TIME_WAIT状态，等待可能出现的要求重传的ACK包。(这个确认包是内核进行发送的，上面不能发数据的是客户端的send函数)。</li><li>服务器端接收到这个确认包之后，关闭连接，进入CLOSED状态。</li><li>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的ACK，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入CLOSED状态。</li></ol></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yum私有仓库</title>
    <link href="/2023/06/18/yum/"/>
    <url>/2023/06/18/yum/</url>
    
    <content type="html"><![CDATA[<h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><ul><li>yum服务器存放rpm包和相关包的元数据库</li><li>yum客户端访问yum服务器进行安装或查询</li></ul><h2 id="yum客户端配置"><a href="#yum客户端配置" class="headerlink" title="yum客户端配置"></a>yum客户端配置</h2><h3 id="yum配置文件"><a href="#yum配置文件" class="headerlink" title="yum配置文件"></a>yum配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls /etc/yum.conf</span><br>/etc/yum.conf<br>[root@localhost etc]<span class="hljs-comment"># cat yum.conf</span><br>[main]<br>gpgcheck=1<br>installonly_limit=3<br>clean_requirements_on_remove=True<br>best=True<br>skip_if_unavailable=False<br><br></code></pre></td></tr></table></figure><h3 id="yum仓库配置"><a href="#yum仓库配置" class="headerlink" title="yum仓库配置"></a>yum仓库配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls  /etc/yum.repos.d/</span><br>backup  base.repo<br>[root@localhost ~]<span class="hljs-comment"># cat /etc/yum.repos.d/base.repo </span><br>[BaseOS]<br>name=BaseOS<br>baseurl=file:///misc/cd/BaseOS<br>        https://mirror.tuna.tsinghua.edu.cn/centos/8/BaseOS/x86_64/os/<br>        https://mirrors.huaweicloud.com/centos/8/BaseOS/x86_64/os/<br>        https://mirrors.cloud.tencent.com/centos/8/BaseOS/x86_64/os/<br>        https://mirrors.aliyun.com/centos/8/BaseOS/x86_64/os/<br>gpgcheck=0<br><br>[AppStream]<br>name=AppStream<br>baseurl=file:///misc/cd/AppStream<br>        https://mirror.tuna.tsinghua.edu.cn/centos/8/AppStream/x86_64/os/<br>        https://mirrors.huaweicloud.com/centos/8/AppStream/x86_64/os/<br>        https://mirrors.cloud.tencent.com/centos/8/AppStream/x86_64/os/<br>        https://mirrors.aliyun.com/centos/8/AppStream/x86_64/os/<br>gpgcheck=0<br><br><br>[epel]<br>name=EPEL<br>baseurl=https://mirror.tuna.tsinghua.edu.cn/epel/<span class="hljs-variable">$releasever</span>/Everything/<span class="hljs-variable">$basearch</span><br>        https://mirrors.cloud.tencent.com/epel/<span class="hljs-variable">$releasever</span>/Everything/<span class="hljs-variable">$basearch</span><br>        https://mirrors.huaweicloud.com/epel/<span class="hljs-variable">$releasever</span>/Everything/<span class="hljs-variable">$basearch</span><br>        https://mirrors.aliyun.com/epel/<span class="hljs-variable">$releasever</span>/Everything/<span class="hljs-variable">$basearch</span><br>gpgcheck=0<br>enabled=1<br><br>[extras]<br>name=extras<br>baseurl=https://mirror.tuna.tsinghua.edu.cn/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/os<br>        https://mirrors.cloud.tencent.com/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/os<br>        https://mirrors.huaweicloud.com/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/os <br>        https://mirrors.aliyun.com/centos/<span class="hljs-variable">$releasever</span>/extras/<span class="hljs-variable">$basearch</span>/os<br>gpgcheck=0<br>enabled=1<br><br>[PowerTools]<br>name=CentOS- - PowerTools - mirrors.aliyun.com<br>baseurl=https://mirror.tuna.tsinghua.edu.cn/centos/<span class="hljs-variable">$releasever</span>/PowerTools/<span class="hljs-variable">$basearch</span>/os/<br>        https://mirrors.cloud.tencent.com/centos/<span class="hljs-variable">$releasever</span>/PowerTools/<span class="hljs-variable">$basearch</span>/os/<br>        https://mirrors.huaweicloud.com/centos/<span class="hljs-variable">$releasever</span>/PowerTools/<span class="hljs-variable">$basearch</span>/os/<br>        https://mirrors.aliyun.com/centos/<span class="hljs-variable">$releasever</span>/PowerTools/<span class="hljs-variable">$basearch</span>/os/<br>gpgcheck=0<br>enabled=1<br>gpgkey=https://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-Official<br><br></code></pre></td></tr></table></figure><h2 id="yum仓库服务器配置"><a href="#yum仓库服务器配置" class="headerlink" title="yum仓库服务器配置"></a>yum仓库服务器配置</h2><h3 id="安装apache服务"><a href="#安装apache服务" class="headerlink" title="安装apache服务"></a>安装apache服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum -y install httpd</span><br>BaseOS                                                    952 kB/s | 3.9 kB     00:00    <br>AppStream                                                 1.3 MB/s | 4.3 kB     00:00    <br>EPEL                                                       20 kB/s | 4.7 kB     00:00    <br>EPEL                                                       15 MB/s |  16 MB     00:01    <br>extras                                                    7.7 kB/s | 1.5 kB     00:00    <br>CentOS- - PowerTools - mirrors.aliyun.com                 4.2 kB/s | 4.3 kB     00:01    <br>Dependencies resolved.<br>...<br>...<br>...<br>Complete!<br></code></pre></td></tr></table></figure><h3 id="启动apache服务"><a href="#启动apache服务" class="headerlink" title="启动apache服务"></a>启动apache服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># systemctl enable --now httpd</span><br>Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.<br><br></code></pre></td></tr></table></figure><h3 id="在apache目录下创建文件夹，挂载光盘，复制光盘文件到apache目录下"><a href="#在apache目录下创建文件夹，挂载光盘，复制光盘文件到apache目录下" class="headerlink" title="在apache目录下创建文件夹，挂载光盘，复制光盘文件到apache目录下"></a>在apache目录下创建文件夹，挂载光盘，复制光盘文件到apache目录下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># mkdir /var/www/html/centos/8 -pv</span><br><span class="hljs-built_in">mkdir</span>: created directory <span class="hljs-string">&#x27;/var/www/html/centos&#x27;</span><br><span class="hljs-built_in">mkdir</span>: created directory <span class="hljs-string">&#x27;/var/www/html/centos/8&#x27;</span><br>[root@localhost ~]<span class="hljs-comment"># mount /dev/sr0 /mnt</span><br>mount: /mnt: WARNING: device write-protected, mounted read-only.<br>[root@localhost ~]<span class="hljs-comment"># cp /mnt/* /var/www/html/centos/8 -a</span><br><br></code></pre></td></tr></table></figure><h3 id="下载阿里云的extras源，制作私有yum源"><a href="#下载阿里云的extras源，制作私有yum源" class="headerlink" title="下载阿里云的extras源，制作私有yum源"></a>下载阿里云的extras源，制作私有yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># yum repolist</span><br>repo <span class="hljs-built_in">id</span>                       repo name<br>AppStream                     AppStream<br>BaseOS                        BaseOS<br>PowerTools                    CentOS- - PowerTools - mirrors.aliyun.com<br>epel                          EPEL<br>extras                        extras<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># dnf reposync --repoid=extras --download-metadata -p /var/www/html/centos</span><br>extras                                                    6.1 kB/s | 1.5 kB     00:00    <br>extras                                                     16 kB/s |  16 kB     00:01    <br>(1/39): centos-gpg-keys-8-3.el8.noarch.rpm                 59 kB/s |  12 kB     00:00    <br>(2/39): centos-release-ansible-29-1-2.el8.noarch.rpm  <br></code></pre></td></tr></table></figure><h3 id="下载阿里云的epel源，制作私有yum源"><a href="#下载阿里云的epel源，制作私有yum源" class="headerlink" title="下载阿里云的epel源，制作私有yum源"></a>下载阿里云的epel源，制作私有yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># dnf reposync --repoid=epel --download-metadata -p /var/www/html/centos </span><br>EPEL                                                       20 kB/s | 4.7 kB     00:00    <br>EPEL                                                       25 MB/s |  33 MB     00:01    <br>(1/9768): 6tunnel-0.13-1.el8.x86_64.rpm                   114 kB/s |  29 kB     00:00    <br>(2/9768): 3proxy-0.8.13-1.el8.x86_64.rpm <br></code></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><h3 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="#关闭SELinux"></a>#关闭SELinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># sed -i &#x27;/^SELINUX=/c SELINUX=disabled&#x27; /etc/selinux/config</span><br>[root@localhost ~]<span class="hljs-comment"># cat /etc/selinux/config </span><br><br><span class="hljs-comment"># This file controls the state of SELinux on the system.</span><br><span class="hljs-comment"># SELINUX= can take one of these three values:</span><br><span class="hljs-comment">#     enforcing - SELinux security policy is enforced.</span><br><span class="hljs-comment">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="hljs-comment">#     disabled - No SELinux policy is loaded.</span><br>SELINUX=disabled<br><span class="hljs-comment"># SELINUXTYPE= can take one of these three values:</span><br><span class="hljs-comment">#     targeted - Targeted processes are protected,</span><br><span class="hljs-comment">#     minimum - Modification of targeted policy. Only selected processes are protected. </span><br><span class="hljs-comment">#     mls - Multi Level Security protection.</span><br>SELINUXTYPE=targeted<br><br></code></pre></td></tr></table></figure><h3 id="关闭防火墙-1"><a href="#关闭防火墙-1" class="headerlink" title="#关闭防火墙"></a>#关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># systemctl disable --now firewalld </span><br><br></code></pre></td></tr></table></figure><h2 id="浏览器访问服务器ip"><a href="#浏览器访问服务器ip" class="headerlink" title="浏览器访问服务器ip"></a>浏览器访问服务器ip</h2><p><img src="image-20230618215120821.png" alt="yum"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell脚本</title>
    <link href="/2023/06/10/shell%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/06/10/shell%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="脚本练习"><a href="#脚本练习" class="headerlink" title="脚本练习"></a>脚本练习</h1><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#Author:    fanhaobin</span><br><span class="hljs-comment">#QQ:    995442478</span><br><span class="hljs-comment">#Date    2023-06-10</span><br><span class="hljs-comment">#FileName:    local_ip.sh</span><br><span class="hljs-comment">#URL:    https://94fanhaobin.github.io</span><br><span class="hljs-comment">#Description:The test script</span><br><span class="hljs-comment">#Copyright (C):2023 All rights reserved</span><br><span class="hljs-comment">#********************************************************************</span><br><br>COLOR=<span class="hljs-string">&quot;echo -e \\E[1;32m&quot;</span><br>END=<span class="hljs-string">&quot;\\E[\0m&quot;</span><br>LOCALIP=`hostname -I | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&#x27; &#x27;</span> -f1`<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">show_local_ip</span></span>() &#123;<br><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**本机当前IP**&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;* &quot;</span><span class="hljs-variable">$LOCALIP</span><span class="hljs-string">&quot; *&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**************&quot;</span><span class="hljs-variable">$END</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">now_date</span></span>() &#123;<br><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;当前时间： &quot;</span>`<span class="hljs-built_in">date</span> +<span class="hljs-string">&#x27;%Y-%m-%d %T&#x27;</span>`<span class="hljs-variable">$END</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">contains</span></span>() &#123;<br><br>    <span class="hljs-keyword">if</span>  [[ <span class="hljs-variable">$LOCALIP</span> =~ 4  ]]; <span class="hljs-keyword">then</span><br>        now_date<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**开始批量创建用户和文件夹**&quot;</span><span class="hljs-variable">$END</span><br>        groupadd -f  magedu<br>        <span class="hljs-keyword">for</span> username <span class="hljs-keyword">in</span> magedu_&#123;00..100&#125;; <span class="hljs-keyword">do</span><br>            <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$username</span><br>            useradd <span class="hljs-variable">$username</span> -g magedu<br>            <span class="hljs-built_in">chown</span> <span class="hljs-variable">$username</span>. <span class="hljs-variable">$username</span> <br>        <span class="hljs-keyword">done</span><br>        <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**批量创建用户和文件夹完成**&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-keyword">fi</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">del_user</span></span>() &#123;<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**开始批量删除用户和文件夹**&quot;</span><span class="hljs-variable">$END</span><br>    grep ^magedu /etc/passwd | <br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">read</span> i ;<span class="hljs-keyword">do</span><br>        user=$(<span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> | <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot;:&quot;</span> -f1)<br>        userdel -r <span class="hljs-variable">$user</span><br>        <span class="hljs-built_in">rmdir</span> -p <span class="hljs-variable">$user</span><br>    <span class="hljs-keyword">done</span><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**批量删除用户和文件夹完成**&quot;</span><span class="hljs-variable">$END</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">login_user</span></span>() &#123;<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**login用户**&quot;</span><span class="hljs-variable">$END</span><br>    grep -v <span class="hljs-string">&quot;nologin&quot;</span> /etc/passwd<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**login用户**&quot;</span><span class="hljs-variable">$END</span><br><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_nginx</span></span>() &#123;<br><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**开始安装nginx**&quot;</span><span class="hljs-variable">$END</span><br>    yum -y install nginx<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**安装完成nginx**&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**启动nginx**&quot;</span><span class="hljs-variable">$END</span><br>    systemctl <span class="hljs-built_in">enable</span> --now nginx<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**完成启动**&quot;</span><span class="hljs-variable">$END</span><br><br>&#125;<br><br>show_local_ip<br>contains<br><span class="hljs-comment">#del_user</span><br>login_user<br>install_nginx<br><br></code></pre></td></tr></table></figure><h1 id="创建shell脚本的模板文件"><a href="#创建shell脚本的模板文件" class="headerlink" title="创建shell脚本的模板文件"></a>创建shell脚本的模板文件</h1><p>在用户家目录创建命名为<code>.vimrc</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># pwd</span><br>/root<br>[root@localhost ~]<span class="hljs-comment"># vim .vimrc</span><br></code></pre></td></tr></table></figure><p>复制以下代码进<code>.vimrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> ts=4<br><span class="hljs-built_in">set</span> expandtab<br><span class="hljs-built_in">set</span> ignorecase<br><span class="hljs-built_in">set</span> shiftwidth=4<br>autocmd BufNewFile *.sh <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;:call SetTitle()&quot;</span><br>func SetTitle()<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%:e&quot;</span>) == <span class="hljs-string">&#x27;sh&#x27;</span><br>        call setline(1,<span class="hljs-string">&quot;#!/bin/bash&quot;</span>)<br>        call setline(2,<span class="hljs-string">&quot;#&quot;</span>)<br>        call setline(3,<span class="hljs-string">&quot;#********************************************************************&quot;</span>)<br>        call setline(4,<span class="hljs-string">&quot;#Author:            fanhaobin&quot;</span>)<br>        call setline(5,<span class="hljs-string">&quot;#QQ:                995442478&quot;</span>)<br>        call setline(6,<span class="hljs-string">&quot;#Date               &quot;</span>.strftime(<span class="hljs-string">&quot;%Y-%m-%d&quot;</span>))<br>        call setline(7,<span class="hljs-string">&quot;#FileName:          &quot;</span>.<span class="hljs-built_in">expand</span>(<span class="hljs-string">&quot;%&quot;</span>))<br>        call setline(8,<span class="hljs-string">&quot;#URL:               https://94fanhaobin.github.io&quot;</span>)<br>        call setline(9,<span class="hljs-string">&quot;#Description:       The test script&quot;</span>)<br>        call setline(10,<span class="hljs-string">&quot;#Copyright (C):    &quot;</span>.strftime(<span class="hljs-string">&quot;%Y&quot;</span>).<span class="hljs-string">&quot; All rights reserved&quot;</span>)<br>        call setline(11,<span class="hljs-string">&quot;#********************************************************************&quot;</span>)<br>        call setline(12,<span class="hljs-string">&quot;&quot;</span>)<br>    endif<br>endfunc<br>autocmd BufNewFile * normal G<br></code></pre></td></tr></table></figure><p>创建后缀为<code>.sh</code>的Shell脚本文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ls .vimrc</span><br>.vimrc<br>[root@localhost ~]<span class="hljs-comment"># vim local_ip.sh</span><br><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment">#Author:            fanhaobin</span><br><span class="hljs-comment">#QQ:                995442478</span><br><span class="hljs-comment">#Date               2023-06-10</span><br><span class="hljs-comment">#FileName:          local_ip.sh</span><br><span class="hljs-comment">#URL:               https://94fanhaobin.github.io</span><br><span class="hljs-comment">#Description:       The test script</span><br><span class="hljs-comment">#Copyright (C): 2023 All rights reserved</span><br><span class="hljs-comment">#********************************************************************</span><br><span class="hljs-comment"># </span><br><br><br></code></pre></td></tr></table></figure><h1 id="查询本机IP"><a href="#查询本机IP" class="headerlink" title="查询本机IP"></a>查询本机IP</h1><h2 id="ip-address-show"><a href="#ip-address-show" class="headerlink" title="ip address show"></a><code>ip address show</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ip address show</span><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:0c:29:d6:90:d3 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.131/24 brd 10.0.0.255 scope global dynamic noprefixroute eth0<br>       valid_lft 901sec preferred_lft 901sec<br>    inet6 fe80::a985:4ea:3c03:7fbd/64 scope <span class="hljs-built_in">link</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><ul><li><code>ip address show</code>命令缩写<code>ip a</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ip a</span><br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>    <span class="hljs-built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>    inet 127.0.0.1/8 scope host lo<br>       valid_lft forever preferred_lft forever<br>    inet6 ::1/128 scope host <br>       valid_lft forever preferred_lft forever<br>2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether 00:0c:29:d6:90:d3 brd ff:ff:ff:ff:ff:ff<br>    inet 10.0.0.131/24 brd 10.0.0.255 scope global dynamic noprefixroute eth0<br>       valid_lft 1095sec preferred_lft 1095sec<br>    inet6 fe80::a985:4ea:3c03:7fbd/64 scope <span class="hljs-built_in">link</span> noprefixroute <br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a><code>hostname</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># hostname -I</span><br>10.0.0.131 <br></code></pre></td></tr></table></figure><h2 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a><code>ifconfig</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># ifconfig</span><br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.0.0.131  netmask 255.255.255.0  broadcast 10.0.0.255<br>        inet6 fe80::a985:4ea:3c03:7fbd  prefixlen 64  scopeid 0x20&lt;<span class="hljs-built_in">link</span>&gt;<br>        ether 00:0c:29:d6:90:d3  txqueuelen 1000  (Ethernet)<br>        RX packets 474  bytes 52018 (50.7 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 385  bytes 51006 (49.8 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>        loop  txqueuelen 1000  (Local Loopback)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><h1 id="打印当前时间"><a href="#打印当前时间" class="headerlink" title="打印当前时间"></a>打印当前时间</h1><h2 id="date"><a href="#date" class="headerlink" title="date"></a><code>date</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># echo -e `date +&#x27;%Y-%m-%d %T&#x27;`</span><br>2023-06-10 17:09:19<br></code></pre></td></tr></table></figure><h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><h2 id="是否包含数字3，包含则打印当前时间"><a href="#是否包含数字3，包含则打印当前时间" class="headerlink" title="是否包含数字3，包含则打印当前时间"></a>是否包含数字3，包含则打印当前时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">   <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">now_date</span></span>() &#123;<br>   <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;当前时间： &quot;</span>`<span class="hljs-built_in">date</span> +<span class="hljs-string">&#x27;%Y-%m-%d %T&#x27;</span>`<span class="hljs-variable">$END</span><br>&#125;<br><br>   <span class="hljs-keyword">if</span>  [[ <span class="hljs-variable">$LOCALIP</span> =~ 3  ]]; <span class="hljs-keyword">then</span><br>       now_date<br>   <span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="用bash执行脚本，查看结果"><a href="#用bash执行脚本，查看结果" class="headerlink" title="用bash执行脚本，查看结果"></a>用bash执行脚本，查看结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># bash local_ip.sh</span><br>当前时间： 2023-06-10 22:08:59<br></code></pre></td></tr></table></figure><h2 id="是否包含数字3，不包含则批量创建用户和文件夹，并修改用户和组"><a href="#是否包含数字3，不包含则批量创建用户和文件夹，并修改用户和组" class="headerlink" title="是否包含数字3，不包含则批量创建用户和文件夹，并修改用户和组"></a>是否包含数字3，不包含则批量创建用户和文件夹，并修改用户和组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">contains</span></span>() &#123;<br><br>    <span class="hljs-keyword">if</span>  [[ <span class="hljs-variable">$LOCALIP</span> =~ 3  ]]; <span class="hljs-keyword">then</span><br>        now_date<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**开始批量创建用户和文件夹**&quot;</span><span class="hljs-variable">$END</span><br>        groupadd -f  magedu<br>        <span class="hljs-keyword">for</span> username <span class="hljs-keyword">in</span> magedu_&#123;00..100&#125;; <span class="hljs-keyword">do</span><br>            <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$username</span><br>            useradd <span class="hljs-variable">$username</span> -g magedu<br>            <span class="hljs-built_in">chown</span> <span class="hljs-variable">$username</span>. <span class="hljs-variable">$username</span> <br>        <span class="hljs-keyword">done</span><br>        <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**批量创建用户和文件夹完成**&quot;</span><span class="hljs-variable">$END</span><br>    <span class="hljs-keyword">fi</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用bash执行脚本，查看结果-1"><a href="#用bash执行脚本，查看结果-1" class="headerlink" title="用bash执行脚本，查看结果"></a>用bash执行脚本，查看结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># bash local_ip.sh</span><br>[root@localhost ~]<span class="hljs-comment"># ll</span><br>total 8<br>-rw-------. 1 root       root    960 May 11 09:10 anaconda-ks.cfg<br>-rw-r--r--  1 root       root   1428 Jun 10 23:00 local_ip.sh<br>drwxr-xr-x  2 magedu_000 magedu    6 Jun 10 23:00 magedu_000<br>drwxr-xr-x  2 magedu_001 magedu    6 Jun 10 23:00 magedu_001<br>drwxr-xr-x  2 magedu_002 magedu    6 Jun 10 23:00 magedu_002<br>drwxr-xr-x  2 magedu_003 magedu    6 Jun 10 23:00 magedu_003<br>drwxr-xr-x  2 magedu_004 magedu    6 Jun 10 23:00 magedu_004<br>drwxr-xr-x  2 magedu_005 magedu    6 Jun 10 23:00 magedu_005<br>drwxr-xr-x  2 magedu_006 magedu    6 Jun 10 23:00 magedu_006<br>drwxr-xr-x  2 magedu_007 magedu    6 Jun 10 23:00 magedu_007<br>drwxr-xr-x  2 magedu_008 magedu    6 Jun 10 23:00 magedu_008<br>drwxr-xr-x  2 magedu_009 magedu    6 Jun 10 23:00 magedu_009<br>drwxr-xr-x  2 magedu_010 magedu    6 Jun 10 23:00 magedu_010<br>drwxr-xr-x  2 magedu_011 magedu    6 Jun 10 23:00 magedu_011<br><br></code></pre></td></tr></table></figure><h2 id="查看etc-passwd这个文件中可以登录的用户"><a href="#查看etc-passwd这个文件中可以登录的用户" class="headerlink" title="查看etc/passwd这个文件中可以登录的用户"></a>查看etc/passwd这个文件中可以登录的用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">login_user</span></span>() &#123;<br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**login用户**&quot;</span><span class="hljs-variable">$END</span><br>    grep -v <span class="hljs-string">&quot;nologin&quot;</span> /etc/passwd<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**login用户**&quot;</span><span class="hljs-variable">$END</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用bash执行脚本，查看结果-2"><a href="#用bash执行脚本，查看结果-2" class="headerlink" title="用bash执行脚本，查看结果"></a>用bash执行脚本，查看结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># bash local_ip.sh</span><br>root:x:0:0:root:/root:/bin/bash<br><span class="hljs-built_in">sync</span>:x:5:0:<span class="hljs-built_in">sync</span>:/sbin:/bin/sync<br>shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>halt:x:7:0:halt:/sbin:/sbin/halt<br>magedu_000:x:1000:1000::/home/magedu_000:/bin/bash<br>magedu_001:x:1001:1000::/home/magedu_001:/bin/bash<br>magedu_002:x:1002:1000::/home/magedu_002:/bin/bash<br>magedu_003:x:1003:1000::/home/magedu_003:/bin/bash<br>magedu_004:x:1004:1000::/home/magedu_004:/bin/bash<br>magedu_005:x:1005:1000::/home/magedu_005:/bin/bash<br>magedu_006:x:1006:1000::/home/magedu_006:/bin/bash<br>magedu_007:x:1007:1000::/home/magedu_007:/bin/bash<br>magedu_008:x:1008:1000::/home/magedu_008:/bin/bash<br>magedu_009:x:1009:1000::/home/magedu_009:/bin/bash<br>magedu_010:x:1010:1000::/home/magedu_010:/bin/bash<br>magedu_011:x:1011:1000::/home/magedu_011:/bin/bash<br></code></pre></td></tr></table></figure><h2 id="yum安装nginx服务，并且启动该服务"><a href="#yum安装nginx服务，并且启动该服务" class="headerlink" title="yum安装nginx服务，并且启动该服务"></a>yum安装nginx服务，并且启动该服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">install_nginx</span></span>() &#123;<br><br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**开始安装nginx**&quot;</span><span class="hljs-variable">$END</span><br>    yum -y install nginx<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**安装完成nginx**&quot;</span><span class="hljs-variable">$END</span><br>    <br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**启动nginx**&quot;</span><span class="hljs-variable">$END</span><br>    systemctl <span class="hljs-built_in">enable</span> --now nginx<br>    <span class="hljs-variable">$COLOR</span><span class="hljs-string">&quot;**完成启动**&quot;</span><span class="hljs-variable">$END</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用bash执行脚本，查看结果-3"><a href="#用bash执行脚本，查看结果-3" class="headerlink" title="用bash执行脚本，查看结果"></a>用bash执行脚本，查看结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@localhost ~]<span class="hljs-comment"># bash local_ip.sh</span><br>**开始安装nginx**<br>CentOS- - PowerTools - mirrors.aliyun.com                                       6.2 kB/s | 4.3 kB     00:00    <br>Dependencies resolved.<br>================================================================================================================<br> Package                          Arch        Version                                      Repository      Size<br>================================================================================================================<br>Installing:<br> nginx                            x86_64      1:1.14.1-9.module+el8.4.0+542+81547229       AppStream      566 k<br>...<br>...<br>...<br>Complete!<br>**安装完成nginx**<br>**启动nginx**<br>Created symlink /etc/systemd/system/multi-user.target.wants/nginx.service → /usr/lib/systemd/system/nginx.service.<br>**完成启动**<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文本处理工具</title>
    <link href="/2023/06/05/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/06/05/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>grep、seq、awk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件管理，用户管理，组用户，权限管理相关的命令</title>
    <link href="/2023/06/04/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%EF%BC%8C%E7%BB%84%E7%94%A8%E6%88%B7%EF%BC%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/06/04/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%8C%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%EF%BC%8C%E7%BB%84%E7%94%A8%E6%88%B7%EF%BC%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E7%9B%B8%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-文件与目录管理"><a href="#Linux-文件与目录管理" class="headerlink" title="Linux 文件与目录管理"></a>Linux 文件与目录管理</h1><p>我们知道 Linux 的目录结构为树状结构，最顶级的目录为根目录 /</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们</p><ul><li><strong>绝对路径：</strong><br>路径的写法，由根目录 / 写起</li><li><strong>相对路径：</strong><br>路径的写法，不是由 / 写起</li></ul><h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><p>ls（英文全拼：list files） : 列出目录及文件名</p><p>cd（英文全拼：change directory） : 切换目录</p><p>pwd（英文全拼：print work directory） : 显示目前的目录</p><p>mkdir（英文全拼：make directory） : 创建一个新的目录</p><p>rmdir（英文全拼：remove directory） : 删除一个空的目录</p><p>cp（英文全拼：copy file） : 复制文件或目录</p><p>rm（英文全拼：remove） : 删除文件或目录</p><p>mv（英文全拼：move file） : 移动文件与目录，或修改文件与目录的名称</p><p>touch : 用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</p><h2 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h2><p>cat : 由第一行开始显示文件内容</p><p>tac : 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</p><p>nl : 显示的时候，顺道输出行号！</p><p>more : 一页一页的显示文件内容</p><p>less : 与 more 类似，但是比 more 更好的是，他可以往前翻页！</p><p>head : 只看头几行</p><p>tail : 只看尾巴几行</p><h1 id="Linux-用户和用户组管理"><a href="#Linux-用户和用户组管理" class="headerlink" title="Linux 用户和用户组管理"></a>Linux 用户和用户组管理</h1><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><h2 id="Linux系统用户账号的管理"><a href="#Linux系统用户账号的管理" class="headerlink" title="Linux系统用户账号的管理"></a>Linux系统用户账号的管理</h2><p>useradd : 添加新的用户账号</p><p>userdel : 删除一个已有的用户账号</p><p>usermod : 修改已有的用户信息</p><p>passwd : 指定和修改用户口令</p><h2 id="Linux系统用户组的管理"><a href="#Linux系统用户组的管理" class="headerlink" title="Linux系统用户组的管理"></a>Linux系统用户组的管理</h2><p>groupadd : 增加一个新的用户组</p><p>groupdel : 删除一个已有的用户组</p><p>groupmod : 修改用户组的属性</p><h1 id="Linux系统文件权限的管理"><a href="#Linux系统文件权限的管理" class="headerlink" title="Linux系统文件权限的管理"></a>Linux系统文件权限的管理</h1><p>chmod : 变动文件属性</p><p>chown : 转变文件拥有者</p><p>setfacl : 设置文件或者目录访问控制列表,即ACL规则</p><p>getfacl : 显示文件或目录的ACL策略</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>chsh : 更改用户账户的Shell类型</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统目录结构(FHS)</title>
    <link href="/2023/06/04/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-FHS/"/>
    <url>/2023/06/04/Linux%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84-FHS/</url>
    
    <content type="html"><![CDATA[<p>​    Linux的文件系统层级结构：FileSystem Hierarchy Standdard（简称FHS）定义了在Linux系统中的目录结构和目录内容，即让用户了解到已安装软件通常放置哪个目录下。类似于Windows操作系统中C盘的文件目录，FHS采用树形结构组织文件，定义了系统中每个区域的用途、所需要的最小构成的文件和目录，同时还给出了例外处理和矛盾处理。</p><h1 id="文件系统的目录结构"><a href="#文件系统的目录结构" class="headerlink" title="文件系统的目录结构"></a>文件系统的目录结构</h1><p>​    在Linux系统中，所有的目录和文件都是由**/**(根目录)开始的，然后再一个一个分下来，通常我们将这种配置方式称为目录树，图中画出了Linux系统目录大致情况</p><p><img src="fhs-1.jpg" alt="fhs-1"></p><table><thead><tr><th>文件和目录被组织成一个单根倒置树结构</th></tr></thead><tbody><tr><td>文件系统从根目录下开始，用“/”表示</td></tr><tr><td>根文件系统(rootfs): root filesystem</td></tr><tr><td>标准Linux文件系统(如: ext4) ，文件名称大小写敏感，例如: MAIL,Mail, mail,mAiL</td></tr><tr><td>以 . 开头的文件为隐藏文件路径分隔的 /</td></tr><tr><td>文件名最长255个字节</td></tr><tr><td>包括路径在内文件名称最长4095个字节</td></tr><tr><td>蓝色–&gt;目录 绿色-&gt;可执行文件 红色–&gt;压缩文件 浅蓝色–&gt;链接文件 灰色–&gt;其他文件</td></tr><tr><td>除了斜杠和NUL,所有字符都有效.但使用特殊字符的目录名和文件不推荐使用，有些字符需要用引号来引用</td></tr><tr><td>每个文件都有两类相关数据: 元数据: metadata，即属性，数据: data，即文件内容Linux的文件系统分层结构: FHS Filesystem Hierarchy Standard</td></tr></tbody></table><h1 id="常见的文件系统目录功能"><a href="#常见的文件系统目录功能" class="headerlink" title="常见的文件系统目录功能"></a>常见的文件系统目录功能</h1><p><img src="fhs-2.png" alt="fhs-2"></p><p>· /boot    引导文件存放目录，内核文件(vmlinuz)、引导加载器(bootloader，grub)都存放于此目录</p><p>· /bin     所有用户使用的基本命令: 不能关联至独立分区，OS启动即会用到的程序</p><p>· /sbin    管理类的基本命令: 不能关联至独立分区，OS启动即会用到的程序</p><p>· /1ib     启动时程序依赖的基本共享库文件以及内核模块文件(/1ib/modules)</p><p>· /1ib64   专用于x86_64系统上的辅助共享库文件存放位置</p><p>· /etc     配置文件目录</p><p>· /home    普通用户家目录</p><p>· /root    管理员的家目录</p><p>· /media   便携式移动设备挂载点</p><p>· /mnt     临时文件系统挂载点</p><p>· /dev     设备文件及特殊文件存储位置</p><p>· /opt     第三方应用程序的安装位置</p><p>· /srv     系统上运行的服务用到的数据</p><p>· /tmp     临时文件存储位置</p><p>· /usr     universal shared, read-only data</p><p>· /var     variable data files</p><p>· /proc    用于输出内核与进程信息相关的虚拟文件系统</p><p>· /sys     用于输出当前系统上硬件设备相关信息虚拟文件系统</p><p>· /selinux security enhanced Linux，selinux相关的安全策略等信息的存储位置</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux ls命令介绍</title>
    <link href="/2023/06/04/ls%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/06/04/ls%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Linux ls（英文全拼： list directory contents）命令用于显示指定工作目录下之内容（列出目前工作目录所含的文件及子目录)。</p><table><thead><tr><th>-a</th><th>显示所有文件及目录 (. 开头的隐藏文件也会列出)</th></tr></thead><tbody><tr><td>-d</td><td>只列出目录（不递归列出目录内的文件）</td></tr><tr><td>-l</td><td>以长格式显示文件和目录信息，包括权限、所有者、大小、创建时间等</td></tr><tr><td>-r</td><td>倒序显示文件和目录</td></tr><tr><td>-t</td><td>将按照修改时间排序，最新的文件在最前面</td></tr><tr><td>-A</td><td>同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录)</td></tr><tr><td>-F</td><td>在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</td></tr><tr><td>-R</td><td>递归显示目录中的所有文件和子目录</td></tr></tbody></table><p><img src="ls-1.png" alt="ls-1"></p><table><thead><tr><th>1表示文件的类型</th><th>- 普通文件 d 目录文件 p 管理文件 l 链接文件 b 块设备文件 c 字符设备文件 s 嵌套字文件</th></tr></thead><tbody><tr><td>2所有者/所有者权限</td><td>r 读权限 w 写权限 x 可执行权限 - 无权限</td></tr><tr><td>3组用户权限</td><td></td></tr><tr><td>4其他用户权限</td><td></td></tr><tr><td>5开启防火墙</td><td></td></tr><tr><td>6文件硬链接数或目录子目录数</td><td></td></tr><tr><td>7用户名</td><td></td></tr><tr><td>8组名</td><td></td></tr><tr><td>9文件大小（字节）</td><td></td></tr><tr><td>10最后修改时间</td><td></td></tr><tr><td>11文件名</td><td>(如果是一个符号链接,那么会有一个 “-&gt;” 箭头符号,后面根一个它指向的文件)</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>ls</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ls</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux man命令介绍</title>
    <link href="/2023/06/04/Linux-man%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/04/Linux-man%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>man</strong>是Linux的一个非常强的的命令，它的全称为manual（手册），手册页存放在/usr/share/man</p><p>当我们遇到忘记的指令，可以直接通过man指令来获得提示</p><p>举个例子，当我们输入<strong>man grep|less</strong>(less 支持翻页和搜索，支持<strong>b向上翻页</strong>和<strong>d向下翻页</strong>)，就会获得以下界面。为了快速检索到我们想要的关键字信息，可以输入**/text**，从而快速的匹配到text，获得对应信息</p><p><img src="man-1.png" alt="man-1"></p><p><img src="man-2.png" alt="man-2"></p><h1 id="man文档的内容结构"><a href="#man文档的内容结构" class="headerlink" title="man文档的内容结构"></a>man文档的内容结构</h1><h2 id="man-页面分组"><a href="#man-页面分组" class="headerlink" title="man 页面分组"></a>man 页面分组</h2><p>不同类型的帮助称为不同的“章节”统称为Linux手册，man 1 man</p><table><thead><tr><th>Executable programs or shell commands</th><th>用户命令</th></tr></thead><tbody><tr><td>System calls (functions provided by thekernel)</td><td>系统调用</td></tr><tr><td>Library calls(functions within program libraries)</td><td>C库调用</td></tr><tr><td>Special files (usually found in /dev)</td><td>设备文件及特殊文件</td></tr><tr><td>File formats and conventionseg /etc/passwd</td><td>配置文件格式</td></tr><tr><td>Games</td><td>游戏</td></tr><tr><td>Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)</td><td>杂项</td></tr><tr><td>System administration commands(usually only for root)</td><td>管理类的命令</td></tr><tr><td>Kernelroutines INon standardl</td><td>Linux 内核API</td></tr></tbody></table><p><img src="man-3.png" alt="man-3"></p><h2 id="man-帮助段落说明"><a href="#man-帮助段落说明" class="headerlink" title="man 帮助段落说明"></a>man 帮助段落说明</h2><table><thead><tr><th>NAME</th><th>名称及简要说明</th></tr></thead><tbody><tr><td>SYNOPSIS</td><td>用法格式说明</td></tr><tr><td>DESCRIPTION</td><td>详细说明</td></tr><tr><td>OPTIONS</td><td>选项说明</td></tr><tr><td>EXAMPLES</td><td>示例</td></tr><tr><td>FILES</td><td>相关说明</td></tr><tr><td>AUTHOR</td><td>作者</td></tr><tr><td>COPYRIGHT</td><td>版本信息</td></tr><tr><td>REPORTING BUGS</td><td>bug信息</td></tr><tr><td>SEE ALSO</td><td>其他帮助参考</td></tr><tr><td>[]</td><td>可选内容</td></tr><tr><td>&lt;&gt;</td><td>必选内容</td></tr><tr><td>a|b</td><td>二选一</td></tr><tr><td>{}</td><td>分组</td></tr><tr><td>…</td><td>同一内容可以出现多次</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>man</category>
      
    </categories>
    
    
    <tags>
      
      <tag>man</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RockyLinux安装</title>
    <link href="/2023/06/03/RockyLinux%E5%AE%89%E8%A3%85/"/>
    <url>/2023/06/03/RockyLinux%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="RockyLinux安装"><a href="#RockyLinux安装" class="headerlink" title="RockyLinux安装"></a>RockyLinux安装</h1><p><a href="https://rockylinux.org/download">https://rockylinux.org/download</a></p><h2 id="1、打开VMware-Workstation软件》文件菜单》新建虚拟机》下一步"><a href="#1、打开VMware-Workstation软件》文件菜单》新建虚拟机》下一步" class="headerlink" title="1、打开VMware Workstation软件》文件菜单》新建虚拟机》下一步"></a>1、打开VMware Workstation软件》文件菜单》新建虚拟机》下一步</h2><p><img src="rocky-1.png" alt="rocky-1"></p><h2 id="2、选择稍后安装操作系统》下一步"><a href="#2、选择稍后安装操作系统》下一步" class="headerlink" title="2、选择稍后安装操作系统》下一步"></a>2、选择稍后安装操作系统》下一步</h2><p><img src="rocky-2.png" alt="rocky-2"></p><h2 id="3、选择系统版本》下一步"><a href="#3、选择系统版本》下一步" class="headerlink" title="3、选择系统版本》下一步"></a>3、选择系统版本》下一步</h2><p><img src="rocky-3.png" alt="rocky-3"></p><h2 id="4、输入虚拟机名称各选择虚拟机保存位置》下一步"><a href="#4、输入虚拟机名称各选择虚拟机保存位置》下一步" class="headerlink" title="4、输入虚拟机名称各选择虚拟机保存位置》下一步"></a>4、输入虚拟机名称各选择虚拟机保存位置》下一步</h2><p><img src="rocky-4.png" alt="rocky-4"></p><h2 id="5、输入硬盘大小和选择单个文件"><a href="#5、输入硬盘大小和选择单个文件" class="headerlink" title="5、输入硬盘大小和选择单个文件"></a>5、输入硬盘大小和选择单个文件</h2><p><img src="rocky-5.png" alt="rocky-5"></p><h2 id="6、点击自定义硬件》配置内存和CPU》选择ISO映像文件"><a href="#6、点击自定义硬件》配置内存和CPU》选择ISO映像文件" class="headerlink" title="6、点击自定义硬件》配置内存和CPU》选择ISO映像文件"></a>6、点击自定义硬件》配置内存和CPU》选择ISO映像文件</h2><p><img src="rocky-6.png" alt="rocky-6"></p><h2 id="7、点击完成"><a href="#7、点击完成" class="headerlink" title="7、点击完成"></a>7、点击完成</h2><p><img src="rocky-7.png" alt="rocky-7"></p><h2 id="8、点击开启虚拟机开始安装RockyLinux8-7系统"><a href="#8、点击开启虚拟机开始安装RockyLinux8-7系统" class="headerlink" title="8、点击开启虚拟机开始安装RockyLinux8.7系统"></a>8、点击开启虚拟机开始安装RockyLinux8.7系统</h2><p><img src="rocky-8.png" alt="rocky-8"></p><h2 id="9、选择Install-Rocky-Linux8-回车"><a href="#9、选择Install-Rocky-Linux8-回车" class="headerlink" title="9、选择Install Rocky Linux8 回车"></a>9、选择Install Rocky Linux8 回车</h2><p><img src="rocky-9.png" alt="rocky-9"></p><h2 id="10、选择语言"><a href="#10、选择语言" class="headerlink" title="10、选择语言"></a>10、选择语言</h2><p><img src="rocky-10.png" alt="rocky-10"></p><h2 id="11、设置磁盘空间分配策略"><a href="#11、设置磁盘空间分配策略" class="headerlink" title="11、设置磁盘空间分配策略"></a>11、设置磁盘空间分配策略</h2><p><img src="rocky-11.png" alt="rocky-11"></p><p><img src="rocky-12.png" alt="rocky-12"></p><h2 id="12、安装指定包组"><a href="#12、安装指定包组" class="headerlink" title="12、安装指定包组"></a>12、安装指定包组</h2><p><img src="rocky-13.png" alt="rocky-13"></p><p><img src="rocky-14.png" alt="rocky-14"></p><h2 id="13、配置网络和主机名"><a href="#13、配置网络和主机名" class="headerlink" title="13、配置网络和主机名"></a>13、配置网络和主机名</h2><p><img src="rocky-15.png" alt="rocky-15"></p><p><img src="rocky-16.png" alt="rocky-16"></p><h2 id="14、设置时区和时间"><a href="#14、设置时区和时间" class="headerlink" title="14、设置时区和时间"></a>14、设置时区和时间</h2><p><img src="rocky-17.png" alt="rocky-17"></p><p><img src="rocky-18.png" alt="rocky-18"></p><h2 id="15、设置root用户的密码"><a href="#15、设置root用户的密码" class="headerlink" title="15、设置root用户的密码"></a>15、设置root用户的密码</h2><p><img src="rocky-19.png" alt="rocky-19"></p><p><img src="rocky-20.png" alt="rocky-20"></p><h2 id="16、创建普通用户"><a href="#16、创建普通用户" class="headerlink" title="16、创建普通用户"></a>16、创建普通用户</h2><p><img src="rocky-21.png" alt="rocky-21"></p><p><img src="rocky-22.png" alt="rocky-22"></p><h2 id="17、开始安装》安装完后重启"><a href="#17、开始安装》安装完后重启" class="headerlink" title="17、开始安装》安装完后重启"></a>17、开始安装》安装完后重启</h2><p><img src="rocky-23.png" alt="rocky-23"></p><p><img src="rocky-24.png" alt="rocky-24"></p><h2 id="18、许可协议"><a href="#18、许可协议" class="headerlink" title="18、许可协议"></a>18、许可协议</h2><p><img src="rocky-25.png" alt="rocky-25"></p><p><img src="rocky-26.png" alt="rocky-26"></p><p><img src="rocky-27.png" alt="rocky-27"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Rocky</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPL、LGPL、BSD、Apa、MIT、Mozilla 6种开源许可证的区别</title>
    <link href="/2023/06/03/GPL%E3%80%81LGPL%E3%80%81BSD%E3%80%81Apa%E3%80%81MIT%E3%80%81Mozilla6%E7%A7%8D%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/06/03/GPL%E3%80%81LGPL%E3%80%81BSD%E3%80%81Apa%E3%80%81MIT%E3%80%81Mozilla6%E7%A7%8D%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="GNU通用公共许可证（General-Public-License，GPL）"><a href="#GNU通用公共许可证（General-Public-License，GPL）" class="headerlink" title="GNU通用公共许可证（General Public License，GPL）"></a>GNU通用公共许可证（General Public License，GPL）</h1><p><img src="GPL.png" alt="GPL"></p><p>​    <strong>GNU通用公共许可证</strong>（General Public License，GPL）：目前广泛使用的开源软件许可协议之一，用户享有运行、学习、共享和修改软件的自由。GPL最初是自由软件基金会创始人Richard Stallman起草的，其版本目前已经发展到了第3版。GPL的目的是保证程序员在开源社区中所做的工作对整个世界是有益的，所开发的软件也是自由的，并极力避免开源软件被私有化以及被无良软件公司所剥削。</p><p>​    现在，只要软件中包含了遵循GPL许可证的产品或代码，该软件就必须开源、免费，因此这个许可证并不适合商业收费软件。遵循该许可证的开源软件数量极其庞大，包括Linux内核在内的大多数的开源软件都是基于GPL许可证的。GPL赋予了用户著名的五大自由。</p><p>​    使用自由：允许用户根据需要自由使用这个软件。</p><p>​    复制自由：允许把软件复制到任何人的计算机中，并且不限制复制的数量。</p><p>​    修改自由：允许开发人员增加或删除软件的功能，但软件修改后必须依然基于GPL许可证。</p><p>​    衍生自由：允许用户深度定制化软件后，为软件注册自己的新商标，再发行衍生品的自由。</p><p>​    收费自由：允许在各种媒介上出售该软件，但必须提前让买家知道这个软件是可以免费获得的。因此，一般来讲，开源软件都是通过为用户提供有偿服务的形式来营利的。</p><h1 id="较宽松通用公共许可证（Lesser-GPL-LGPL）"><a href="#较宽松通用公共许可证（Lesser-GPL-LGPL）" class="headerlink" title="较宽松通用公共许可证（Lesser GPL, LGPL）"></a>较宽松通用公共许可证（Lesser GPL, LGPL）</h1><p><img src="LGPL.png" alt="LGPL"></p><p>​    <strong>较宽松通用公共许可证</strong>（Lesser GPL, LGPL）：一个主要为保护类库权益而设计的GPL开源协议。与标准GPL许可证相比，LGPL允许商业软件以类库引用的方式使用开源代码，而不用将其产品整体开源，因此普遍被商业软件用来引用类库代码。简单来说，就是针对使用了基于LGPL许可证的开源代码，在涉及这部分代码，以及修改过或者衍生出来的代码时，都必须继续采用LGPL协议，除此以外的其他代码则不强制要求。</p><p>​    如果您觉得LGPL许可证更多地是关注对类库文件的保护，而不是软件整体，那就对了。因为该许可证最早的名字是Library GPL，即GPL类库开源许可证，保护的对象有glibc、GTK widget toolkit等类库文件。</p><h1 id="伯克利软件发布版（Berkeley-Software-Distribution-BSD）"><a href="#伯克利软件发布版（Berkeley-Software-Distribution-BSD）" class="headerlink" title="伯克利软件发布版（Berkeley Software Distribution, BSD）"></a>伯克利软件发布版（Berkeley Software Distribution, BSD）</h1><p><img src="bsd.png" alt="bsd"></p><p>​    <strong>伯克利软件发布版</strong>（Berkeley Software Distribution, BSD）许可证：另一款被广泛使用的开源软件许可协议。相较于GPL许可证，BSD更加宽松，适合于商业用途。用户可以使用、修改和重新发布遵循该许可证的软件，并且可以将软件作为商业软件发布和销售，前提是需要满足下面3个条件。</p><p>​    如果再发布的软件中包含开源代码，则源代码必须继续遵循BSD许可证。</p><p>​    如果再发布的软件中只有二进制程序，则需要在相关文档或版权文件中声明原始代码遵循了BSD许可证。</p><p>​    不允许用原始软件的名字、作者名字或机构名称进行市场推广。</p><h1 id="Apache许可证（Apache-License）"><a href="#Apache许可证（Apache-License）" class="headerlink" title="Apache许可证（Apache License）"></a>Apache许可证（Apache License）</h1><p><img src="apache.png" alt="apache"></p><p>​    <strong>Apache许可证</strong>（Apache License）：顾名思义，是由Apache软件基金会负责发布和维护的开源许可协议。作为当今世界上最大的开源基金会，Apache不仅因此协议而出名，还因市场占有率第一的Web服务器软件而享誉行业。目前使用最广泛的Apache许可证是2004年发行的2.0版本，它在为开发人员提供版权及专利许可的同时，还允许用户拥有修改代码及再发布的自由。该许可证非常适合用于商业软件，现在热门的Hadoop、Apache HTTP Server、MongoDB等项目都是基于该许可证研发的。程序开发人员在开发遵循该许可证的软件时，要严格遵守下面4个条件。</p><p>​    该软件及其衍生品必须继续使用Apache许可证。</p><p>​    如果修改了程序源代码，需要在文档中进行声明。</p><p>​    若软件是基于他人的源代码编写而成的，则需要保留原始代码的许可证、商标、专利声明及原作者声明的其他内容信息。</p><p>​    如果再发布的软件中有声明文件，则需在此文件中注明基于了Apache许可证及其他许可证。</p><h1 id="MIT许可证（Massachusetts-Institute-of-Technology-License）"><a href="#MIT许可证（Massachusetts-Institute-of-Technology-License）" class="headerlink" title="MIT许可证（Massachusetts Institute of Technology License）"></a>MIT许可证（Massachusetts Institute of Technology License）</h1><p><img src="MIT.png" alt="MIT"></p><p>​    <strong>MIT许可证</strong>（Massachusetts Institute of Technology License）：源于麻省理工学院，又称为X11协议。MIT许可证是目前限制最少的开源许可证之一，用户可以使用、复制、修改、再发布软件，而且只要在修改后的软件源代码中保留原作者的许可信息即可，因此普遍被商业软件（例如jQuery与Node.js）所使用。也就是说，MIT许可证宽松到一个新境界，即用户只要在代码中声明了MIT许可证和版权信息，就可以去做任何事情，而无须承担任何责任。</p><h1 id="Mozilla公共许可证（Mozilla-Public-License，MPL）"><a href="#Mozilla公共许可证（Mozilla-Public-License，MPL）" class="headerlink" title="Mozilla公共许可证（Mozilla Public License，MPL）"></a>Mozilla公共许可证（Mozilla Public License，MPL）</h1><p><img src="Mozilla.png" alt="Mozilla"></p><p>​    <strong>Mozilla公共许可证</strong>（Mozilla Public License，MPL）：于1998年初由Netscape公司的Mozilla小组设计，原因是它们认为GPL和BSD许可证不能很好地解决开发人员对源代码的需求和收益之间的平衡关系，因此便将这两个协议进行融合，形成了MPL。2012年年初，Mozilla基金会发布了MPL 2.0版本（目前为止也是最新的版本），后续被用在Firefox、Thunderbird等诸多产品上。最新版的MPL公共许可证有以下特点。</p><p>​    在使用基于MPL许可证的源代码时，后续只需要继续开源这部分特定代码即可，新研发的软件不用完全被该许可证控制。</p><p>​    开发人员可以将基于MPL、GPL、BSD等多种许可证的代码一起混合使用。</p><p>​    开发人员在发布新软件时，必须附带一个专门用于说明该程序的文件，内容要有原始代码的修改时间和修改方式。</p><h1 id="6种许可证的总结"><a href="#6种许可证的总结" class="headerlink" title="6种许可证的总结"></a>6种许可证的总结</h1><p><img src="OpenSourceProtocol.jpg" alt="OpenSourceProtocol"></p><p>严格程度：<strong>MIT&gt;BSD&gt;Apache&gt;LGPL&gt;Mozilla&gt;GPL</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>GPL、LGPL、BSD、Apa、MIT、Mozilla</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
